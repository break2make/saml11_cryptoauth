
Sw_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b30  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000020  0000fb00  0000fb00  0002fb00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     00000030  20000000  00003b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000168  20000030  00003b60  00020030  2**2
                  ALLOC
  4 .heap         00000200  20000198  00003cc8  00020030  2**0
                  ALLOC
  5 .stack        00000400  20000398  00003ec8  00020030  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00034020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00025183  00000000  00000000  000340a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003c77  00000000  00000000  00059228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000dac9  00000000  00000000  0005ce9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c38  00000000  00000000  0006a968  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001088  00000000  00000000  0006b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00007bd6  00000000  00000000  0006c628  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ffbc  00000000  00000000  000741fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000953b7  00000000  00000000  000841ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00002198  00000000  00000000  00119574  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 07 00 20 4d 13 00 00 49 13 00 00 49 13 00 00     ... M...I...I...
	...
      2c:	49 13 00 00 00 00 00 00 00 00 00 00 49 13 00 00     I...........I...
      3c:	49 13 00 00 49 13 00 00 49 13 00 00 49 13 00 00     I...I...I...I...
      4c:	49 13 00 00 49 13 00 00 49 13 00 00 49 13 00 00     I...I...I...I...
      5c:	49 13 00 00 49 13 00 00 49 13 00 00 49 13 00 00     I...I...I...I...
      6c:	49 13 00 00 49 13 00 00 49 13 00 00 49 13 00 00     I...I...I...I...
      7c:	49 13 00 00 49 13 00 00 49 13 00 00 49 13 00 00     I...I...I...I...
      8c:	49 13 00 00 49 13 00 00 49 13 00 00 49 13 00 00     I...I...I...I...
      9c:	49 13 00 00 49 13 00 00 49 13 00 00 49 13 00 00     I...I...I...I...
      ac:	49 13 00 00 49 13 00 00 49 13 00 00 49 13 00 00     I...I...I...I...
      bc:	49 13 00 00 49 13 00 00 49 13 00 00 49 13 00 00     I...I...I...I...
      cc:	49 13 00 00 49 13 00 00 49 13 00 00 49 13 00 00     I...I...I...I...
      dc:	49 13 00 00 49 13 00 00 49 13 00 00 49 13 00 00     I...I...I...I...
      ec:	49 13 00 00 49 13 00 00                             I...I...

000000f4 <__acle_se_nsc_periph_clock_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#endif
{
      f4:	23ff      	movs	r3, #255	; 0xff
      f6:	4003      	ands	r3, r0
      f8:	009b      	lsls	r3, r3, #2
      fa:	f641 4c00 	movw	ip, #7168	; 0x1c00
      fe:	f2c4 0c00 	movt	ip, #16384	; 0x4000
     102:	4463      	add	r3, ip
}

static inline bool hri_gclk_get_PCHCTRL_CHEN_bit(const void *const hw, uint8_t index)
{
	uint32_t tmp;
	tmp = ((Gclk *)hw)->PCHCTRL[index].reg;
     104:	2280      	movs	r2, #128	; 0x80
     106:	589a      	ldr	r2, [r3, r2]
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
		return 1; /* Already enabled */
     108:	2001      	movs	r0, #1
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
     10a:	0652      	lsls	r2, r2, #25
     10c:	d404      	bmi.n	118 <__acle_se_nsc_periph_clock_init+0x24>
	} else {
		hri_gclk_write_PCHCTRL_reg(GCLK, gclk_id, gclk_src | (1 << GCLK_PCHCTRL_CHEN_Pos));
     10e:	2240      	movs	r2, #64	; 0x40
     110:	4311      	orrs	r1, r2
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     112:	3240      	adds	r2, #64	; 0x40
     114:	5099      	str	r1, [r3, r2]
	}
	return 0;
     116:	2000      	movs	r0, #0
}
     118:	0001      	movs	r1, r0
     11a:	0002      	movs	r2, r0
     11c:	0003      	movs	r3, r0
     11e:	4684      	mov	ip, r0
     120:	f38e 8800 	msr	CPSR_f, lr
     124:	4774      	bxns	lr

00000126 <__acle_se_nsc_ext_irq_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#endif
{
     126:	b5f0      	push	{r4, r5, r6, r7, lr}
     128:	46ce      	mov	lr, r9
     12a:	4647      	mov	r7, r8
     12c:	b580      	push	{r7, lr}
     12e:	b087      	sub	sp, #28
     130:	9002      	str	r0, [sp, #8]
     132:	9103      	str	r1, [sp, #12]
     134:	9204      	str	r2, [sp, #16]
     136:	9305      	str	r3, [sp, #20]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_evctrl_reg_t hri_eic_read_EVCTRL_reg(const void *const hw)
{
	return ((Eic *)hw)->EVCTRL.reg;
     138:	f642 2300 	movw	r3, #10752	; 0x2a00
     13c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     140:	6898      	ldr	r0, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_asynch_reg_t hri_eic_read_ASYNCH_reg(const void *const hw)
{
	return ((Eic *)hw)->ASYNCH.reg;
     142:	6999      	ldr	r1, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_debouncen_reg_t hri_eic_read_DEBOUNCEN_reg(const void *const hw)
{
	return ((Eic *)hw)->DEBOUNCEN.reg;
     144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	return ((Eic *)hw)->CONFIG[index].reg;
     146:	69dc      	ldr	r4, [r3, #28]
     148:	46a4      	mov	ip, r4
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_nonsec_reg_t hri_eic_read_NONSEC_reg(const void *const hw)
{
	return ((Eic *)hw)->NONSEC.reg;
     14a:	6c1f      	ldr	r7, [r3, #64]	; 0x40
	uint32_t config_val         = hri_eic_read_CONFIG_reg(EIC_SEC, 0);
	uint32_t nonsec_mask        = hri_eic_read_NONSEC_reg(EIC_SEC);
	uint32_t config_nonsec_mask = 0;

	/* Calculate external interrupt settings with non-secure part  */
	evctrl_val    = (evctrl_val & (~nonsec_mask)) | (irq_setting.evctrl & nonsec_mask);
     14c:	9e02      	ldr	r6, [sp, #8]
     14e:	4046      	eors	r6, r0
     150:	403e      	ands	r6, r7
     152:	4046      	eors	r6, r0
	asynch_val    = (asynch_val & (~nonsec_mask)) | (irq_setting.asynch & nonsec_mask);
     154:	9b04      	ldr	r3, [sp, #16]
     156:	9301      	str	r3, [sp, #4]
     158:	001d      	movs	r5, r3
     15a:	404d      	eors	r5, r1
     15c:	403d      	ands	r5, r7
     15e:	404d      	eors	r5, r1
	debouncen_val = (debouncen_val & (~nonsec_mask)) | (irq_setting.debouncen & nonsec_mask);
     160:	9c05      	ldr	r4, [sp, #20]
     162:	4054      	eors	r4, r2
     164:	403c      	ands	r4, r7
     166:	4054      	eors	r4, r2
     168:	46a1      	mov	r9, r4
	uint32_t config_nonsec_mask = 0;
     16a:	2100      	movs	r1, #0
	for (i = 0; i < 8; i++) {
     16c:	2300      	movs	r3, #0
		if (nonsec_mask & (1u << i)) {
     16e:	2001      	movs	r0, #1
			config_nonsec_mask |= (0xFu << (i * 4));
     170:	f240 080f 	movw	r8, #15
     174:	e002      	b.n	17c <__acle_se_nsc_ext_irq_init+0x56>
	for (i = 0; i < 8; i++) {
     176:	3301      	adds	r3, #1
     178:	2b08      	cmp	r3, #8
     17a:	d008      	beq.n	18e <__acle_se_nsc_ext_irq_init+0x68>
		if (nonsec_mask & (1u << i)) {
     17c:	0002      	movs	r2, r0
     17e:	409a      	lsls	r2, r3
     180:	4217      	tst	r7, r2
     182:	d0f8      	beq.n	176 <__acle_se_nsc_ext_irq_init+0x50>
			config_nonsec_mask |= (0xFu << (i * 4));
     184:	009a      	lsls	r2, r3, #2
     186:	4644      	mov	r4, r8
     188:	4094      	lsls	r4, r2
     18a:	4321      	orrs	r1, r4
     18c:	e7f3      	b.n	176 <__acle_se_nsc_ext_irq_init+0x50>
		}
	}
	config_val = (config_val & (~config_nonsec_mask)) | (irq_setting.config[0] & config_nonsec_mask);
     18e:	4660      	mov	r0, ip
     190:	9b03      	ldr	r3, [sp, #12]
     192:	4058      	eors	r0, r3
     194:	4008      	ands	r0, r1
     196:	4663      	mov	r3, ip
     198:	4058      	eors	r0, r3
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE_Msk;
     19a:	f642 2300 	movw	r3, #10752	; 0x2a00
     19e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     1a2:	781a      	ldrb	r2, [r3, #0]
     1a4:	2102      	movs	r1, #2
     1a6:	438a      	bics	r2, r1
     1a8:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     1aa:	f642 2200 	movw	r2, #10752	; 0x2a00
     1ae:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1b2:	3101      	adds	r1, #1
     1b4:	6853      	ldr	r3, [r2, #4]
     1b6:	4219      	tst	r1, r3
     1b8:	d1fc      	bne.n	1b4 <__acle_se_nsc_ext_irq_init+0x8e>
     1ba:	f642 2200 	movw	r2, #10752	; 0x2a00
     1be:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1c2:	2102      	movs	r1, #2
     1c4:	6853      	ldr	r3, [r2, #4]
     1c6:	4219      	tst	r1, r3
     1c8:	d1fc      	bne.n	1c4 <__acle_se_nsc_ext_irq_init+0x9e>
	((Eic *)hw)->EVCTRL.reg = data;
     1ca:	f642 2300 	movw	r3, #10752	; 0x2a00
     1ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
     1d2:	609e      	str	r6, [r3, #8]
	((Eic *)hw)->ASYNCH.reg = data;
     1d4:	619d      	str	r5, [r3, #24]
	((Eic *)hw)->DEBOUNCEN.reg = data;
     1d6:	464a      	mov	r2, r9
     1d8:	631a      	str	r2, [r3, #48]	; 0x30
	((Eic *)hw)->CONFIG[index].reg = data;
     1da:	61d8      	str	r0, [r3, #28]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE_Msk;
     1dc:	781a      	ldrb	r2, [r3, #0]
     1de:	2102      	movs	r1, #2
     1e0:	430a      	orrs	r2, r1
     1e2:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     1e4:	f642 2200 	movw	r2, #10752	; 0x2a00
     1e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1ec:	3101      	adds	r1, #1
     1ee:	6853      	ldr	r3, [r2, #4]
     1f0:	4219      	tst	r1, r3
     1f2:	d1fc      	bne.n	1ee <__acle_se_nsc_ext_irq_init+0xc8>

	/* Enable EIC */
	hri_eic_set_CTRLA_ENABLE_bit(EIC_SEC);

	return 0;
}
     1f4:	2000      	movs	r0, #0
     1f6:	b007      	add	sp, #28
     1f8:	0001      	movs	r1, r0
     1fa:	0002      	movs	r2, r0
     1fc:	0003      	movs	r3, r0
     1fe:	4684      	mov	ip, r0
     200:	bc0c      	pop	{r2, r3}
     202:	4690      	mov	r8, r2
     204:	4699      	mov	r9, r3
     206:	bcf0      	pop	{r4, r5, r6, r7}
     208:	bc02      	pop	{r1}
     20a:	4686      	mov	lr, r0
     20c:	f381 8800 	msr	CPSR_f, r1
     210:	470c      	bxns	r1
	...

00000214 <__do_global_dtors_aux>:
     214:	b510      	push	{r4, lr}
     216:	f240 0430 	movw	r4, #48	; 0x30
     21a:	f2c2 0400 	movt	r4, #8192	; 0x2000
     21e:	7823      	ldrb	r3, [r4, #0]
     220:	b963      	cbnz	r3, 23c <__do_global_dtors_aux+0x28>
     222:	f240 0300 	movw	r3, #0
     226:	f2c0 0300 	movt	r3, #0
     22a:	b12b      	cbz	r3, 238 <__do_global_dtors_aux+0x24>
     22c:	f244 0020 	movw	r0, #16416	; 0x4020
     230:	f2c0 0080 	movt	r0, #128	; 0x80
     234:	e000      	b.n	238 <__do_global_dtors_aux+0x24>
     236:	bf00      	nop
     238:	2301      	movs	r3, #1
     23a:	7023      	strb	r3, [r4, #0]
     23c:	bd10      	pop	{r4, pc}
     23e:	46c0      	nop			; (mov r8, r8)

00000240 <frame_dummy>:
     240:	f240 0300 	movw	r3, #0
     244:	f2c0 0300 	movt	r3, #0
     248:	b510      	push	{r4, lr}
     24a:	b14b      	cbz	r3, 260 <frame_dummy+0x20>
     24c:	f240 0134 	movw	r1, #52	; 0x34
     250:	f244 0020 	movw	r0, #16416	; 0x4020
     254:	f2c2 0100 	movt	r1, #8192	; 0x2000
     258:	f2c0 0080 	movt	r0, #128	; 0x80
     25c:	e000      	b.n	260 <frame_dummy+0x20>
     25e:	bf00      	nop
     260:	f244 0020 	movw	r0, #16416	; 0x4020
     264:	f2c0 0080 	movt	r0, #128	; 0x80
     268:	6803      	ldr	r3, [r0, #0]
     26a:	b903      	cbnz	r3, 26e <frame_dummy+0x2e>
     26c:	bd10      	pop	{r4, pc}
     26e:	f240 0300 	movw	r3, #0
     272:	f2c0 0300 	movt	r3, #0
     276:	2b00      	cmp	r3, #0
     278:	d0f8      	beq.n	26c <frame_dummy+0x2c>
     27a:	4798      	blx	r3
     27c:	e7f6      	b.n	26c <frame_dummy+0x2c>
     27e:	46c0      	nop			; (mov r8, r8)

00000280 <initATCACommand>:
 * \param[in] ca_cmd       Pre-allocated command structure to initialize.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCACommand(ATCADeviceType device_type, ATCACommand ca_cmd)
{
	if (ca_cmd == NULL) {
     280:	b121      	cbz	r1, 28c <initATCACommand+0xc>
		return ATCA_BAD_PARAM;
	}

	ca_cmd->dt            = device_type;
     282:	7008      	strb	r0, [r1, #0]
	ca_cmd->clock_divider = 0;
     284:	2300      	movs	r3, #0
     286:	704b      	strb	r3, [r1, #1]

	return ATCA_SUCCESS;
     288:	2000      	movs	r0, #0
}
     28a:	4770      	bx	lr
		return ATCA_BAD_PARAM;
     28c:	20e2      	movs	r0, #226	; 0xe2
     28e:	e7fc      	b.n	28a <initATCACommand+0xa>

00000290 <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
     290:	b5f0      	push	{r4, r5, r6, r7, lr}
     292:	46d6      	mov	lr, sl
     294:	464f      	mov	r7, r9
     296:	4646      	mov	r6, r8
     298:	b5c0      	push	{r6, r7, lr}
     29a:	4694      	mov	ip, r2
	uint16_t crc_register = 0;
	uint16_t polynom      = 0x8005;
	uint8_t  shift_register;
	uint8_t  data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
     29c:	b300      	cbz	r0, 2e0 <atCRC+0x50>
     29e:	4689      	mov	r9, r1
     2a0:	4688      	mov	r8, r1
     2a2:	4480      	add	r8, r0
     2a4:	2300      	movs	r3, #0
		for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
			data_bit = (data[counter] & shift_register) ? 1 : 0;
			crc_bit  = crc_register >> 15;
			crc_register <<= 1;
			if (data_bit != crc_bit) {
				crc_register ^= polynom;
     2a6:	4813      	ldr	r0, [pc, #76]	; (2f4 <atCRC+0x64>)
     2a8:	e015      	b.n	2d6 <atCRC+0x46>
		for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
     2aa:	006d      	lsls	r5, r5, #1
     2ac:	b2ed      	uxtb	r5, r5
     2ae:	3e01      	subs	r6, #1
     2b0:	b166      	cbz	r6, 2cc <atCRC+0x3c>
			crc_bit  = crc_register >> 15;
     2b2:	0bdf      	lsrs	r7, r3, #15
			crc_register <<= 1;
     2b4:	005b      	lsls	r3, r3, #1
     2b6:	b29b      	uxth	r3, r3
			data_bit = (data[counter] & shift_register) ? 1 : 0;
     2b8:	002c      	movs	r4, r5
     2ba:	400c      	ands	r4, r1
     2bc:	1e62      	subs	r2, r4, #1
     2be:	4194      	sbcs	r4, r2
			if (data_bit != crc_bit) {
     2c0:	b2e4      	uxtb	r4, r4
     2c2:	42bc      	cmp	r4, r7
     2c4:	d0f1      	beq.n	2aa <atCRC+0x1a>
				crc_register ^= polynom;
     2c6:	4043      	eors	r3, r0
     2c8:	b29b      	uxth	r3, r3
     2ca:	e7ee      	b.n	2aa <atCRC+0x1a>
     2cc:	f240 0a01 	movw	sl, #1
     2d0:	44d1      	add	r9, sl
	for (counter = 0; counter < length; counter++) {
     2d2:	45c1      	cmp	r9, r8
     2d4:	d005      	beq.n	2e2 <atCRC+0x52>
			data_bit = (data[counter] & shift_register) ? 1 : 0;
     2d6:	464a      	mov	r2, r9
     2d8:	7811      	ldrb	r1, [r2, #0]
     2da:	2608      	movs	r6, #8
     2dc:	2501      	movs	r5, #1
     2de:	e7e8      	b.n	2b2 <atCRC+0x22>
	uint16_t crc_register = 0;
     2e0:	2300      	movs	r3, #0
			}
		}
	}
	crc_le[0] = (uint8_t)(crc_register & 0x00FF);
     2e2:	4662      	mov	r2, ip
     2e4:	7013      	strb	r3, [r2, #0]
	crc_le[1] = (uint8_t)(crc_register >> 8);
     2e6:	0a1b      	lsrs	r3, r3, #8
     2e8:	7053      	strb	r3, [r2, #1]
}
     2ea:	bc1c      	pop	{r2, r3, r4}
     2ec:	4690      	mov	r8, r2
     2ee:	4699      	mov	r9, r3
     2f0:	46a2      	mov	sl, r4
     2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2f4:	ffff8005 	.word	0xffff8005

000002f8 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
     2f8:	b510      	push	{r4, lr}
	uint8_t length, *crc;

	length = packet->txsize - ATCA_CRC_SIZE;
	// computer pointer to CRC in the packet
	crc = &(packet->txsize) + length;
     2fa:	1c41      	adds	r1, r0, #1
	length = packet->txsize - ATCA_CRC_SIZE;
     2fc:	7840      	ldrb	r0, [r0, #1]
     2fe:	3802      	subs	r0, #2
	crc = &(packet->txsize) + length;
     300:	b2c0      	uxtb	r0, r0
     302:	180a      	adds	r2, r1, r0

	// stuff CRC into packet
	atCRC(length, &(packet->txsize), crc);
     304:	f240 2391 	movw	r3, #657	; 0x291
     308:	f2c0 0300 	movt	r3, #0
     30c:	4798      	blx	r3
}
     30e:	bd10      	pop	{r4, pc}

00000310 <atRandom>:
{
     310:	b510      	push	{r4, lr}
	packet->opcode = ATCA_RANDOM;
     312:	231b      	movs	r3, #27
     314:	708b      	strb	r3, [r1, #2]
	packet->txsize = RANDOM_COUNT;
     316:	3b14      	subs	r3, #20
     318:	704b      	strb	r3, [r1, #1]
	atCalcCrc(packet);
     31a:	0008      	movs	r0, r1
     31c:	f240 23f9 	movw	r3, #761	; 0x2f9
     320:	f2c0 0300 	movt	r3, #0
     324:	4798      	blx	r3
}
     326:	2000      	movs	r0, #0
     328:	bd10      	pop	{r4, pc}

0000032a <atRead>:
{
     32a:	b510      	push	{r4, lr}
	packet->opcode = ATCA_READ;
     32c:	2302      	movs	r3, #2
     32e:	708b      	strb	r3, [r1, #2]
	packet->txsize = READ_COUNT;
     330:	3305      	adds	r3, #5
     332:	704b      	strb	r3, [r1, #1]
	atCalcCrc(packet);
     334:	0008      	movs	r0, r1
     336:	f240 23f9 	movw	r3, #761	; 0x2f9
     33a:	f2c0 0300 	movt	r3, #0
     33e:	4798      	blx	r3
}
     340:	2000      	movs	r0, #0
     342:	bd10      	pop	{r4, pc}

00000344 <atSHA>:
{
     344:	b510      	push	{r4, lr}
	packet->opcode = ATCA_SHA;
     346:	2347      	movs	r3, #71	; 0x47
     348:	708b      	strb	r3, [r1, #2]
	switch (packet->param1 & SHA_MODE_MASK) {
     34a:	78c8      	ldrb	r0, [r1, #3]
     34c:	3b40      	subs	r3, #64	; 0x40
     34e:	4003      	ands	r3, r0
     350:	009b      	lsls	r3, r3, #2
     352:	480d      	ldr	r0, [pc, #52]	; (388 <atSHA+0x44>)
     354:	58c3      	ldr	r3, [r0, r3]
     356:	469f      	mov	pc, r3
		packet->txsize = ATCA_CMD_SIZE_MIN;
     358:	2307      	movs	r3, #7
     35a:	704b      	strb	r3, [r1, #1]
	atCalcCrc(packet);
     35c:	0008      	movs	r0, r1
     35e:	f240 23f9 	movw	r3, #761	; 0x2f9
     362:	f2c0 0300 	movt	r3, #0
     366:	4798      	blx	r3
}
     368:	2000      	movs	r0, #0
     36a:	bd10      	pop	{r4, pc}
		packet->txsize = ATCA_CMD_SIZE_MIN + packet->param2;
     36c:	888b      	ldrh	r3, [r1, #4]
     36e:	3307      	adds	r3, #7
     370:	704b      	strb	r3, [r1, #1]
		break;
     372:	e7f3      	b.n	35c <atSHA+0x18>
		packet->txsize = ATCA_CMD_SIZE_MIN + packet->param2;
     374:	888b      	ldrh	r3, [r1, #4]
     376:	3307      	adds	r3, #7
     378:	704b      	strb	r3, [r1, #1]
		break;
     37a:	e7ef      	b.n	35c <atSHA+0x18>
		packet->txsize = ATCA_CMD_SIZE_MIN;
     37c:	2307      	movs	r3, #7
     37e:	704b      	strb	r3, [r1, #1]
		break;
     380:	e7ec      	b.n	35c <atSHA+0x18>
		packet->txsize = ATCA_CMD_SIZE_MIN + write_context_size;
     382:	3207      	adds	r2, #7
     384:	704a      	strb	r2, [r1, #1]
		break;
     386:	e7e9      	b.n	35c <atSHA+0x18>
     388:	00003800 	.word	0x00003800

0000038c <atVerify>:
{
     38c:	b510      	push	{r4, lr}
	packet->opcode = ATCA_VERIFY;
     38e:	2345      	movs	r3, #69	; 0x45
     390:	708b      	strb	r3, [r1, #2]
	switch (packet->param1 & VERIFY_MODE_MASK) {
     392:	78ca      	ldrb	r2, [r1, #3]
     394:	3b42      	subs	r3, #66	; 0x42
     396:	4013      	ands	r3, r2
     398:	009b      	lsls	r3, r3, #2
     39a:	4a0c      	ldr	r2, [pc, #48]	; (3cc <atVerify+0x40>)
     39c:	58d3      	ldr	r3, [r2, r3]
     39e:	469f      	mov	pc, r3
		packet->txsize = VERIFY_256_STORED_COUNT;
     3a0:	2347      	movs	r3, #71	; 0x47
     3a2:	704b      	strb	r3, [r1, #1]
	atCalcCrc(packet);
     3a4:	0008      	movs	r0, r1
     3a6:	f240 23f9 	movw	r3, #761	; 0x2f9
     3aa:	f2c0 0300 	movt	r3, #0
     3ae:	4798      	blx	r3
	return ATCA_SUCCESS;
     3b0:	2000      	movs	r0, #0
}
     3b2:	bd10      	pop	{r4, pc}
		packet->txsize = VERIFY_256_EXTERNAL_COUNT;
     3b4:	2387      	movs	r3, #135	; 0x87
     3b6:	704b      	strb	r3, [r1, #1]
		break;
     3b8:	e7f4      	b.n	3a4 <atVerify+0x18>
		packet->txsize = VERIFY_256_EXTERNAL_COUNT;
     3ba:	2387      	movs	r3, #135	; 0x87
     3bc:	704b      	strb	r3, [r1, #1]
		break;
     3be:	e7f1      	b.n	3a4 <atVerify+0x18>
		packet->txsize = VERIFY_256_VALIDATE_COUNT;
     3c0:	235a      	movs	r3, #90	; 0x5a
     3c2:	704b      	strb	r3, [r1, #1]
		break;
     3c4:	e7ee      	b.n	3a4 <atVerify+0x18>
		return ATCA_BAD_PARAM;
     3c6:	20e2      	movs	r0, #226	; 0xe2
     3c8:	e7f3      	b.n	3b2 <atVerify+0x26>
     3ca:	46c0      	nop			; (mov r8, r8)
     3cc:	00003820 	.word	0x00003820

000003d0 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
     3d0:	b570      	push	{r4, r5, r6, lr}
     3d2:	b082      	sub	sp, #8
     3d4:	0005      	movs	r5, r0
	uint8_t crc[ATCA_CRC_SIZE];
	uint8_t count = response[ATCA_COUNT_IDX];
     3d6:	7804      	ldrb	r4, [r0, #0]

	count -= ATCA_CRC_SIZE;
     3d8:	3c02      	subs	r4, #2
	atCRC(count, response, crc);
     3da:	b2e4      	uxtb	r4, r4
     3dc:	ae01      	add	r6, sp, #4
     3de:	0032      	movs	r2, r6
     3e0:	0001      	movs	r1, r0
     3e2:	0020      	movs	r0, r4
     3e4:	f240 2391 	movw	r3, #657	; 0x291
     3e8:	f2c0 0300 	movt	r3, #0
     3ec:	4798      	blx	r3

	return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     3ee:	7832      	ldrb	r2, [r6, #0]
     3f0:	5d2b      	ldrb	r3, [r5, r4]
     3f2:	20e5      	movs	r0, #229	; 0xe5
     3f4:	429a      	cmp	r2, r3
     3f6:	d001      	beq.n	3fc <atCheckCrc+0x2c>
}
     3f8:	b002      	add	sp, #8
     3fa:	bd70      	pop	{r4, r5, r6, pc}
	return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     3fc:	192c      	adds	r4, r5, r4
     3fe:	ab01      	add	r3, sp, #4
     400:	785a      	ldrb	r2, [r3, #1]
     402:	7863      	ldrb	r3, [r4, #1]
     404:	429a      	cmp	r2, r3
     406:	d1f7      	bne.n	3f8 <atCheckCrc+0x28>
     408:	2000      	movs	r0, #0
     40a:	e7f5      	b.n	3f8 <atCheckCrc+0x28>

0000040c <isATCAError>:
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
	if (data[0] == 0x04) // error packets are always 4 bytes long
     40c:	7802      	ldrb	r2, [r0, #0]
		default:
			return ATCA_GEN_FAIL;
			break;
		}
	} else {
		return ATCA_SUCCESS;
     40e:	2300      	movs	r3, #0
	if (data[0] == 0x04) // error packets are always 4 bytes long
     410:	2a04      	cmp	r2, #4
     412:	d001      	beq.n	418 <isATCAError+0xc>
	}
}
     414:	0018      	movs	r0, r3
     416:	4770      	bx	lr
		switch (data[1]) {
     418:	7842      	ldrb	r2, [r0, #1]
     41a:	2a07      	cmp	r2, #7
     41c:	d020      	beq.n	460 <isATCAError+0x54>
     41e:	b2d3      	uxtb	r3, r2
     420:	2b07      	cmp	r3, #7
     422:	d80a      	bhi.n	43a <isATCAError+0x2e>
     424:	2a01      	cmp	r2, #1
     426:	d019      	beq.n	45c <isATCAError+0x50>
     428:	b1f2      	cbz	r2, 468 <isATCAError+0x5c>
			return ATCA_PARSE_ERROR;
     42a:	23d2      	movs	r3, #210	; 0xd2
		switch (data[1]) {
     42c:	2a03      	cmp	r2, #3
     42e:	d0f1      	beq.n	414 <isATCAError+0x8>
			return ATCA_STATUS_ECC;
     430:	3304      	adds	r3, #4
		switch (data[1]) {
     432:	2a05      	cmp	r2, #5
     434:	d0ee      	beq.n	414 <isATCAError+0x8>
			return ATCA_GEN_FAIL;
     436:	23e1      	movs	r3, #225	; 0xe1
     438:	e7ec      	b.n	414 <isATCAError+0x8>
		switch (data[1]) {
     43a:	2a0f      	cmp	r2, #15
     43c:	d012      	beq.n	464 <isATCAError+0x58>
     43e:	b2d3      	uxtb	r3, r2
     440:	2b0f      	cmp	r3, #15
     442:	d907      	bls.n	454 <isATCAError+0x48>
			return ATCA_WAKE_SUCCESS;
     444:	23f3      	movs	r3, #243	; 0xf3
		switch (data[1]) {
     446:	2a11      	cmp	r2, #17
     448:	d0e4      	beq.n	414 <isATCAError+0x8>
     44a:	b2d2      	uxtb	r2, r2
			return ATCA_STATUS_CRC;
     44c:	3b1f      	subs	r3, #31
		switch (data[1]) {
     44e:	2aff      	cmp	r2, #255	; 0xff
     450:	d0e0      	beq.n	414 <isATCAError+0x8>
     452:	e7f0      	b.n	436 <isATCAError+0x2a>
			return ATCA_HEALTH_TEST_ERROR;
     454:	23fa      	movs	r3, #250	; 0xfa
		switch (data[1]) {
     456:	2a08      	cmp	r2, #8
     458:	d0dc      	beq.n	414 <isATCAError+0x8>
     45a:	e7ec      	b.n	436 <isATCAError+0x2a>
			return ATCA_CHECKMAC_VERIFY_FAILED;
     45c:	23d1      	movs	r3, #209	; 0xd1
     45e:	e7d9      	b.n	414 <isATCAError+0x8>
			return ATCA_STATUS_SELFTEST_ERROR;
     460:	23d7      	movs	r3, #215	; 0xd7
     462:	e7d7      	b.n	414 <isATCAError+0x8>
			return ATCA_EXECUTION_ERROR;
     464:	23f4      	movs	r3, #244	; 0xf4
     466:	e7d5      	b.n	414 <isATCAError+0x8>
			return ATCA_SUCCESS;
     468:	2300      	movs	r3, #0
     46a:	e7d3      	b.n	414 <isATCAError+0x8>

0000046c <initATCADevice>:
 *                       mCommands and mIface members should point to existing
 *                       structures to be initialized.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
     46c:	b570      	push	{r4, r5, r6, lr}
     46e:	0005      	movs	r5, r0
     470:	000c      	movs	r4, r1
	ATCA_STATUS status;

	if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL) {
     472:	b1a0      	cbz	r0, 49e <initATCADevice+0x32>
     474:	b1a9      	cbz	r1, 4a2 <initATCADevice+0x36>
     476:	6809      	ldr	r1, [r1, #0]
     478:	b1a9      	cbz	r1, 4a6 <initATCADevice+0x3a>
		return ATCA_BAD_PARAM;
     47a:	20e2      	movs	r0, #226	; 0xe2
	if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL) {
     47c:	6863      	ldr	r3, [r4, #4]
     47e:	b17b      	cbz	r3, 4a0 <initATCADevice+0x34>
	}

	status = initATCACommand(cfg->devtype, ca_dev->mCommands);
     480:	7868      	ldrb	r0, [r5, #1]
     482:	f240 2381 	movw	r3, #641	; 0x281
     486:	f2c0 0300 	movt	r3, #0
     48a:	4798      	blx	r3
	if (status != ATCA_SUCCESS) {
     48c:	b940      	cbnz	r0, 4a0 <initATCADevice+0x34>
		return status;
	}

	status = initATCAIface(cfg, ca_dev->mIface);
     48e:	6861      	ldr	r1, [r4, #4]
     490:	0028      	movs	r0, r5
     492:	f240 7309 	movw	r3, #1801	; 0x709
     496:	f2c0 0300 	movt	r3, #0
     49a:	4798      	blx	r3
     49c:	e000      	b.n	4a0 <initATCADevice+0x34>
		return ATCA_BAD_PARAM;
     49e:	20e2      	movs	r0, #226	; 0xe2
	if (status != ATCA_SUCCESS) {
		return status;
	}

	return ATCA_SUCCESS;
}
     4a0:	bd70      	pop	{r4, r5, r6, pc}
		return ATCA_BAD_PARAM;
     4a2:	20e2      	movs	r0, #226	; 0xe2
     4a4:	e7fc      	b.n	4a0 <initATCADevice+0x34>
     4a6:	20e2      	movs	r0, #226	; 0xe2
     4a8:	e7fa      	b.n	4a0 <initATCADevice+0x34>

000004aa <releaseATCADevice>:
/** \brief Release any resources associated with the device.
 *  \param[in] ca_dev  Device to release
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCADevice(ATCADevice ca_dev)
{
     4aa:	b510      	push	{r4, lr}
     4ac:	0003      	movs	r3, r0
	if (ca_dev == NULL) {
		return ATCA_BAD_PARAM;
     4ae:	20e2      	movs	r0, #226	; 0xe2
	if (ca_dev == NULL) {
     4b0:	b12b      	cbz	r3, 4be <releaseATCADevice+0x14>
	}

	return releaseATCAIface(ca_dev->mIface);
     4b2:	6858      	ldr	r0, [r3, #4]
     4b4:	f240 638f 	movw	r3, #1679	; 0x68f
     4b8:	f2c0 0300 	movt	r3, #0
     4bc:	4798      	blx	r3
}
     4be:	bd10      	pop	{r4, pc}

000004c0 <atGetExecTime>:
 *  \param[in] opcode  Opcode value of the command
 *  \param[in] ca_cmd  Command object for which the execution times are associated
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atGetExecTime(uint8_t opcode, ATCACommand ca_cmd)
{
     4c0:	b570      	push	{r4, r5, r6, lr}
	ATCA_STATUS                    status = ATCA_SUCCESS;
	const device_execution_time_t *execution_times;
	uint8_t                        i, no_of_commands;

	switch (ca_cmd->dt) {
     4c2:	780b      	ldrb	r3, [r1, #0]
     4c4:	2b01      	cmp	r3, #1
     4c6:	d043      	beq.n	550 <atGetExecTime+0x90>
     4c8:	2b00      	cmp	r3, #0
     4ca:	d034      	beq.n	536 <atGetExecTime+0x76>
     4cc:	2b02      	cmp	r3, #2
     4ce:	d006      	beq.n	4de <atGetExecTime+0x1e>
     4d0:	2b03      	cmp	r3, #3
     4d2:	d024      	beq.n	51e <atGetExecTime+0x5e>
		no_of_commands  = 0;
		execution_times = NULL;
		break;
	}

	ca_cmd->execution_time_msec = ATCA_UNSUPPORTED_CMD;
     4d4:	2301      	movs	r3, #1
     4d6:	425b      	negs	r3, r3
     4d8:	804b      	strh	r3, [r1, #2]
			break;
		}
	}

	if (ca_cmd->execution_time_msec == ATCA_UNSUPPORTED_CMD) {
		status = ATCA_BAD_OPCODE;
     4da:	20f2      	movs	r0, #242	; 0xf2
	}

	return status;
     4dc:	e01e      	b.n	51c <atGetExecTime+0x5c>
		no_of_commands  = sizeof(device_execution_time_508) / sizeof(device_execution_time_t);
     4de:	2614      	movs	r6, #20
		execution_times = device_execution_time_508;
     4e0:	f643 1540 	movw	r5, #14656	; 0x3940
     4e4:	f2c0 0500 	movt	r5, #0
     4e8:	3540      	adds	r5, #64	; 0x40
	ca_cmd->execution_time_msec = ATCA_UNSUPPORTED_CMD;
     4ea:	2301      	movs	r3, #1
     4ec:	425b      	negs	r3, r3
     4ee:	804b      	strh	r3, [r1, #2]
		if (execution_times[i].opcode == opcode) {
     4f0:	782b      	ldrb	r3, [r5, #0]
     4f2:	4283      	cmp	r3, r0
     4f4:	d00b      	beq.n	50e <atGetExecTime+0x4e>
     4f6:	1d2a      	adds	r2, r5, #4
     4f8:	2300      	movs	r3, #0
	for (i = 0; i < no_of_commands; i++) {
     4fa:	3301      	adds	r3, #1
     4fc:	b2db      	uxtb	r3, r3
     4fe:	42b3      	cmp	r3, r6
     500:	d224      	bcs.n	54c <atGetExecTime+0x8c>
		if (execution_times[i].opcode == opcode) {
     502:	0015      	movs	r5, r2
     504:	3204      	adds	r2, #4
     506:	1f14      	subs	r4, r2, #4
     508:	7824      	ldrb	r4, [r4, #0]
     50a:	4284      	cmp	r4, r0
     50c:	d1f5      	bne.n	4fa <atGetExecTime+0x3a>
			ca_cmd->execution_time_msec = execution_times[i].execution_time_msec;
     50e:	886b      	ldrh	r3, [r5, #2]
     510:	804b      	strh	r3, [r1, #2]
	if (ca_cmd->execution_time_msec == ATCA_UNSUPPORTED_CMD) {
     512:	f64f 72ff 	movw	r2, #65535	; 0xffff
	ATCA_STATUS                    status = ATCA_SUCCESS;
     516:	2000      	movs	r0, #0
	if (ca_cmd->execution_time_msec == ATCA_UNSUPPORTED_CMD) {
     518:	4293      	cmp	r3, r2
     51a:	d015      	beq.n	548 <atGetExecTime+0x88>
}
     51c:	bd70      	pop	{r4, r5, r6, pc}
		if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M1) {
     51e:	784b      	ldrb	r3, [r1, #1]
     520:	2b28      	cmp	r3, #40	; 0x28
     522:	d01c      	beq.n	55e <atGetExecTime+0x9e>
		} else if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M2) {
     524:	2b68      	cmp	r3, #104	; 0x68
     526:	d021      	beq.n	56c <atGetExecTime+0xac>
			no_of_commands  = sizeof(device_execution_time_608_m0) / sizeof(device_execution_time_t);
     528:	2616      	movs	r6, #22
			execution_times = device_execution_time_608_m0;
     52a:	f643 0540 	movw	r5, #14400	; 0x3840
     52e:	f2c0 0500 	movt	r5, #0
     532:	3538      	adds	r5, #56	; 0x38
     534:	e7d9      	b.n	4ea <atGetExecTime+0x2a>
	ca_cmd->execution_time_msec = ATCA_UNSUPPORTED_CMD;
     536:	2301      	movs	r3, #1
     538:	425b      	negs	r3, r3
     53a:	804b      	strh	r3, [r1, #2]
		no_of_commands  = sizeof(device_execution_time_204) / sizeof(device_execution_time_t);
     53c:	260e      	movs	r6, #14
		execution_times = device_execution_time_204;
     53e:	f643 0540 	movw	r5, #14400	; 0x3840
     542:	f2c0 0500 	movt	r5, #0
     546:	e7d3      	b.n	4f0 <atGetExecTime+0x30>
		status = ATCA_BAD_OPCODE;
     548:	30f2      	adds	r0, #242	; 0xf2
     54a:	e7e7      	b.n	51c <atGetExecTime+0x5c>
     54c:	20f2      	movs	r0, #242	; 0xf2
     54e:	e7e5      	b.n	51c <atGetExecTime+0x5c>
		no_of_commands  = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
     550:	2613      	movs	r6, #19
		execution_times = device_execution_time_108;
     552:	f643 15c0 	movw	r5, #14784	; 0x39c0
     556:	f2c0 0500 	movt	r5, #0
     55a:	3510      	adds	r5, #16
     55c:	e7c5      	b.n	4ea <atGetExecTime+0x2a>
			no_of_commands  = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
     55e:	2616      	movs	r6, #22
			execution_times = device_execution_time_608_m1;
     560:	f643 05c0 	movw	r5, #14528	; 0x38c0
     564:	f2c0 0500 	movt	r5, #0
     568:	3510      	adds	r5, #16
     56a:	e7be      	b.n	4ea <atGetExecTime+0x2a>
			no_of_commands  = sizeof(device_execution_time_608_m2) / sizeof(device_execution_time_t);
     56c:	2616      	movs	r6, #22
			execution_times = device_execution_time_608_m2;
     56e:	f643 05c0 	movw	r5, #14528	; 0x38c0
     572:	f2c0 0500 	movt	r5, #0
     576:	3568      	adds	r5, #104	; 0x68
     578:	e7b7      	b.n	4ea <atGetExecTime+0x2a>

0000057a <atca_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atca_execute_command(ATCAPacket *packet, ATCADevice device)
{
     57a:	b5f0      	push	{r4, r5, r6, r7, lr}
     57c:	b083      	sub	sp, #12
     57e:	0006      	movs	r6, r0
     580:	000d      	movs	r5, r1
	uint32_t    max_delay_count;
	uint16_t    rxsize;

	do {
#ifdef ATCA_NO_POLL
		if ((status = atGetExecTime(packet->opcode, device->mCommands)) != ATCA_SUCCESS) {
     582:	7880      	ldrb	r0, [r0, #2]
     584:	6809      	ldr	r1, [r1, #0]
     586:	f240 43c1 	movw	r3, #1217	; 0x4c1
     58a:	f2c0 0300 	movt	r3, #0
     58e:	4798      	blx	r3
     590:	0004      	movs	r4, r0
     592:	b110      	cbz	r0, 59a <atca_execute_command+0x20>
		}
	} while (0);

	atidle(device->mIface);
	return status;
}
     594:	0020      	movs	r0, r4
     596:	b003      	add	sp, #12
     598:	bdf0      	pop	{r4, r5, r6, r7, pc}
		execution_or_wait_time = device->mCommands->execution_time_msec;
     59a:	682b      	ldr	r3, [r5, #0]
     59c:	885f      	ldrh	r7, [r3, #2]
		if ((status = atwake(device->mIface)) != ATCA_SUCCESS) {
     59e:	6868      	ldr	r0, [r5, #4]
     5a0:	f240 6351 	movw	r3, #1617	; 0x651
     5a4:	f2c0 0300 	movt	r3, #0
     5a8:	4798      	blx	r3
     5aa:	0004      	movs	r4, r0
     5ac:	b130      	cbz	r0, 5bc <atca_execute_command+0x42>
	atidle(device->mIface);
     5ae:	6868      	ldr	r0, [r5, #4]
     5b0:	f240 6373 	movw	r3, #1651	; 0x673
     5b4:	f2c0 0300 	movt	r3, #0
     5b8:	4798      	blx	r3
	return status;
     5ba:	e7eb      	b.n	594 <atca_execute_command+0x1a>
		if ((status = atsend(device->mIface, (uint8_t *)packet, packet->txsize)) != ATCA_SUCCESS) {
     5bc:	7872      	ldrb	r2, [r6, #1]
     5be:	0031      	movs	r1, r6
     5c0:	6868      	ldr	r0, [r5, #4]
     5c2:	f240 6341 	movw	r3, #1601	; 0x641
     5c6:	f2c0 0300 	movt	r3, #0
     5ca:	4798      	blx	r3
     5cc:	0004      	movs	r4, r0
     5ce:	2800      	cmp	r0, #0
     5d0:	d1ed      	bne.n	5ae <atca_execute_command+0x34>
		atca_delay_ms(execution_or_wait_time);
     5d2:	0038      	movs	r0, r7
     5d4:	f241 3339 	movw	r3, #4921	; 0x1339
     5d8:	f2c0 0300 	movt	r3, #0
     5dc:	4798      	blx	r3
			memset(packet->data, 0, sizeof(packet->data));
     5de:	3606      	adds	r6, #6
     5e0:	22c0      	movs	r2, #192	; 0xc0
     5e2:	2100      	movs	r1, #0
     5e4:	0030      	movs	r0, r6
     5e6:	f243 73f1 	movw	r3, #14321	; 0x37f1
     5ea:	f2c0 0300 	movt	r3, #0
     5ee:	4798      	blx	r3
			rxsize = sizeof(packet->data);
     5f0:	466b      	mov	r3, sp
     5f2:	1d9a      	adds	r2, r3, #6
     5f4:	23c0      	movs	r3, #192	; 0xc0
     5f6:	8013      	strh	r3, [r2, #0]
			if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS) {
     5f8:	0031      	movs	r1, r6
     5fa:	6868      	ldr	r0, [r5, #4]
     5fc:	f240 6349 	movw	r3, #1609	; 0x649
     600:	f2c0 0300 	movt	r3, #0
     604:	4798      	blx	r3
     606:	0004      	movs	r4, r0
		if (status != ATCA_SUCCESS) {
     608:	2800      	cmp	r0, #0
     60a:	d1d0      	bne.n	5ae <atca_execute_command+0x34>
		if (rxsize < 4) {
     60c:	466b      	mov	r3, sp
     60e:	88dc      	ldrh	r4, [r3, #6]
     610:	2c03      	cmp	r4, #3
     612:	d804      	bhi.n	61e <atca_execute_command+0xa4>
				status = ATCA_RX_NO_RESPONSE;
     614:	4260      	negs	r0, r4
     616:	4160      	adcs	r0, r4
     618:	30e6      	adds	r0, #230	; 0xe6
     61a:	0004      	movs	r4, r0
     61c:	e7c7      	b.n	5ae <atca_execute_command+0x34>
		if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS) {
     61e:	0030      	movs	r0, r6
     620:	f240 33d1 	movw	r3, #977	; 0x3d1
     624:	f2c0 0300 	movt	r3, #0
     628:	4798      	blx	r3
     62a:	0004      	movs	r4, r0
     62c:	2800      	cmp	r0, #0
     62e:	d1be      	bne.n	5ae <atca_execute_command+0x34>
		if ((status = isATCAError(packet->data)) != ATCA_SUCCESS) {
     630:	0030      	movs	r0, r6
     632:	f240 430d 	movw	r3, #1037	; 0x40d
     636:	f2c0 0300 	movt	r3, #0
     63a:	4798      	blx	r3
     63c:	0004      	movs	r4, r0
     63e:	e7b6      	b.n	5ae <atca_execute_command+0x34>

00000640 <atsend>:
 * \param[in] txdata    Data to be transmitted to the device.
 * \param[in] txlength  Number of bytes to be transmitted to the device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
     640:	b510      	push	{r4, lr}
	return ca_iface->atsend(ca_iface, txdata, txlength);
     642:	6903      	ldr	r3, [r0, #16]
     644:	4798      	blx	r3
}
     646:	bd10      	pop	{r4, pc}

00000648 <atreceive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
     648:	b510      	push	{r4, lr}
	return ca_iface->atreceive(ca_iface, rxdata, rxlength);
     64a:	6943      	ldr	r3, [r0, #20]
     64c:	4798      	blx	r3
}
     64e:	bd10      	pop	{r4, pc}

00000650 <atwake>:
 *         instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
     650:	b510      	push	{r4, lr}
     652:	0004      	movs	r4, r0
	ATCA_STATUS status = ca_iface->atwake(ca_iface);
     654:	6983      	ldr	r3, [r0, #24]
     656:	4798      	blx	r3

	if (status == ATCA_WAKE_FAILED) {
     658:	28d0      	cmp	r0, #208	; 0xd0
     65a:	d000      	beq.n	65e <atwake+0xe>

		status = ca_iface->atwake(ca_iface);
	}

	return status;
}
     65c:	bd10      	pop	{r4, pc}
		atca_delay_ms(ATCA_POST_DELAY_MSEC);
     65e:	38b7      	subs	r0, #183	; 0xb7
     660:	f241 3339 	movw	r3, #4921	; 0x1339
     664:	f2c0 0300 	movt	r3, #0
     668:	4798      	blx	r3
		status = ca_iface->atwake(ca_iface);
     66a:	69a3      	ldr	r3, [r4, #24]
     66c:	0020      	movs	r0, r4
     66e:	4798      	blx	r3
     670:	e7f4      	b.n	65c <atwake+0xc>

00000672 <atidle>:
 *         be used instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
     672:	b510      	push	{r4, lr}
	ATCA_STATUS status;

	status = ca_iface->atidle(ca_iface);
     674:	69c3      	ldr	r3, [r0, #28]
     676:	4798      	blx	r3
     678:	0004      	movs	r4, r0
	atca_delay_ms(1);
     67a:	2001      	movs	r0, #1
     67c:	f241 3339 	movw	r3, #4921	; 0x1339
     680:	f2c0 0300 	movt	r3, #0
     684:	4798      	blx	r3
	return status;
}
     686:	0020      	movs	r0, r4
     688:	bd10      	pop	{r4, pc}

0000068a <atgetifacecfg>:
 * \param[in] ca_iface  Device interface.
 * \return Logical interface configuration.
 */
ATCAIfaceCfg *atgetifacecfg(ATCAIface ca_iface)
{
	return ca_iface->mIfaceCFG;
     68a:	6840      	ldr	r0, [r0, #4]
}
     68c:	4770      	bx	lr

0000068e <releaseATCAIface>:
 *         this interface.
 *  \param[in] ca_iface  Device interface.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCAIface(ATCAIface ca_iface)
{
     68e:	b510      	push	{r4, lr}
     690:	0003      	movs	r3, r0
	if (ca_iface == NULL) {
		return ATCA_BAD_PARAM;
     692:	20e2      	movs	r0, #226	; 0xe2
	if (ca_iface == NULL) {
     694:	b133      	cbz	r3, 6a4 <releaseATCAIface+0x16>
	}

	return hal_iface_release(ca_iface->mType, ca_iface->hal_data);
     696:	6a59      	ldr	r1, [r3, #36]	; 0x24
     698:	7818      	ldrb	r0, [r3, #0]
     69a:	f640 63bb 	movw	r3, #3771	; 0xebb
     69e:	f2c0 0300 	movt	r3, #0
     6a2:	4798      	blx	r3
}
     6a4:	bd10      	pop	{r4, pc}

000006a6 <_atinit>:
	*ca_iface = NULL;
}
#endif

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
     6a6:	b570      	push	{r4, r5, r6, lr}
     6a8:	0004      	movs	r4, r0
     6aa:	000d      	movs	r5, r1
	// get method mapping to HAL methods for this interface
	hal_iface_init(ca_iface->mIfaceCFG, hal);
     6ac:	6840      	ldr	r0, [r0, #4]
     6ae:	f640 635b 	movw	r3, #3675	; 0xe5b
     6b2:	f2c0 0300 	movt	r3, #0
     6b6:	4798      	blx	r3
	ca_iface->atinit     = hal->halinit;
     6b8:	682b      	ldr	r3, [r5, #0]
     6ba:	60a3      	str	r3, [r4, #8]
	ca_iface->atpostinit = hal->halpostinit;
     6bc:	686b      	ldr	r3, [r5, #4]
     6be:	60e3      	str	r3, [r4, #12]
	ca_iface->atsend     = hal->halsend;
     6c0:	68ab      	ldr	r3, [r5, #8]
     6c2:	6123      	str	r3, [r4, #16]
	ca_iface->atreceive  = hal->halreceive;
     6c4:	68eb      	ldr	r3, [r5, #12]
     6c6:	6163      	str	r3, [r4, #20]
	ca_iface->atwake     = hal->halwake;
     6c8:	692b      	ldr	r3, [r5, #16]
     6ca:	61a3      	str	r3, [r4, #24]
	ca_iface->atsleep    = hal->halsleep;
     6cc:	69ab      	ldr	r3, [r5, #24]
     6ce:	6223      	str	r3, [r4, #32]
	ca_iface->atidle     = hal->halidle;
     6d0:	696b      	ldr	r3, [r5, #20]
     6d2:	61e3      	str	r3, [r4, #28]
	ca_iface->hal_data   = hal->hal_data;
     6d4:	6a2b      	ldr	r3, [r5, #32]
     6d6:	6263      	str	r3, [r4, #36]	; 0x24

	return ATCA_SUCCESS;
}
     6d8:	2000      	movs	r0, #0
     6da:	bd70      	pop	{r4, r5, r6, pc}

000006dc <atinit>:
{
     6dc:	b510      	push	{r4, lr}
     6de:	b08a      	sub	sp, #40	; 0x28
     6e0:	0004      	movs	r4, r0
	_atinit(ca_iface, &hal);
     6e2:	a901      	add	r1, sp, #4
     6e4:	f240 63a7 	movw	r3, #1703	; 0x6a7
     6e8:	f2c0 0300 	movt	r3, #0
     6ec:	4798      	blx	r3
	status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
     6ee:	6861      	ldr	r1, [r4, #4]
     6f0:	a801      	add	r0, sp, #4
     6f2:	68a3      	ldr	r3, [r4, #8]
     6f4:	4798      	blx	r3
	if (status == ATCA_SUCCESS) {
     6f6:	b108      	cbz	r0, 6fc <atinit+0x20>
}
     6f8:	b00a      	add	sp, #40	; 0x28
     6fa:	bd10      	pop	{r4, pc}
		ca_iface->hal_data = hal.hal_data;
     6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
     6fe:	6263      	str	r3, [r4, #36]	; 0x24
		status = ca_iface->atpostinit(ca_iface);
     700:	68e3      	ldr	r3, [r4, #12]
     702:	0020      	movs	r0, r4
     704:	4798      	blx	r3
     706:	e7f7      	b.n	6f8 <atinit+0x1c>

00000708 <initATCAIface>:
{
     708:	b510      	push	{r4, lr}
	if (cfg == NULL || ca_iface == NULL) {
     70a:	b168      	cbz	r0, 728 <initATCAIface+0x20>
		return ATCA_BAD_PARAM;
     70c:	23e2      	movs	r3, #226	; 0xe2
	if (cfg == NULL || ca_iface == NULL) {
     70e:	b149      	cbz	r1, 724 <initATCAIface+0x1c>
	ca_iface->mType     = cfg->iface_type;
     710:	7803      	ldrb	r3, [r0, #0]
     712:	700b      	strb	r3, [r1, #0]
	ca_iface->mIfaceCFG = cfg;
     714:	6048      	str	r0, [r1, #4]
	status = atinit(ca_iface);
     716:	0008      	movs	r0, r1
     718:	f240 63dd 	movw	r3, #1757	; 0x6dd
     71c:	f2c0 0300 	movt	r3, #0
     720:	4798      	blx	r3
     722:	0003      	movs	r3, r0
}
     724:	0018      	movs	r0, r3
     726:	bd10      	pop	{r4, pc}
		return ATCA_BAD_PARAM;
     728:	23e2      	movs	r3, #226	; 0xe2
     72a:	e7fb      	b.n	724 <initATCAIface+0x1c>

0000072c <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
     72c:	b510      	push	{r4, lr}
#ifdef ATCA_NO_HEAP
	ATCA_STATUS status = releaseATCADevice(_gDevice);
     72e:	f240 034c 	movw	r3, #76	; 0x4c
     732:	f2c2 0300 	movt	r3, #8192	; 0x2000
     736:	6818      	ldr	r0, [r3, #0]
     738:	f240 43ab 	movw	r3, #1195	; 0x4ab
     73c:	f2c0 0300 	movt	r3, #0
     740:	4798      	blx	r3
	if (status != ATCA_SUCCESS) {
     742:	b928      	cbnz	r0, 750 <atcab_release+0x24>
		return status;
	}
	_gDevice = NULL;
     744:	f240 034c 	movw	r3, #76	; 0x4c
     748:	f2c2 0300 	movt	r3, #8192	; 0x2000
     74c:	2200      	movs	r2, #0
     74e:	601a      	str	r2, [r3, #0]
#else
	deleteATCADevice(&_gDevice);
#endif
	return ATCA_SUCCESS;
}
     750:	bd10      	pop	{r4, pc}

00000752 <atcab_init>:
{
     752:	b510      	push	{r4, lr}
     754:	b082      	sub	sp, #8
     756:	0004      	movs	r4, r0
	if (_gDevice) {
     758:	f240 034c 	movw	r3, #76	; 0x4c
     75c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     760:	681b      	ldr	r3, [r3, #0]
     762:	b123      	cbz	r3, 76e <atcab_init+0x1c>
		atcab_release();
     764:	f240 732d 	movw	r3, #1837	; 0x72d
     768:	f2c0 0300 	movt	r3, #0
     76c:	4798      	blx	r3
	g_atcab_device.mCommands = &g_atcab_command;
     76e:	f240 1144 	movw	r1, #324	; 0x144
     772:	f2c2 0100 	movt	r1, #8192	; 0x2000
     776:	f240 1374 	movw	r3, #372	; 0x174
     77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     77e:	600b      	str	r3, [r1, #0]
	g_atcab_device.mIface    = &g_atcab_iface;
     780:	f240 134c 	movw	r3, #332	; 0x14c
     784:	f2c2 0300 	movt	r3, #8192	; 0x2000
     788:	604b      	str	r3, [r1, #4]
	status                   = initATCADevice(cfg, &g_atcab_device);
     78a:	0020      	movs	r0, r4
     78c:	f240 436d 	movw	r3, #1133	; 0x46d
     790:	f2c0 0300 	movt	r3, #0
     794:	4798      	blx	r3
	if (status != ATCA_SUCCESS) {
     796:	b958      	cbnz	r0, 7b0 <atcab_init+0x5e>
	_gDevice = &g_atcab_device;
     798:	f240 034c 	movw	r3, #76	; 0x4c
     79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     7a0:	f240 1244 	movw	r2, #324	; 0x144
     7a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
     7a8:	601a      	str	r2, [r3, #0]
	if (cfg->devtype == ATECC608A) {
     7aa:	7863      	ldrb	r3, [r4, #1]
     7ac:	2b03      	cmp	r3, #3
     7ae:	d001      	beq.n	7b4 <atcab_init+0x62>
}
     7b0:	b002      	add	sp, #8
     7b2:	bd10      	pop	{r4, pc}
		     = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1))
     7b4:	6813      	ldr	r3, [r2, #0]
     7b6:	3301      	adds	r3, #1
		if ((status
     7b8:	2201      	movs	r2, #1
     7ba:	9200      	str	r2, [sp, #0]
     7bc:	3212      	adds	r2, #18
     7be:	2100      	movs	r1, #0
     7c0:	f640 242b 	movw	r4, #2603	; 0xa2b
     7c4:	f2c0 0400 	movt	r4, #0
     7c8:	47a0      	blx	r4
     7ca:	2800      	cmp	r0, #0
     7cc:	d1f0      	bne.n	7b0 <atcab_init+0x5e>
		_gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
     7ce:	f240 034c 	movw	r3, #76	; 0x4c
     7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     7d6:	681b      	ldr	r3, [r3, #0]
     7d8:	681a      	ldr	r2, [r3, #0]
     7da:	7853      	ldrb	r3, [r2, #1]
     7dc:	2107      	movs	r1, #7
     7de:	438b      	bics	r3, r1
     7e0:	7053      	strb	r3, [r2, #1]
     7e2:	e7e5      	b.n	7b0 <atcab_init+0x5e>

000007e4 <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t *addr)
{
     7e4:	b510      	push	{r4, lr}
	ATCA_STATUS status   = ATCA_SUCCESS;
	uint8_t     mem_zone = zone & 0x03;

	if (addr == NULL) {
     7e6:	9c02      	ldr	r4, [sp, #8]
     7e8:	b144      	cbz	r4, 7fc <atcab_get_addr+0x18>
	uint8_t     mem_zone = zone & 0x03;
     7ea:	2403      	movs	r4, #3
     7ec:	4020      	ands	r0, r4
		return ATCA_BAD_PARAM;
	}
	if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP)) {
     7ee:	b138      	cbz	r0, 800 <atcab_get_addr+0x1c>
     7f0:	2802      	cmp	r0, #2
     7f2:	d00d      	beq.n	810 <atcab_get_addr+0x2c>
     7f4:	2801      	cmp	r0, #1
     7f6:	d003      	beq.n	800 <atcab_get_addr+0x1c>
		return ATCA_BAD_PARAM;
     7f8:	20e2      	movs	r0, #226	; 0xe2
     7fa:	e012      	b.n	822 <atcab_get_addr+0x3e>
		return ATCA_BAD_PARAM;
     7fc:	20e2      	movs	r0, #226	; 0xe2
     7fe:	e010      	b.n	822 <atcab_get_addr+0x3e>
		// Initialize the addr to 00
		*addr = 0;
		// Mask the offset
		offset = offset & (uint8_t)0x07;
		if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP)) {
			*addr = block << 3;
     800:	00d2      	lsls	r2, r2, #3
			*addr |= offset;
     802:	2007      	movs	r0, #7
     804:	4003      	ands	r3, r0
     806:	431a      	orrs	r2, r3
     808:	9b02      	ldr	r3, [sp, #8]
     80a:	801a      	strh	r2, [r3, #0]
			*addr |= offset;
			*addr |= block << 8;
		}
	} while (0);

	return status;
     80c:	2000      	movs	r0, #0
     80e:	e008      	b.n	822 <atcab_get_addr+0x3e>
			*addr = slot << 3;
     810:	00c9      	lsls	r1, r1, #3
			*addr |= offset;
     812:	2007      	movs	r0, #7
     814:	4003      	ands	r3, r0
     816:	430b      	orrs	r3, r1
			*addr |= block << 8;
     818:	0212      	lsls	r2, r2, #8
     81a:	431a      	orrs	r2, r3
     81c:	9b02      	ldr	r3, [sp, #8]
     81e:	801a      	strh	r2, [r3, #0]
	return status;
     820:	2000      	movs	r0, #0
}
     822:	bd10      	pop	{r4, pc}

00000824 <atcab_get_zone_size>:
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t *size)
{
	ATCA_STATUS status = ATCA_SUCCESS;

	if (size == NULL) {
     824:	b3f2      	cbz	r2, 8a4 <atcab_get_zone_size+0x80>
		return ATCA_BAD_PARAM;
	}

	if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A) {
     826:	f240 034c 	movw	r3, #76	; 0x4c
     82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     82e:	681b      	ldr	r3, [r3, #0]
     830:	685b      	ldr	r3, [r3, #4]
     832:	685b      	ldr	r3, [r3, #4]
     834:	785b      	ldrb	r3, [r3, #1]
     836:	b993      	cbnz	r3, 85e <atcab_get_zone_size+0x3a>
		switch (zone) {
     838:	2801      	cmp	r0, #1
     83a:	d008      	beq.n	84e <atcab_get_zone_size+0x2a>
     83c:	b118      	cbz	r0, 846 <atcab_get_zone_size+0x22>
     83e:	2802      	cmp	r0, #2
     840:	d009      	beq.n	856 <atcab_get_zone_size+0x32>
			break;
		case ATCA_ZONE_DATA:
			*size = 32;
			break;
		default:
			status = ATCA_BAD_PARAM;
     842:	20e2      	movs	r0, #226	; 0xe2
     844:	e02f      	b.n	8a6 <atcab_get_zone_size+0x82>
			*size = 88;
     846:	2358      	movs	r3, #88	; 0x58
     848:	6013      	str	r3, [r2, #0]
	ATCA_STATUS status = ATCA_SUCCESS;
     84a:	2000      	movs	r0, #0
			break;
     84c:	e02b      	b.n	8a6 <atcab_get_zone_size+0x82>
			*size = 64;
     84e:	2340      	movs	r3, #64	; 0x40
     850:	6013      	str	r3, [r2, #0]
	ATCA_STATUS status = ATCA_SUCCESS;
     852:	2000      	movs	r0, #0
			break;
     854:	e027      	b.n	8a6 <atcab_get_zone_size+0x82>
			*size = 32;
     856:	2320      	movs	r3, #32
     858:	6013      	str	r3, [r2, #0]
	ATCA_STATUS status = ATCA_SUCCESS;
     85a:	2000      	movs	r0, #0
			break;
     85c:	e023      	b.n	8a6 <atcab_get_zone_size+0x82>
			break;
		}
	} else {
		switch (zone) {
     85e:	2801      	cmp	r0, #1
     860:	d008      	beq.n	874 <atcab_get_zone_size+0x50>
     862:	b118      	cbz	r0, 86c <atcab_get_zone_size+0x48>
     864:	2802      	cmp	r0, #2
     866:	d009      	beq.n	87c <atcab_get_zone_size+0x58>
			} else {
				status = ATCA_BAD_PARAM;
			}
			break;
		default:
			status = ATCA_BAD_PARAM;
     868:	20e2      	movs	r0, #226	; 0xe2
     86a:	e01c      	b.n	8a6 <atcab_get_zone_size+0x82>
			*size = 128;
     86c:	2380      	movs	r3, #128	; 0x80
     86e:	6013      	str	r3, [r2, #0]
	ATCA_STATUS status = ATCA_SUCCESS;
     870:	2000      	movs	r0, #0
			break;
     872:	e018      	b.n	8a6 <atcab_get_zone_size+0x82>
			*size = 64;
     874:	2340      	movs	r3, #64	; 0x40
     876:	6013      	str	r3, [r2, #0]
	ATCA_STATUS status = ATCA_SUCCESS;
     878:	2000      	movs	r0, #0
			break;
     87a:	e014      	b.n	8a6 <atcab_get_zone_size+0x82>
			if (slot < 8) {
     87c:	2907      	cmp	r1, #7
     87e:	d908      	bls.n	892 <atcab_get_zone_size+0x6e>
			} else if (slot == 8) {
     880:	2908      	cmp	r1, #8
     882:	d00a      	beq.n	89a <atcab_get_zone_size+0x76>
				status = ATCA_BAD_PARAM;
     884:	20e2      	movs	r0, #226	; 0xe2
			} else if (slot < 16) {
     886:	290f      	cmp	r1, #15
     888:	d80d      	bhi.n	8a6 <atcab_get_zone_size+0x82>
				*size = 72;
     88a:	2348      	movs	r3, #72	; 0x48
     88c:	6013      	str	r3, [r2, #0]
	ATCA_STATUS status = ATCA_SUCCESS;
     88e:	2000      	movs	r0, #0
     890:	e009      	b.n	8a6 <atcab_get_zone_size+0x82>
				*size = 36;
     892:	2324      	movs	r3, #36	; 0x24
     894:	6013      	str	r3, [r2, #0]
	ATCA_STATUS status = ATCA_SUCCESS;
     896:	2000      	movs	r0, #0
     898:	e005      	b.n	8a6 <atcab_get_zone_size+0x82>
				*size = 416;
     89a:	f240 13a0 	movw	r3, #416	; 0x1a0
     89e:	6013      	str	r3, [r2, #0]
	ATCA_STATUS status = ATCA_SUCCESS;
     8a0:	2000      	movs	r0, #0
     8a2:	e000      	b.n	8a6 <atcab_get_zone_size+0x82>
		return ATCA_BAD_PARAM;
     8a4:	20e2      	movs	r0, #226	; 0xe2
			break;
		}
	}

	return status;
}
     8a6:	4770      	bx	lr

000008a8 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
     8a8:	b530      	push	{r4, r5, lr}
     8aa:	b0b3      	sub	sp, #204	; 0xcc
     8ac:	0005      	movs	r5, r0
	ATCAPacket  packet;
	ATCACommand ca_cmd = _gDevice->mCommands;
     8ae:	f240 034c 	movw	r3, #76	; 0x4c
     8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     8b6:	681b      	ldr	r3, [r3, #0]
     8b8:	6818      	ldr	r0, [r3, #0]
	ATCA_STATUS status = ATCA_GEN_FAIL;

	do {
		// build an random command
		packet.param1 = RANDOM_SEED_UPDATE;
     8ba:	2300      	movs	r3, #0
     8bc:	466a      	mov	r2, sp
     8be:	70d3      	strb	r3, [r2, #3]
		packet.param2 = 0x0000;
     8c0:	8093      	strh	r3, [r2, #4]

		if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS) {
     8c2:	4669      	mov	r1, sp
     8c4:	f240 3311 	movw	r3, #785	; 0x311
     8c8:	f2c0 0300 	movt	r3, #0
     8cc:	4798      	blx	r3
     8ce:	0004      	movs	r4, r0
     8d0:	b110      	cbz	r0, 8d8 <atcab_random+0x30>
			memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
		}
	} while (0);

	return status;
}
     8d2:	0020      	movs	r0, r4
     8d4:	b033      	add	sp, #204	; 0xcc
     8d6:	bd30      	pop	{r4, r5, pc}
		if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS) {
     8d8:	f240 034c 	movw	r3, #76	; 0x4c
     8dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     8e0:	6819      	ldr	r1, [r3, #0]
     8e2:	4668      	mov	r0, sp
     8e4:	f240 537b 	movw	r3, #1403	; 0x57b
     8e8:	f2c0 0300 	movt	r3, #0
     8ec:	4798      	blx	r3
     8ee:	0004      	movs	r4, r0
     8f0:	2800      	cmp	r0, #0
     8f2:	d1ee      	bne.n	8d2 <atcab_random+0x2a>
		if (packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE) {
     8f4:	466b      	mov	r3, sp
     8f6:	799b      	ldrb	r3, [r3, #6]
     8f8:	2b23      	cmp	r3, #35	; 0x23
     8fa:	d001      	beq.n	900 <atcab_random+0x58>
			status = ATCA_RX_FAIL;
     8fc:	24e6      	movs	r4, #230	; 0xe6
     8fe:	e7e8      	b.n	8d2 <atcab_random+0x2a>
		if (rand_out) {
     900:	2d00      	cmp	r5, #0
     902:	d0e6      	beq.n	8d2 <atcab_random+0x2a>
			memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
     904:	2220      	movs	r2, #32
     906:	466b      	mov	r3, sp
     908:	1dd9      	adds	r1, r3, #7
     90a:	0028      	movs	r0, r5
     90c:	f243 73df 	movw	r3, #14303	; 0x37df
     910:	f2c0 0300 	movt	r3, #0
     914:	4798      	blx	r3
     916:	e7dc      	b.n	8d2 <atcab_random+0x2a>

00000918 <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
     918:	b5f0      	push	{r4, r5, r6, r7, lr}
     91a:	b0b9      	sub	sp, #228	; 0xe4
     91c:	9003      	str	r0, [sp, #12]
     91e:	a83e      	add	r0, sp, #248	; 0xf8
     920:	c840      	ldmia	r0!, {r6}
     922:	7807      	ldrb	r7, [r0, #0]
	ATCA_STATUS status = ATCA_GEN_FAIL;
	uint16_t    addr;

	do {
		// Check the input parameters
		if (data == NULL) {
     924:	b16e      	cbz	r6, 942 <atcab_read_zone+0x2a>
	ATCACommand ca_cmd = _gDevice->mCommands;
     926:	f240 004c 	movw	r0, #76	; 0x4c
     92a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     92e:	6800      	ldr	r0, [r0, #0]
     930:	6805      	ldr	r5, [r0, #0]
			return ATCA_BAD_PARAM;
		}

		if (len != 4 && len != 32) {
     932:	2f04      	cmp	r7, #4
     934:	d01a      	beq.n	96c <atcab_read_zone+0x54>
			return ATCA_BAD_PARAM;
     936:	24e2      	movs	r4, #226	; 0xe2
		if (len != 4 && len != 32) {
     938:	2f20      	cmp	r7, #32
     93a:	d004      	beq.n	946 <atcab_read_zone+0x2e>

		memcpy(data, &packet.data[1], len);
	} while (0);

	return status;
}
     93c:	0020      	movs	r0, r4
     93e:	b039      	add	sp, #228	; 0xe4
     940:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ATCA_BAD_PARAM;
     942:	24e2      	movs	r4, #226	; 0xe2
     944:	e7fa      	b.n	93c <atcab_read_zone+0x24>
		if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS) {
     946:	200e      	movs	r0, #14
     948:	ac02      	add	r4, sp, #8
     94a:	46a4      	mov	ip, r4
     94c:	4460      	add	r0, ip
     94e:	9000      	str	r0, [sp, #0]
     950:	9803      	ldr	r0, [sp, #12]
     952:	f240 74e5 	movw	r4, #2021	; 0x7e5
     956:	f2c0 0400 	movt	r4, #0
     95a:	47a0      	blx	r4
     95c:	0004      	movs	r4, r0
     95e:	2800      	cmp	r0, #0
     960:	d1ec      	bne.n	93c <atcab_read_zone+0x24>
			zone = zone | ATCA_ZONE_READWRITE_32;
     962:	2380      	movs	r3, #128	; 0x80
     964:	9a03      	ldr	r2, [sp, #12]
     966:	431a      	orrs	r2, r3
     968:	9203      	str	r2, [sp, #12]
     96a:	e00d      	b.n	988 <atcab_read_zone+0x70>
		if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS) {
     96c:	200e      	movs	r0, #14
     96e:	ac02      	add	r4, sp, #8
     970:	46a4      	mov	ip, r4
     972:	4460      	add	r0, ip
     974:	9000      	str	r0, [sp, #0]
     976:	9803      	ldr	r0, [sp, #12]
     978:	f240 74e5 	movw	r4, #2021	; 0x7e5
     97c:	f2c0 0400 	movt	r4, #0
     980:	47a0      	blx	r4
     982:	0004      	movs	r4, r0
     984:	2800      	cmp	r0, #0
     986:	d1d9      	bne.n	93c <atcab_read_zone+0x24>
		packet.param1 = zone;
     988:	a906      	add	r1, sp, #24
     98a:	466b      	mov	r3, sp
     98c:	7b1b      	ldrb	r3, [r3, #12]
     98e:	70cb      	strb	r3, [r1, #3]
		packet.param2 = addr;
     990:	230e      	movs	r3, #14
     992:	aa02      	add	r2, sp, #8
     994:	4694      	mov	ip, r2
     996:	4463      	add	r3, ip
     998:	881b      	ldrh	r3, [r3, #0]
     99a:	808b      	strh	r3, [r1, #4]
		if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS) {
     99c:	0028      	movs	r0, r5
     99e:	f240 332b 	movw	r3, #811	; 0x32b
     9a2:	f2c0 0300 	movt	r3, #0
     9a6:	4798      	blx	r3
     9a8:	0004      	movs	r4, r0
     9aa:	2800      	cmp	r0, #0
     9ac:	d1c6      	bne.n	93c <atcab_read_zone+0x24>
		if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS) {
     9ae:	f240 034c 	movw	r3, #76	; 0x4c
     9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9b6:	6819      	ldr	r1, [r3, #0]
     9b8:	a806      	add	r0, sp, #24
     9ba:	f240 537b 	movw	r3, #1403	; 0x57b
     9be:	f2c0 0300 	movt	r3, #0
     9c2:	4798      	blx	r3
     9c4:	0004      	movs	r4, r0
     9c6:	2800      	cmp	r0, #0
     9c8:	d1b8      	bne.n	93c <atcab_read_zone+0x24>
		memcpy(data, &packet.data[1], len);
     9ca:	003a      	movs	r2, r7
     9cc:	2117      	movs	r1, #23
     9ce:	ab02      	add	r3, sp, #8
     9d0:	469c      	mov	ip, r3
     9d2:	4461      	add	r1, ip
     9d4:	0030      	movs	r0, r6
     9d6:	f243 73df 	movw	r3, #14303	; 0x37df
     9da:	f2c0 0300 	movt	r3, #0
     9de:	4798      	blx	r3
     9e0:	e7ac      	b.n	93c <atcab_read_zone+0x24>

000009e2 <atcab_read_serial_number>:
 *  \param[out] serial_number  9 byte serial number is returned here.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_serial_number(uint8_t *serial_number)
{
     9e2:	b570      	push	{r4, r5, r6, lr}
     9e4:	b08a      	sub	sp, #40	; 0x28
     9e6:	0005      	movs	r5, r0
	ATCA_STATUS status = ATCA_GEN_FAIL;
	uint8_t     read_buf[ATCA_BLOCK_SIZE];

	if (!serial_number) {
		return ATCA_BAD_PARAM;
     9e8:	24e2      	movs	r4, #226	; 0xe2
	if (!serial_number) {
     9ea:	b170      	cbz	r0, a0a <atcab_read_serial_number+0x28>
	}

	do {
		if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS) {
     9ec:	2320      	movs	r3, #32
     9ee:	9301      	str	r3, [sp, #4]
     9f0:	ab02      	add	r3, sp, #8
     9f2:	9300      	str	r3, [sp, #0]
     9f4:	2300      	movs	r3, #0
     9f6:	2200      	movs	r2, #0
     9f8:	2100      	movs	r1, #0
     9fa:	2000      	movs	r0, #0
     9fc:	f640 1419 	movw	r4, #2329	; 0x919
     a00:	f2c0 0400 	movt	r4, #0
     a04:	47a0      	blx	r4
     a06:	0004      	movs	r4, r0
     a08:	b110      	cbz	r0, a10 <atcab_read_serial_number+0x2e>
		memcpy(&serial_number[0], &read_buf[0], 4);
		memcpy(&serial_number[4], &read_buf[8], 5);
	} while (0);

	return status;
}
     a0a:	0020      	movs	r0, r4
     a0c:	b00a      	add	sp, #40	; 0x28
     a0e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&serial_number[0], &read_buf[0], 4);
     a10:	2204      	movs	r2, #4
     a12:	a902      	add	r1, sp, #8
     a14:	0028      	movs	r0, r5
     a16:	f243 76df 	movw	r6, #14303	; 0x37df
     a1a:	f2c0 0600 	movt	r6, #0
     a1e:	47b0      	blx	r6
		memcpy(&serial_number[4], &read_buf[8], 5);
     a20:	1d28      	adds	r0, r5, #4
     a22:	2205      	movs	r2, #5
     a24:	a904      	add	r1, sp, #16
     a26:	47b0      	blx	r6
     a28:	e7ef      	b.n	a0a <atcab_read_serial_number+0x28>

00000a2a <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
     a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2c:	46de      	mov	lr, fp
     a2e:	4657      	mov	r7, sl
     a30:	464e      	mov	r6, r9
     a32:	4645      	mov	r5, r8
     a34:	b5e0      	push	{r5, r6, r7, lr}
     a36:	b091      	sub	sp, #68	; 0x44
     a38:	0005      	movs	r5, r0
     a3a:	9102      	str	r1, [sp, #8]
     a3c:	0017      	movs	r7, r2
     a3e:	9303      	str	r3, [sp, #12]
	ATCA_STATUS status    = ATCA_GEN_FAIL;
	size_t      zone_size = 0;
     a40:	2300      	movs	r3, #0
     a42:	930f      	str	r3, [sp, #60]	; 0x3c
	size_t      read_buf_idx = 0;
	size_t      copy_length  = 0;
	size_t      read_offset  = 0;

	if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA) {
		return ATCA_BAD_PARAM;
     a44:	24e2      	movs	r4, #226	; 0xe2
	if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA) {
     a46:	2802      	cmp	r0, #2
     a48:	d907      	bls.n	a5a <atcab_read_bytes_zone+0x30>
			break;
		}
	} while (false);

	return status;
}
     a4a:	0020      	movs	r0, r4
     a4c:	b011      	add	sp, #68	; 0x44
     a4e:	bc3c      	pop	{r2, r3, r4, r5}
     a50:	4690      	mov	r8, r2
     a52:	4699      	mov	r9, r3
     a54:	46a2      	mov	sl, r4
     a56:	46ab      	mov	fp, r5
     a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (zone == ATCA_ZONE_DATA && slot > 15) {
     a5a:	2802      	cmp	r0, #2
     a5c:	d024      	beq.n	aa8 <atcab_read_bytes_zone+0x7e>
		return ATCA_SUCCESS; // Always succeed reading 0 bytes
     a5e:	2400      	movs	r4, #0
	if (length == 0) {
     a60:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     a62:	2b00      	cmp	r3, #0
     a64:	d0f1      	beq.n	a4a <atcab_read_bytes_zone+0x20>
		return ATCA_BAD_PARAM;
     a66:	34e2      	adds	r4, #226	; 0xe2
	if (data == NULL) {
     a68:	9b03      	ldr	r3, [sp, #12]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d0ed      	beq.n	a4a <atcab_read_bytes_zone+0x20>
		status = atcab_get_zone_size(zone, slot, &zone_size);
     a6e:	aa0f      	add	r2, sp, #60	; 0x3c
     a70:	9902      	ldr	r1, [sp, #8]
     a72:	0028      	movs	r0, r5
     a74:	f640 0325 	movw	r3, #2085	; 0x825
     a78:	f2c0 0300 	movt	r3, #0
     a7c:	4798      	blx	r3
     a7e:	0004      	movs	r4, r0
		if (status != ATCA_SUCCESS) {
     a80:	2800      	cmp	r0, #0
     a82:	d1e2      	bne.n	a4a <atcab_read_bytes_zone+0x20>
		if (offset + length > zone_size) {
     a84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     a86:	19db      	adds	r3, r3, r7
			return ATCA_BAD_PARAM; // Can't read past the end of a zone
     a88:	34e2      	adds	r4, #226	; 0xe2
		if (offset + length > zone_size) {
     a8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     a8c:	4293      	cmp	r3, r2
     a8e:	d8dc      	bhi.n	a4a <atcab_read_bytes_zone+0x20>
		cur_block = offset / ATCA_BLOCK_SIZE;
     a90:	097b      	lsrs	r3, r7, #5
     a92:	4698      	mov	r8, r3
     a94:	f240 0a20 	movw	sl, #32
     a98:	f240 0b00 	movw	fp, #0
     a9c:	2600      	movs	r6, #0
			status = atcab_read_zone(zone, slot, (uint8_t)cur_block, (uint8_t)cur_offset, read_buf, read_size);
     a9e:	465c      	mov	r4, fp
     aa0:	46ab      	mov	fp, r5
     aa2:	9705      	str	r7, [sp, #20]
     aa4:	4657      	mov	r7, sl
     aa6:	e021      	b.n	aec <atcab_read_bytes_zone+0xc2>
	if (zone == ATCA_ZONE_DATA && slot > 15) {
     aa8:	290f      	cmp	r1, #15
     aaa:	d8ce      	bhi.n	a4a <atcab_read_bytes_zone+0x20>
     aac:	e7d7      	b.n	a5e <atcab_read_bytes_zone+0x34>
			if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE) {
     aae:	4643      	mov	r3, r8
     ab0:	015b      	lsls	r3, r3, #5
     ab2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     ab4:	1ad3      	subs	r3, r2, r3
     ab6:	2b1f      	cmp	r3, #31
     ab8:	d81a      	bhi.n	af0 <atcab_read_bytes_zone+0xc6>
				cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
     aba:	9b05      	ldr	r3, [sp, #20]
     abc:	199b      	adds	r3, r3, r6
     abe:	089b      	lsrs	r3, r3, #2
     ac0:	2407      	movs	r4, #7
     ac2:	401c      	ands	r4, r3
				read_size  = ATCA_WORD_SIZE;
     ac4:	3f1c      	subs	r7, #28
     ac6:	e013      	b.n	af0 <atcab_read_bytes_zone+0xc6>
			memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
     ac8:	9b03      	ldr	r3, [sp, #12]
     aca:	1998      	adds	r0, r3, r6
     acc:	ab07      	add	r3, sp, #28
     ace:	469c      	mov	ip, r3
     ad0:	4461      	add	r1, ip
     ad2:	002a      	movs	r2, r5
     ad4:	f243 73df 	movw	r3, #14303	; 0x37df
     ad8:	f2c0 0300 	movt	r3, #0
     adc:	4798      	blx	r3
			data_idx += copy_length;
     ade:	1976      	adds	r6, r6, r5
			if (read_size == ATCA_BLOCK_SIZE) {
     ae0:	2f20      	cmp	r7, #32
     ae2:	d026      	beq.n	b32 <atcab_read_bytes_zone+0x108>
				cur_offset += 1;
     ae4:	3401      	adds	r4, #1
		while (data_idx < length) {
     ae6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     ae8:	42b3      	cmp	r3, r6
     aea:	d926      	bls.n	b3a <atcab_read_bytes_zone+0x110>
			if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE) {
     aec:	2f20      	cmp	r7, #32
     aee:	d0de      	beq.n	aae <atcab_read_bytes_zone+0x84>
			status = atcab_read_zone(zone, slot, (uint8_t)cur_block, (uint8_t)cur_offset, read_buf, read_size);
     af0:	b2e3      	uxtb	r3, r4
     af2:	4642      	mov	r2, r8
     af4:	4669      	mov	r1, sp
     af6:	74ca      	strb	r2, [r1, #19]
     af8:	7cca      	ldrb	r2, [r1, #19]
     afa:	9701      	str	r7, [sp, #4]
     afc:	a907      	add	r1, sp, #28
     afe:	9100      	str	r1, [sp, #0]
     b00:	9902      	ldr	r1, [sp, #8]
     b02:	4658      	mov	r0, fp
     b04:	f640 1519 	movw	r5, #2329	; 0x919
     b08:	f2c0 0500 	movt	r5, #0
     b0c:	47a8      	blx	r5
     b0e:	4681      	mov	r9, r0
			if (status != ATCA_SUCCESS) {
     b10:	b9a8      	cbnz	r0, b3e <atcab_read_bytes_zone+0x114>
			read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
     b12:	4643      	mov	r3, r8
     b14:	00db      	lsls	r3, r3, #3
     b16:	191b      	adds	r3, r3, r4
     b18:	009b      	lsls	r3, r3, #2
				read_buf_idx = 0; // Read data is within the requested chunk
     b1a:	2100      	movs	r1, #0
			if (read_offset < offset) {
     b1c:	9805      	ldr	r0, [sp, #20]
     b1e:	4298      	cmp	r0, r3
     b20:	d900      	bls.n	b24 <atcab_read_bytes_zone+0xfa>
				read_buf_idx = offset - read_offset; // Read data starts before the requested chunk
     b22:	1ac1      	subs	r1, r0, r3
			if (length - data_idx < read_size - read_buf_idx) {
     b24:	1a7b      	subs	r3, r7, r1
     b26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
     b28:	1b95      	subs	r5, r2, r6
     b2a:	429d      	cmp	r5, r3
     b2c:	d9cc      	bls.n	ac8 <atcab_read_bytes_zone+0x9e>
     b2e:	001d      	movs	r5, r3
     b30:	e7ca      	b.n	ac8 <atcab_read_bytes_zone+0x9e>
				cur_block += 1;
     b32:	f240 0c01 	movw	ip, #1
     b36:	44e0      	add	r8, ip
     b38:	e7d5      	b.n	ae6 <atcab_read_bytes_zone+0xbc>
     b3a:	464c      	mov	r4, r9
     b3c:	e785      	b.n	a4a <atcab_read_bytes_zone+0x20>
     b3e:	0004      	movs	r4, r0
     b40:	e783      	b.n	a4a <atcab_read_bytes_zone+0x20>

00000b42 <atcab_sha_base>:
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sha_base(uint8_t mode, uint16_t length, const uint8_t *message, uint8_t *data_out,
                           uint16_t *data_out_size)
{
     b42:	b5f0      	push	{r4, r5, r6, r7, lr}
     b44:	b0b3      	sub	sp, #204	; 0xcc
     b46:	000c      	movs	r4, r1
     b48:	0011      	movs	r1, r2
     b4a:	001e      	movs	r6, r3
	ATCAPacket  packet;
	ATCACommand ca_cmd   = _gDevice->mCommands;
     b4c:	f240 034c 	movw	r3, #76	; 0x4c
     b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b54:	681b      	ldr	r3, [r3, #0]
     b56:	681f      	ldr	r7, [r3, #0]
	ATCA_STATUS status   = ATCA_GEN_FAIL;
	uint8_t     cmd_mode = (mode & SHA_MODE_MASK);
     b58:	2307      	movs	r3, #7
     b5a:	4003      	ands	r3, r0

	if (cmd_mode != SHA_MODE_SHA256_PUBLIC && cmd_mode != SHA_MODE_HMAC_START && length > 0 && message == NULL) {
     b5c:	3b03      	subs	r3, #3
     b5e:	2b01      	cmp	r3, #1
     b60:	d94c      	bls.n	bfc <atcab_sha_base+0xba>
     b62:	b10c      	cbz	r4, b68 <atcab_sha_base+0x26>
     b64:	2a00      	cmp	r2, #0
     b66:	d043      	beq.n	bf0 <atcab_sha_base+0xae>
		return ATCA_BAD_PARAM; // message data indicated, but nothing provided
	}
	if (data_out != NULL && data_out_size == NULL) {
     b68:	2e00      	cmp	r6, #0
     b6a:	d043      	beq.n	bf4 <atcab_sha_base+0xb2>
		return ATCA_BAD_PARAM;
     b6c:	25e2      	movs	r5, #226	; 0xe2
	if (data_out != NULL && data_out_size == NULL) {
     b6e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
     b70:	b1a3      	cbz	r3, b9c <atcab_sha_base+0x5a>
	}

	do {
		// Build Command
		packet.param1 = mode;
     b72:	466b      	mov	r3, sp
     b74:	70d8      	strb	r0, [r3, #3]
		packet.param2 = length;
     b76:	809c      	strh	r4, [r3, #4]

		if (cmd_mode != SHA_MODE_SHA256_PUBLIC && cmd_mode != SHA_MODE_HMAC_START) {
			memcpy(packet.data, message, length);
     b78:	0022      	movs	r2, r4
     b7a:	466b      	mov	r3, sp
     b7c:	1d98      	adds	r0, r3, #6
     b7e:	f243 73df 	movw	r3, #14303	; 0x37df
     b82:	f2c0 0300 	movt	r3, #0
     b86:	4798      	blx	r3
		}

		if ((status = atSHA(ca_cmd, &packet, length)) != ATCA_SUCCESS) {
     b88:	0022      	movs	r2, r4
     b8a:	4669      	mov	r1, sp
     b8c:	0038      	movs	r0, r7
     b8e:	f240 3345 	movw	r3, #837	; 0x345
     b92:	f2c0 0300 	movt	r3, #0
     b96:	4798      	blx	r3
     b98:	0005      	movs	r5, r0
     b9a:	b110      	cbz	r0, ba2 <atcab_sha_base+0x60>
			memcpy(data_out, &packet.data[ATCA_RSP_DATA_IDX], *data_out_size);
		}
	} while (0);

	return status;
}
     b9c:	0028      	movs	r0, r5
     b9e:	b033      	add	sp, #204	; 0xcc
     ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS) {
     ba2:	f240 034c 	movw	r3, #76	; 0x4c
     ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     baa:	6819      	ldr	r1, [r3, #0]
     bac:	4668      	mov	r0, sp
     bae:	f240 537b 	movw	r3, #1403	; 0x57b
     bb2:	f2c0 0300 	movt	r3, #0
     bb6:	4798      	blx	r3
     bb8:	0005      	movs	r5, r0
     bba:	2800      	cmp	r0, #0
     bbc:	d1ee      	bne.n	b9c <atcab_sha_base+0x5a>
		if ((data_out != NULL) && (packet.data[ATCA_COUNT_IDX] > 4)) {
     bbe:	2e00      	cmp	r6, #0
     bc0:	d0ec      	beq.n	b9c <atcab_sha_base+0x5a>
     bc2:	466b      	mov	r3, sp
     bc4:	799a      	ldrb	r2, [r3, #6]
     bc6:	2a04      	cmp	r2, #4
     bc8:	d9e8      	bls.n	b9c <atcab_sha_base+0x5a>
			if (packet.data[ATCA_COUNT_IDX] - ATCA_PACKET_OVERHEAD > *data_out_size) {
     bca:	1ed3      	subs	r3, r2, #3
     bcc:	9938      	ldr	r1, [sp, #224]	; 0xe0
     bce:	8809      	ldrh	r1, [r1, #0]
     bd0:	428b      	cmp	r3, r1
     bd2:	dd01      	ble.n	bd8 <atcab_sha_base+0x96>
				status = ATCA_SMALL_BUFFER;
     bd4:	25ed      	movs	r5, #237	; 0xed
     bd6:	e7e1      	b.n	b9c <atcab_sha_base+0x5a>
			*data_out_size = packet.data[ATCA_COUNT_IDX] - ATCA_PACKET_OVERHEAD;
     bd8:	b29a      	uxth	r2, r3
     bda:	9b38      	ldr	r3, [sp, #224]	; 0xe0
     bdc:	801a      	strh	r2, [r3, #0]
			memcpy(data_out, &packet.data[ATCA_RSP_DATA_IDX], *data_out_size);
     bde:	466b      	mov	r3, sp
     be0:	1dd9      	adds	r1, r3, #7
     be2:	0030      	movs	r0, r6
     be4:	f243 73df 	movw	r3, #14303	; 0x37df
     be8:	f2c0 0300 	movt	r3, #0
     bec:	4798      	blx	r3
     bee:	e7d5      	b.n	b9c <atcab_sha_base+0x5a>
		return ATCA_BAD_PARAM; // message data indicated, but nothing provided
     bf0:	25e2      	movs	r5, #226	; 0xe2
     bf2:	e7d3      	b.n	b9c <atcab_sha_base+0x5a>
		packet.param1 = mode;
     bf4:	466b      	mov	r3, sp
     bf6:	70d8      	strb	r0, [r3, #3]
		packet.param2 = length;
     bf8:	809c      	strh	r4, [r3, #4]
     bfa:	e7bd      	b.n	b78 <atcab_sha_base+0x36>
	if (data_out != NULL && data_out_size == NULL) {
     bfc:	b91e      	cbnz	r6, c06 <atcab_sha_base+0xc4>
		packet.param1 = mode;
     bfe:	466b      	mov	r3, sp
     c00:	70d8      	strb	r0, [r3, #3]
		packet.param2 = length;
     c02:	809c      	strh	r4, [r3, #4]
     c04:	e7c0      	b.n	b88 <atcab_sha_base+0x46>
		return ATCA_BAD_PARAM;
     c06:	25e2      	movs	r5, #226	; 0xe2
	if (data_out != NULL && data_out_size == NULL) {
     c08:	9b38      	ldr	r3, [sp, #224]	; 0xe0
     c0a:	2b00      	cmp	r3, #0
     c0c:	d0c6      	beq.n	b9c <atcab_sha_base+0x5a>
		packet.param1 = mode;
     c0e:	466b      	mov	r3, sp
     c10:	70d8      	strb	r0, [r3, #3]
		packet.param2 = length;
     c12:	809c      	strh	r4, [r3, #4]
     c14:	e7b8      	b.n	b88 <atcab_sha_base+0x46>

00000c16 <atcab_sha_start>:

/** \brief Executes SHA command to initialize SHA-256 calculation engine
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sha_start(void)
{
     c16:	b510      	push	{r4, lr}
     c18:	b082      	sub	sp, #8
	return atcab_sha_base(SHA_MODE_SHA256_START, 0, NULL, NULL, NULL);
     c1a:	2300      	movs	r3, #0
     c1c:	9300      	str	r3, [sp, #0]
     c1e:	2200      	movs	r2, #0
     c20:	2100      	movs	r1, #0
     c22:	2000      	movs	r0, #0
     c24:	f640 3443 	movw	r4, #2883	; 0xb43
     c28:	f2c0 0400 	movt	r4, #0
     c2c:	47a0      	blx	r4
}
     c2e:	b002      	add	sp, #8
     c30:	bd10      	pop	{r4, pc}

00000c32 <atcab_sha_update>:
 * \param[in] message  64 bytes of message data to add to add to operation.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sha_update(const uint8_t *message)
{
     c32:	b510      	push	{r4, lr}
     c34:	b082      	sub	sp, #8
     c36:	0002      	movs	r2, r0
	return atcab_sha_base(SHA_MODE_SHA256_UPDATE, 64, message, NULL, NULL);
     c38:	2300      	movs	r3, #0
     c3a:	9300      	str	r3, [sp, #0]
     c3c:	2140      	movs	r1, #64	; 0x40
     c3e:	2001      	movs	r0, #1
     c40:	f640 3443 	movw	r4, #2883	; 0xb43
     c44:	f2c0 0400 	movt	r4, #0
     c48:	47a0      	blx	r4
}
     c4a:	b002      	add	sp, #8
     c4c:	bd10      	pop	{r4, pc}

00000c4e <atcab_sha_end>:
 *  \param[in]  message  Remaining data to include in hash. NULL if length is 0.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sha_end(uint8_t *digest, uint16_t length, const uint8_t *message)
{
     c4e:	b510      	push	{r4, lr}
     c50:	b084      	sub	sp, #16
     c52:	0003      	movs	r3, r0
	uint16_t digest_size = 32;
     c54:	240e      	movs	r4, #14
     c56:	446c      	add	r4, sp
     c58:	2020      	movs	r0, #32
     c5a:	8020      	strh	r0, [r4, #0]

	return atcab_sha_base(SHA_MODE_SHA256_END, length, message, digest, &digest_size);
     c5c:	9400      	str	r4, [sp, #0]
     c5e:	381e      	subs	r0, #30
     c60:	f640 3443 	movw	r4, #2883	; 0xb43
     c64:	f2c0 0400 	movt	r4, #0
     c68:	47a0      	blx	r4
}
     c6a:	b004      	add	sp, #16
     c6c:	bd10      	pop	{r4, pc}

00000c6e <atcab_hw_sha2_256_init>:
 * \param[in] ctx  SHA256 context
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_hw_sha2_256_init(atca_sha256_ctx_t *ctx)
{
     c6e:	b510      	push	{r4, lr}
	memset(ctx, 0, sizeof(*ctx));
     c70:	2288      	movs	r2, #136	; 0x88
     c72:	2100      	movs	r1, #0
     c74:	f243 73f1 	movw	r3, #14321	; 0x37f1
     c78:	f2c0 0300 	movt	r3, #0
     c7c:	4798      	blx	r3
	return atcab_sha_start();
     c7e:	f640 4317 	movw	r3, #3095	; 0xc17
     c82:	f2c0 0300 	movt	r3, #0
     c86:	4798      	blx	r3
}
     c88:	bd10      	pop	{r4, pc}

00000c8a <atcab_hw_sha2_256_update>:
 * \param[in] data_size  Size of data in bytes.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_hw_sha2_256_update(atca_sha256_ctx_t *ctx, const uint8_t *data, size_t data_size)
{
     c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
     c8c:	46de      	mov	lr, fp
     c8e:	4657      	mov	r7, sl
     c90:	464e      	mov	r6, r9
     c92:	4645      	mov	r5, r8
     c94:	b5e0      	push	{r5, r6, r7, lr}
     c96:	b083      	sub	sp, #12
     c98:	0007      	movs	r7, r0
     c9a:	9100      	str	r1, [sp, #0]
     c9c:	0014      	movs	r4, r2
	ATCA_STATUS status = ATCA_SUCCESS;
	uint32_t    block_count;
	uint32_t    rem_size  = ATCA_SHA256_BLOCK_SIZE - ctx->block_size;
     c9e:	6840      	ldr	r0, [r0, #4]
     ca0:	2640      	movs	r6, #64	; 0x40
     ca2:	1a36      	subs	r6, r6, r0
	uint32_t    copy_size = data_size > rem_size ? rem_size : (uint32_t)data_size;
     ca4:	4296      	cmp	r6, r2
     ca6:	d900      	bls.n	caa <atcab_hw_sha2_256_update+0x20>
     ca8:	0016      	movs	r6, r2
	uint32_t    i         = 0;

	// Copy data into current block
	memcpy(&ctx->block[ctx->block_size], data, copy_size);
     caa:	3008      	adds	r0, #8
     cac:	1838      	adds	r0, r7, r0
     cae:	0032      	movs	r2, r6
     cb0:	9900      	ldr	r1, [sp, #0]
     cb2:	f243 73df 	movw	r3, #14303	; 0x37df
     cb6:	f2c0 0300 	movt	r3, #0
     cba:	4798      	blx	r3

	if (ctx->block_size + data_size < ATCA_SHA256_BLOCK_SIZE) {
     cbc:	687b      	ldr	r3, [r7, #4]
     cbe:	18e3      	adds	r3, r4, r3
     cc0:	2b3f      	cmp	r3, #63	; 0x3f
     cc2:	d80a      	bhi.n	cda <atcab_hw_sha2_256_update+0x50>
		// Not enough data to finish off the current block
		ctx->block_size += (uint32_t)data_size;
     cc4:	607b      	str	r3, [r7, #4]
		return ATCA_SUCCESS;
     cc6:	2300      	movs	r3, #0
     cc8:	9301      	str	r3, [sp, #4]
	ctx->total_msg_size += (block_count + 1) * ATCA_SHA256_BLOCK_SIZE;
	ctx->block_size = data_size % ATCA_SHA256_BLOCK_SIZE;
	memcpy(ctx->block, &data[copy_size + block_count * ATCA_SHA256_BLOCK_SIZE], ctx->block_size);

	return ATCA_SUCCESS;
}
     cca:	9801      	ldr	r0, [sp, #4]
     ccc:	b003      	add	sp, #12
     cce:	bc3c      	pop	{r2, r3, r4, r5}
     cd0:	4690      	mov	r8, r2
     cd2:	4699      	mov	r9, r3
     cd4:	46a2      	mov	sl, r4
     cd6:	46ab      	mov	fp, r5
     cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = atcab_sha_update(ctx->block);
     cda:	f240 0808 	movw	r8, #8
     cde:	44b8      	add	r8, r7
     ce0:	4640      	mov	r0, r8
     ce2:	f640 4333 	movw	r3, #3123	; 0xc33
     ce6:	f2c0 0300 	movt	r3, #0
     cea:	4798      	blx	r3
     cec:	9001      	str	r0, [sp, #4]
	if (status != ATCA_SUCCESS) {
     cee:	2800      	cmp	r0, #0
     cf0:	d1eb      	bne.n	cca <atcab_hw_sha2_256_update+0x40>
	data_size -= copy_size; // Adjust to the remaining message bytes
     cf2:	1ba3      	subs	r3, r4, r6
     cf4:	469a      	mov	sl, r3
	block_count = (uint32_t)(data_size / ATCA_SHA256_BLOCK_SIZE);
     cf6:	099b      	lsrs	r3, r3, #6
     cf8:	4699      	mov	r9, r3
	for (i = 0; i < block_count; i++) {
     cfa:	b16b      	cbz	r3, d18 <atcab_hw_sha2_256_update+0x8e>
     cfc:	9b00      	ldr	r3, [sp, #0]
     cfe:	199c      	adds	r4, r3, r6
     d00:	2500      	movs	r5, #0
		status = atcab_sha_update(&data[copy_size + i * ATCA_SHA256_BLOCK_SIZE]);
     d02:	f640 4b33 	movw	fp, #3123	; 0xc33
     d06:	f2c0 0b00 	movt	fp, #0
     d0a:	0020      	movs	r0, r4
     d0c:	47d8      	blx	fp
		if (status != ATCA_SUCCESS) {
     d0e:	b9d8      	cbnz	r0, d48 <atcab_hw_sha2_256_update+0xbe>
	for (i = 0; i < block_count; i++) {
     d10:	3501      	adds	r5, #1
     d12:	3440      	adds	r4, #64	; 0x40
     d14:	45a9      	cmp	r9, r5
     d16:	d1f8      	bne.n	d0a <atcab_hw_sha2_256_update+0x80>
	ctx->total_msg_size += (block_count + 1) * ATCA_SHA256_BLOCK_SIZE;
     d18:	464b      	mov	r3, r9
     d1a:	3301      	adds	r3, #1
     d1c:	019b      	lsls	r3, r3, #6
     d1e:	683a      	ldr	r2, [r7, #0]
     d20:	4694      	mov	ip, r2
     d22:	4463      	add	r3, ip
     d24:	603b      	str	r3, [r7, #0]
	ctx->block_size = data_size % ATCA_SHA256_BLOCK_SIZE;
     d26:	233f      	movs	r3, #63	; 0x3f
     d28:	4652      	mov	r2, sl
     d2a:	401a      	ands	r2, r3
     d2c:	607a      	str	r2, [r7, #4]
	memcpy(ctx->block, &data[copy_size + block_count * ATCA_SHA256_BLOCK_SIZE], ctx->block_size);
     d2e:	4651      	mov	r1, sl
     d30:	4399      	bics	r1, r3
     d32:	1989      	adds	r1, r1, r6
     d34:	9b00      	ldr	r3, [sp, #0]
     d36:	469c      	mov	ip, r3
     d38:	4461      	add	r1, ip
     d3a:	4640      	mov	r0, r8
     d3c:	f243 73df 	movw	r3, #14303	; 0x37df
     d40:	f2c0 0300 	movt	r3, #0
     d44:	4798      	blx	r3
	return ATCA_SUCCESS;
     d46:	e7c0      	b.n	cca <atcab_hw_sha2_256_update+0x40>
		status = atcab_sha_update(&data[copy_size + i * ATCA_SHA256_BLOCK_SIZE]);
     d48:	9001      	str	r0, [sp, #4]
     d4a:	e7be      	b.n	cca <atcab_hw_sha2_256_update+0x40>

00000d4c <atcab_hw_sha2_256_finish>:
 * \param[out] digest  SHA256 digest is returned here (32 bytes)
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_hw_sha2_256_finish(atca_sha256_ctx_t *ctx, uint8_t *digest)
{
     d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d4e:	b085      	sub	sp, #20
     d50:	0004      	movs	r4, r0
     d52:	000f      	movs	r7, r1
	ATCA_STATUS status = ATCA_SUCCESS;
	uint32_t    msg_size_bits;
	uint32_t    pad_zero_count;
	uint16_t    digest_size;

	if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A) {
     d54:	f240 034c 	movw	r3, #76	; 0x4c
     d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d5c:	681b      	ldr	r3, [r3, #0]
     d5e:	685b      	ldr	r3, [r3, #4]
     d60:	685b      	ldr	r3, [r3, #4]
     d62:	785b      	ldrb	r3, [r3, #1]
     d64:	2b00      	cmp	r3, #0
     d66:	d143      	bne.n	df0 <atcab_hw_sha2_256_finish+0xa4>
		// ATSHA204A only implements the raw 64-byte block operation, but
		// doesn't add in the final footer information. So we do that manually
		// here.

		// Calculate the total message size in bits
		ctx->total_msg_size += ctx->block_size;
     d68:	6840      	ldr	r0, [r0, #4]
     d6a:	6823      	ldr	r3, [r4, #0]
     d6c:	18c5      	adds	r5, r0, r3
     d6e:	6025      	str	r5, [r4, #0]
		msg_size_bits = ctx->total_msg_size * 8;
     d70:	00ed      	lsls	r5, r5, #3

		// Calculate the number of padding zero bytes required between the 1 bit byte and the  ATCA_SHA256_BLOCK_SIZEbit
		// message size in bits.
		pad_zero_count
		    = (ATCA_SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % ATCA_SHA256_BLOCK_SIZE)) % ATCA_SHA256_BLOCK_SIZE;
     d72:	2309      	movs	r3, #9
     d74:	425b      	negs	r3, r3
     d76:	1a1b      	subs	r3, r3, r0
     d78:	263f      	movs	r6, #63	; 0x3f
     d7a:	401e      	ands	r6, r3

		// Append a single 1 bit
		ctx->block[ctx->block_size++] = 0x80;
     d7c:	1c43      	adds	r3, r0, #1
     d7e:	6063      	str	r3, [r4, #4]
     d80:	1823      	adds	r3, r4, r0
     d82:	2280      	movs	r2, #128	; 0x80
     d84:	721a      	strb	r2, [r3, #8]

		// Add padding zeros plus upper 4 bytes of total message size in bits (only supporting 32bit message bit counts)
		memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
     d86:	1d32      	adds	r2, r6, #4
     d88:	3009      	adds	r0, #9
     d8a:	1820      	adds	r0, r4, r0
     d8c:	2100      	movs	r1, #0
     d8e:	f243 73f1 	movw	r3, #14321	; 0x37f1
     d92:	f2c0 0300 	movt	r3, #0
     d96:	4798      	blx	r3
		ctx->block_size += pad_zero_count + 4;
     d98:	6863      	ldr	r3, [r4, #4]
     d9a:	469c      	mov	ip, r3
     d9c:	4466      	add	r6, ip

		// Add the total message size in bits to the end of the current block. Technically this is
		// supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
		ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
     d9e:	19a3      	adds	r3, r4, r6
     da0:	0e2a      	lsrs	r2, r5, #24
     da2:	731a      	strb	r2, [r3, #12]
		ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
     da4:	0c2a      	lsrs	r2, r5, #16
     da6:	735a      	strb	r2, [r3, #13]
		ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
     da8:	0a2a      	lsrs	r2, r5, #8
     daa:	739a      	strb	r2, [r3, #14]
		ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
     dac:	3608      	adds	r6, #8
     dae:	6066      	str	r6, [r4, #4]
     db0:	73dd      	strb	r5, [r3, #15]

		digest_size = 32;
     db2:	230e      	movs	r3, #14
     db4:	446b      	add	r3, sp
     db6:	2220      	movs	r2, #32
     db8:	801a      	strh	r2, [r3, #0]
		status      = atcab_sha_base(SHA_MODE_SHA256_UPDATE, ATCA_SHA256_BLOCK_SIZE, ctx->block, digest, &digest_size);
     dba:	0022      	movs	r2, r4
     dbc:	3208      	adds	r2, #8
     dbe:	9300      	str	r3, [sp, #0]
     dc0:	003b      	movs	r3, r7
     dc2:	2140      	movs	r1, #64	; 0x40
     dc4:	2001      	movs	r0, #1
     dc6:	f640 3543 	movw	r5, #2883	; 0xb43
     dca:	f2c0 0500 	movt	r5, #0
     dce:	47a8      	blx	r5
		if (status != ATCA_SUCCESS) {
     dd0:	b9b8      	cbnz	r0, e02 <atcab_hw_sha2_256_finish+0xb6>
			return status;
		}
		if (ctx->block_size > ATCA_SHA256_BLOCK_SIZE) {
     dd2:	6863      	ldr	r3, [r4, #4]
     dd4:	2b40      	cmp	r3, #64	; 0x40
     dd6:	d914      	bls.n	e02 <atcab_hw_sha2_256_finish+0xb6>
			digest_size = 32;
     dd8:	230e      	movs	r3, #14
     dda:	446b      	add	r3, sp
     ddc:	2220      	movs	r2, #32
     dde:	801a      	strh	r2, [r3, #0]
			status      = atcab_sha_base(SHA_MODE_SHA256_UPDATE,
                                    ATCA_SHA256_BLOCK_SIZE,
                                    &ctx->block[ATCA_SHA256_BLOCK_SIZE],
     de0:	0022      	movs	r2, r4
     de2:	3248      	adds	r2, #72	; 0x48
			status      = atcab_sha_base(SHA_MODE_SHA256_UPDATE,
     de4:	9300      	str	r3, [sp, #0]
     de6:	003b      	movs	r3, r7
     de8:	2140      	movs	r1, #64	; 0x40
     dea:	3001      	adds	r0, #1
     dec:	47a8      	blx	r5
     dee:	e008      	b.n	e02 <atcab_hw_sha2_256_finish+0xb6>
			if (status != ATCA_SUCCESS) {
				return status;
			}
		}
	} else {
		status = atcab_sha_end(digest, ctx->block_size, ctx->block);
     df0:	0002      	movs	r2, r0
     df2:	3208      	adds	r2, #8
     df4:	8881      	ldrh	r1, [r0, #4]
     df6:	0038      	movs	r0, r7
     df8:	f640 434f 	movw	r3, #3151	; 0xc4f
     dfc:	f2c0 0300 	movt	r3, #0
     e00:	4798      	blx	r3
			return status;
		}
	}

	return ATCA_SUCCESS;
}
     e02:	b005      	add	sp, #20
     e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000e06 <atcab_hw_sha2_256>:
 * \param[out] digest     Digest is returned here (32 bytes).
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_hw_sha2_256(const uint8_t *data, size_t data_size, uint8_t *digest)
{
     e06:	b570      	push	{r4, r5, r6, lr}
     e08:	b0a2      	sub	sp, #136	; 0x88
     e0a:	0004      	movs	r4, r0
     e0c:	000d      	movs	r5, r1
     e0e:	0016      	movs	r6, r2
	ATCA_STATUS       status = ATCA_SUCCESS;
	atca_sha256_ctx_t ctx;

	status = atcab_hw_sha2_256_init(&ctx);
     e10:	4668      	mov	r0, sp
     e12:	f640 436f 	movw	r3, #3183	; 0xc6f
     e16:	f2c0 0300 	movt	r3, #0
     e1a:	4798      	blx	r3
	if (status != ATCA_SUCCESS) {
     e1c:	b108      	cbz	r0, e22 <atcab_hw_sha2_256+0x1c>
	if (status != ATCA_SUCCESS) {
		return status;
	}

	return ATCA_SUCCESS;
}
     e1e:	b022      	add	sp, #136	; 0x88
     e20:	bd70      	pop	{r4, r5, r6, pc}
	status = atcab_hw_sha2_256_update(&ctx, data, data_size);
     e22:	002a      	movs	r2, r5
     e24:	0021      	movs	r1, r4
     e26:	4668      	mov	r0, sp
     e28:	f640 438b 	movw	r3, #3211	; 0xc8b
     e2c:	f2c0 0300 	movt	r3, #0
     e30:	4798      	blx	r3
	if (status != ATCA_SUCCESS) {
     e32:	2800      	cmp	r0, #0
     e34:	d1f3      	bne.n	e1e <atcab_hw_sha2_256+0x18>
	status = atcab_hw_sha2_256_finish(&ctx, digest);
     e36:	0031      	movs	r1, r6
     e38:	4668      	mov	r0, sp
     e3a:	f640 534d 	movw	r3, #3405	; 0xd4d
     e3e:	f2c0 0300 	movt	r3, #0
     e42:	4798      	blx	r3
     e44:	e7eb      	b.n	e1e <atcab_hw_sha2_256+0x18>

00000e46 <atcab_sha>:
{
     e46:	b510      	push	{r4, lr}
     e48:	000b      	movs	r3, r1
	return atcab_hw_sha2_256(message, length, digest);
     e4a:	0001      	movs	r1, r0
     e4c:	0018      	movs	r0, r3
     e4e:	f640 6307 	movw	r3, #3591	; 0xe07
     e52:	f2c0 0300 	movt	r3, #0
     e56:	4798      	blx	r3
}
     e58:	bd10      	pop	{r4, pc}

00000e5a <hal_iface_init>:
	// unavoidable The key here is to provide the flexibility to include just the types of interfaces you want/need
	// without breaking the object model.  The former is needed so in an embedded, constrained memory environment, you
	// don't have to pay the price (in terms of memory) for interfaces you don't use in your application.
	ATCA_STATUS status = ATCA_COMM_FAIL;

	switch (cfg->iface_type) {
     e5a:	7803      	ldrb	r3, [r0, #0]
	ATCA_STATUS status = ATCA_COMM_FAIL;
     e5c:	20f0      	movs	r0, #240	; 0xf0
	switch (cfg->iface_type) {
     e5e:	b103      	cbz	r3, e62 <hal_iface_init+0x8>
		break;
	default:
		break;
	}
	return status;
}
     e60:	4770      	bx	lr
		hal->halinit     = &hal_i2c_init;
     e62:	f640 7325 	movw	r3, #3877	; 0xf25
     e66:	f2c0 0300 	movt	r3, #0
     e6a:	600b      	str	r3, [r1, #0]
		hal->halpostinit = &hal_i2c_post_init;
     e6c:	f640 73a7 	movw	r3, #4007	; 0xfa7
     e70:	f2c0 0300 	movt	r3, #0
     e74:	604b      	str	r3, [r1, #4]
		hal->halreceive  = &hal_i2c_receive;
     e76:	f241 031d 	movw	r3, #4125	; 0x101d
     e7a:	f2c0 0300 	movt	r3, #0
     e7e:	60cb      	str	r3, [r1, #12]
		hal->halsend     = &hal_i2c_send;
     e80:	f640 73ad 	movw	r3, #4013	; 0xfad
     e84:	f2c0 0300 	movt	r3, #0
     e88:	608b      	str	r3, [r1, #8]
		hal->halsleep    = &hal_i2c_sleep;
     e8a:	f241 23bd 	movw	r3, #4797	; 0x12bd
     e8e:	f2c0 0300 	movt	r3, #0
     e92:	618b      	str	r3, [r1, #24]
		hal->halwake     = &hal_i2c_wake;
     e94:	f241 136d 	movw	r3, #4461	; 0x116d
     e98:	f2c0 0300 	movt	r3, #0
     e9c:	610b      	str	r3, [r1, #16]
		hal->halidle     = &hal_i2c_idle;
     e9e:	f241 2361 	movw	r3, #4705	; 0x1261
     ea2:	f2c0 0300 	movt	r3, #0
     ea6:	614b      	str	r3, [r1, #20]
		hal->halrelease  = &hal_i2c_release;
     ea8:	f241 3315 	movw	r3, #4885	; 0x1315
     eac:	f2c0 0300 	movt	r3, #0
     eb0:	61cb      	str	r3, [r1, #28]
		hal->hal_data    = NULL;
     eb2:	2300      	movs	r3, #0
     eb4:	620b      	str	r3, [r1, #32]
		status = ATCA_SUCCESS;
     eb6:	2000      	movs	r0, #0
		break;
     eb8:	e7d2      	b.n	e60 <hal_iface_init+0x6>

00000eba <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
     eba:	b510      	push	{r4, lr}
	ATCA_STATUS status = ATCA_GEN_FAIL;

	switch (iface_type) {
     ebc:	b108      	cbz	r0, ec2 <hal_iface_release+0x8>
	ATCA_STATUS status = ATCA_GEN_FAIL;
     ebe:	20e1      	movs	r0, #225	; 0xe1
	default:
		break;
	}

	return status;
}
     ec0:	bd10      	pop	{r4, pc}
		status = hal_i2c_release(hal_data);
     ec2:	0008      	movs	r0, r1
     ec4:	f241 3315 	movw	r3, #4885	; 0x1315
     ec8:	f2c0 0300 	movt	r3, #0
     ecc:	4798      	blx	r3
		break;
     ece:	e7f7      	b.n	ec0 <hal_iface_release+0x6>

00000ed0 <hal_check_wake>:
 * \param[in] response_size  Size of the response to check.
 * \return ATCA_SUCCESS for expected wake, ATCA_STATUS_SELFTEST_ERROR if the
 *         power on self test failed, ATCA_WAKE_FAILED for other failures.
 */
ATCA_STATUS hal_check_wake(const uint8_t *response, int response_size)
{
     ed0:	b510      	push	{r4, lr}
     ed2:	b082      	sub	sp, #8
     ed4:	0004      	movs	r4, r0
	const uint8_t expected_response[4]  = {0x04, 0x11, 0x33, 0x43};
     ed6:	f643 231c 	movw	r3, #14876	; 0x3a1c
     eda:	f2c0 0300 	movt	r3, #0
     ede:	681a      	ldr	r2, [r3, #0]
     ee0:	9201      	str	r2, [sp, #4]
	uint8_t       selftest_fail_resp[4] = {0x04, 0x07, 0xC4, 0x40};
     ee2:	685b      	ldr	r3, [r3, #4]
     ee4:	9300      	str	r3, [sp, #0]

	if (response_size != 4) {
		return ATCA_WAKE_FAILED;
     ee6:	20d0      	movs	r0, #208	; 0xd0
	if (response_size != 4) {
     ee8:	2904      	cmp	r1, #4
     eea:	d001      	beq.n	ef0 <hal_check_wake+0x20>
	}
	if (memcmp(response, selftest_fail_resp, 4) == 0) {
		return ATCA_STATUS_SELFTEST_ERROR;
	}
	return ATCA_WAKE_FAILED;
}
     eec:	b002      	add	sp, #8
     eee:	bd10      	pop	{r4, pc}
	if (memcmp(response, expected_response, 4) == 0) {
     ef0:	2204      	movs	r2, #4
     ef2:	a901      	add	r1, sp, #4
     ef4:	0020      	movs	r0, r4
     ef6:	f243 73c1 	movw	r3, #14273	; 0x37c1
     efa:	f2c0 0300 	movt	r3, #0
     efe:	4798      	blx	r3
     f00:	0003      	movs	r3, r0
		return ATCA_SUCCESS;
     f02:	2000      	movs	r0, #0
	if (memcmp(response, expected_response, 4) == 0) {
     f04:	2b00      	cmp	r3, #0
     f06:	d0f1      	beq.n	eec <hal_check_wake+0x1c>
	if (memcmp(response, selftest_fail_resp, 4) == 0) {
     f08:	2204      	movs	r2, #4
     f0a:	4669      	mov	r1, sp
     f0c:	0020      	movs	r0, r4
     f0e:	f243 73c1 	movw	r3, #14273	; 0x37c1
     f12:	f2c0 0300 	movt	r3, #0
     f16:	4798      	blx	r3
     f18:	0003      	movs	r3, r0
		return ATCA_STATUS_SELFTEST_ERROR;
     f1a:	20d7      	movs	r0, #215	; 0xd7
	if (memcmp(response, selftest_fail_resp, 4) == 0) {
     f1c:	2b00      	cmp	r3, #0
     f1e:	d0e5      	beq.n	eec <hal_check_wake+0x1c>
	return ATCA_WAKE_FAILED;
     f20:	3807      	subs	r0, #7
     f22:	e7e3      	b.n	eec <hal_check_wake+0x1c>

00000f24 <hal_i2c_init>:
 * has released the physical layer, it will disable the interface for some other use.
 * You can have multiple ATCAIFace instances using the same bus, and you can have multiple ATCAIFace instances on
 * multiple i2c buses, so hal_i2c_init manages these things and ATCAIFace is abstracted from the physical details.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
     f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f26:	0006      	movs	r6, r0
     f28:	000d      	movs	r5, r1
	if (cfg->atcai2c.bus >= MAX_I2C_BUSES) {
     f2a:	794c      	ldrb	r4, [r1, #5]
		return ATCA_COMM_FAIL;
     f2c:	20f0      	movs	r0, #240	; 0xf0
	if (cfg->atcai2c.bus >= MAX_I2C_BUSES) {
     f2e:	2c05      	cmp	r4, #5
     f30:	d900      	bls.n	f34 <hal_i2c_init+0x10>
	}

	((ATCAHAL_t *)hal)->hal_data = data;

	return ATCA_SUCCESS;
}
     f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ATCAI2CMaster_t *data = &i2c_hal_data[cfg->atcai2c.bus];
     f34:	00a3      	lsls	r3, r4, #2
     f36:	191f      	adds	r7, r3, r4
     f38:	00ff      	lsls	r7, r7, #3
     f3a:	f240 0250 	movw	r2, #80	; 0x50
     f3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f42:	4694      	mov	ip, r2
     f44:	4467      	add	r7, ip
	if (data->ref_ct <= 0) {
     f46:	6a3a      	ldr	r2, [r7, #32]
     f48:	2a00      	cmp	r2, #0
     f4a:	dd0d      	ble.n	f68 <hal_i2c_init+0x44>
		data->ref_ct++;
     f4c:	00a3      	lsls	r3, r4, #2
     f4e:	191c      	adds	r4, r3, r4
     f50:	00e4      	lsls	r4, r4, #3
     f52:	f240 0350 	movw	r3, #80	; 0x50
     f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f5a:	469c      	mov	ip, r3
     f5c:	4464      	add	r4, ip
     f5e:	3201      	adds	r2, #1
     f60:	6222      	str	r2, [r4, #32]
	((ATCAHAL_t *)hal)->hal_data = data;
     f62:	6237      	str	r7, [r6, #32]
	return ATCA_SUCCESS;
     f64:	2000      	movs	r0, #0
     f66:	e7e4      	b.n	f32 <hal_i2c_init+0xe>
		memcpy(&(data->i2c_master_instance), cfg->cfg_data, sizeof(struct i2c_m_sync_desc));
     f68:	2220      	movs	r2, #32
     f6a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
     f6c:	0038      	movs	r0, r7
     f6e:	f243 73df 	movw	r3, #14303	; 0x37df
     f72:	f2c0 0300 	movt	r3, #0
     f76:	4798      	blx	r3
		i2c_m_sync_set_baudrate(&data->i2c_master_instance, 0, cfg->atcai2c.baud / 1000);
     f78:	68aa      	ldr	r2, [r5, #8]
     f7a:	f240 33e8 	movw	r3, #1000	; 0x3e8
     f7e:	fbb2 f2f3 	udiv	r2, r2, r3
     f82:	2100      	movs	r1, #0
     f84:	0038      	movs	r0, r7
     f86:	f241 53df 	movw	r3, #5599	; 0x15df
     f8a:	f2c0 0300 	movt	r3, #0
     f8e:	4798      	blx	r3
		i2c_m_sync_enable(&data->i2c_master_instance);
     f90:	0038      	movs	r0, r7
     f92:	f241 53c3 	movw	r3, #5571	; 0x15c3
     f96:	f2c0 0300 	movt	r3, #0
     f9a:	4798      	blx	r3
		data->bus_index = cfg->atcai2c.bus;
     f9c:	7969      	ldrb	r1, [r5, #5]
     f9e:	6279      	str	r1, [r7, #36]	; 0x24
		data->ref_ct = 1;
     fa0:	2201      	movs	r2, #1
     fa2:	623a      	str	r2, [r7, #32]
     fa4:	e7dd      	b.n	f62 <hal_i2c_init+0x3e>

00000fa6 <hal_i2c_post_init>:
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
	(void)iface;

	return ATCA_SUCCESS;
}
     fa6:	2000      	movs	r0, #0
     fa8:	4770      	bx	lr
	...

00000fac <hal_i2c_send>:
 * \param[in] txdata    pointer to space to bytes to send
 * \param[in] txlength  number of bytes to send
 * \return ATCA_STATUS
 */
ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
     fac:	b5f0      	push	{r4, r5, r6, r7, lr}
     fae:	b085      	sub	sp, #20
     fb0:	000f      	movs	r7, r1
     fb2:	0015      	movs	r5, r2
	ATCAIfaceCfg *cfg = atgetifacecfg(iface);
     fb4:	f240 638b 	movw	r3, #1675	; 0x68b
     fb8:	f2c0 0300 	movt	r3, #0
     fbc:	4798      	blx	r3
     fbe:	0006      	movs	r6, r0

	struct _i2c_m_msg packet = {
     fc0:	ac01      	add	r4, sp, #4
     fc2:	220c      	movs	r2, #12
     fc4:	2100      	movs	r1, #0
     fc6:	0020      	movs	r0, r4
     fc8:	f243 73f1 	movw	r3, #14321	; 0x37f1
     fcc:	f2c0 0300 	movt	r3, #0
     fd0:	4798      	blx	r3
     fd2:	7933      	ldrb	r3, [r6, #4]
     fd4:	085b      	lsrs	r3, r3, #1
     fd6:	8023      	strh	r3, [r4, #0]
     fd8:	4b0f      	ldr	r3, [pc, #60]	; (1018 <hal_i2c_send+0x6c>)
     fda:	8063      	strh	r3, [r4, #2]
     fdc:	60a7      	str	r7, [r4, #8]
	// for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

	// other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and
	// wire it up instead of this one this covers devices such as ATSHA204A and ATECCx08A that require a word address
	// value pre-pended to the packet txdata[0] is using _reserved byte of the ATCAPacket
	txdata[0] = 0x03; // insert the Word Address Value, Command token
     fde:	2303      	movs	r3, #3
     fe0:	703b      	strb	r3, [r7, #0]
	txlength++;       // account for word address value byte.
     fe2:	3501      	adds	r5, #1
	packet.len = txlength;
     fe4:	6065      	str	r5, [r4, #4]

	if (i2c_m_sync_transfer(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != I2C_OK)
     fe6:	7973      	ldrb	r3, [r6, #5]
     fe8:	0098      	lsls	r0, r3, #2
     fea:	18c0      	adds	r0, r0, r3
     fec:	00c0      	lsls	r0, r0, #3
     fee:	f240 0350 	movw	r3, #80	; 0x50
     ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ff6:	469c      	mov	ip, r3
     ff8:	4460      	add	r0, ip
     ffa:	0021      	movs	r1, r4
     ffc:	f241 53ed 	movw	r3, #5613	; 0x15ed
    1000:	f2c0 0300 	movt	r3, #0
    1004:	4798      	blx	r3
    1006:	0003      	movs	r3, r0
		return ATCA_COMM_FAIL;
    1008:	20f0      	movs	r0, #240	; 0xf0

	return ATCA_SUCCESS;
    100a:	1e5a      	subs	r2, r3, #1
    100c:	4193      	sbcs	r3, r2
    100e:	425b      	negs	r3, r3
    1010:	4018      	ands	r0, r3
}
    1012:	b005      	add	sp, #20
    1014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	ffff8800 	.word	0xffff8800

0000101c <hal_i2c_receive>:
 * \param[in] rxdata    pointer to space to receive the data
 * \param[in] rxlength  ptr to expected number of receive bytes to request
 * \return ATCA_STATUS
 */
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    101c:	b5f0      	push	{r4, r5, r6, r7, lr}
    101e:	46ce      	mov	lr, r9
    1020:	4647      	mov	r7, r8
    1022:	b580      	push	{r7, lr}
    1024:	b085      	sub	sp, #20
    1026:	4688      	mov	r8, r1
    1028:	0017      	movs	r7, r2
	ATCAIfaceCfg *cfg             = atgetifacecfg(iface);
    102a:	f240 638b 	movw	r3, #1675	; 0x68b
    102e:	f2c0 0300 	movt	r3, #0
    1032:	4798      	blx	r3
    1034:	0005      	movs	r5, r0
	int           retries         = cfg->rx_retries;
    1036:	6a84      	ldr	r4, [r0, #40]	; 0x28
	int           status          = !ATCA_SUCCESS;
	uint16_t      rxdata_max_size = *rxlength;
    1038:	883b      	ldrh	r3, [r7, #0]
    103a:	4699      	mov	r9, r3

	struct _i2c_m_msg packet = {
    103c:	ab01      	add	r3, sp, #4
    103e:	7902      	ldrb	r2, [r0, #4]
    1040:	0852      	lsrs	r2, r2, #1
    1042:	801a      	strh	r2, [r3, #0]
    1044:	4a2a      	ldr	r2, [pc, #168]	; (10f0 <hal_i2c_receive+0xd4>)
    1046:	805a      	strh	r2, [r3, #2]
    1048:	2201      	movs	r2, #1
    104a:	9202      	str	r2, [sp, #8]
    104c:	4642      	mov	r2, r8
    104e:	9203      	str	r2, [sp, #12]
	    .len    = 1,
	    .buffer = rxdata,
	    .flags  = I2C_M_SEVEN | I2C_M_RD | I2C_M_STOP,
	};

	*rxlength = 0;
    1050:	2300      	movs	r3, #0
    1052:	803b      	strh	r3, [r7, #0]
	if (rxdata_max_size < 1) {
		return ATCA_SMALL_BUFFER;
    1054:	20ed      	movs	r0, #237	; 0xed
	if (rxdata_max_size < 1) {
    1056:	464b      	mov	r3, r9
    1058:	b923      	cbnz	r3, 1064 <hal_i2c_receive+0x48>
	}

	*rxlength = rxdata[0];

	return ATCA_SUCCESS;
}
    105a:	b005      	add	sp, #20
    105c:	bc0c      	pop	{r2, r3}
    105e:	4690      	mov	r8, r2
    1060:	4699      	mov	r9, r3
    1062:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rxdata_max_size < 1) {
    1064:	2301      	movs	r3, #1
		if (i2c_m_sync_transfer(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != I2C_OK) {
    1066:	f241 56ed 	movw	r6, #5613	; 0x15ed
    106a:	f2c0 0600 	movt	r6, #0
    106e:	e011      	b.n	1094 <hal_i2c_receive+0x78>
    1070:	796b      	ldrb	r3, [r5, #5]
    1072:	0098      	lsls	r0, r3, #2
    1074:	18c0      	adds	r0, r0, r3
    1076:	00c0      	lsls	r0, r0, #3
    1078:	f240 0350 	movw	r3, #80	; 0x50
    107c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1080:	469c      	mov	ip, r3
    1082:	4460      	add	r0, ip
    1084:	a901      	add	r1, sp, #4
    1086:	47b0      	blx	r6
			status = ATCA_COMM_FAIL;
    1088:	23f0      	movs	r3, #240	; 0xf0
			status = ATCA_SUCCESS;
    108a:	1e42      	subs	r2, r0, #1
    108c:	4190      	sbcs	r0, r2
    108e:	4240      	negs	r0, r0
    1090:	4003      	ands	r3, r0
    1092:	3c01      	subs	r4, #1
	while (retries-- > 0 && status != ATCA_SUCCESS) {
    1094:	2c00      	cmp	r4, #0
    1096:	dd22      	ble.n	10de <hal_i2c_receive+0xc2>
    1098:	2b00      	cmp	r3, #0
    109a:	d1e9      	bne.n	1070 <hal_i2c_receive+0x54>
	if (rxdata[0] < ATCA_RSP_SIZE_MIN) {
    109c:	4643      	mov	r3, r8
    109e:	781b      	ldrb	r3, [r3, #0]
		return ATCA_INVALID_SIZE;
    10a0:	20e4      	movs	r0, #228	; 0xe4
	if (rxdata[0] < ATCA_RSP_SIZE_MIN) {
    10a2:	2b03      	cmp	r3, #3
    10a4:	d9d9      	bls.n	105a <hal_i2c_receive+0x3e>
	if (rxdata[0] > rxdata_max_size) {
    10a6:	b29a      	uxth	r2, r3
		return ATCA_SMALL_BUFFER;
    10a8:	3009      	adds	r0, #9
	if (rxdata[0] > rxdata_max_size) {
    10aa:	4591      	cmp	r9, r2
    10ac:	d3d5      	bcc.n	105a <hal_i2c_receive+0x3e>
	packet.len    = rxdata[0] - 1;
    10ae:	3b01      	subs	r3, #1
    10b0:	9302      	str	r3, [sp, #8]
	packet.buffer = &rxdata[1];
    10b2:	4643      	mov	r3, r8
    10b4:	3301      	adds	r3, #1
    10b6:	9303      	str	r3, [sp, #12]
	if (i2c_m_sync_transfer(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != I2C_OK) {
    10b8:	796b      	ldrb	r3, [r5, #5]
    10ba:	0098      	lsls	r0, r3, #2
    10bc:	18c0      	adds	r0, r0, r3
    10be:	00c0      	lsls	r0, r0, #3
    10c0:	f240 0350 	movw	r3, #80	; 0x50
    10c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    10c8:	469c      	mov	ip, r3
    10ca:	4460      	add	r0, ip
    10cc:	a901      	add	r1, sp, #4
    10ce:	f241 53ed 	movw	r3, #5613	; 0x15ed
    10d2:	f2c0 0300 	movt	r3, #0
    10d6:	4798      	blx	r3
    10d8:	b128      	cbz	r0, 10e6 <hal_i2c_receive+0xca>
		return status;
    10da:	20f0      	movs	r0, #240	; 0xf0
    10dc:	e7bd      	b.n	105a <hal_i2c_receive+0x3e>
	if (status != ATCA_SUCCESS) {
    10de:	2b00      	cmp	r3, #0
    10e0:	d0dc      	beq.n	109c <hal_i2c_receive+0x80>
		return status;
    10e2:	b2d8      	uxtb	r0, r3
    10e4:	e7b9      	b.n	105a <hal_i2c_receive+0x3e>
	*rxlength = rxdata[0];
    10e6:	4643      	mov	r3, r8
    10e8:	781b      	ldrb	r3, [r3, #0]
    10ea:	803b      	strh	r3, [r7, #0]
	return ATCA_SUCCESS;
    10ec:	2000      	movs	r0, #0
    10ee:	e7b4      	b.n	105a <hal_i2c_receive+0x3e>
    10f0:	ffff8801 	.word	0xffff8801

000010f4 <change_i2c_speed>:
/** \brief Change the I2C SCL speed
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */
void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    10f4:	b570      	push	{r4, r5, r6, lr}
    10f6:	000d      	movs	r5, r1
	ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    10f8:	f240 638b 	movw	r3, #1675	; 0x68b
    10fc:	f2c0 0300 	movt	r3, #0
    1100:	4798      	blx	r3
    1102:	0004      	movs	r4, r0

	// disable I2C module
	i2c_m_sync_disable(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance);
    1104:	7943      	ldrb	r3, [r0, #5]
    1106:	0098      	lsls	r0, r3, #2
    1108:	18c0      	adds	r0, r0, r3
    110a:	00c0      	lsls	r0, r0, #3
    110c:	f240 0350 	movw	r3, #80	; 0x50
    1110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1114:	469c      	mov	ip, r3
    1116:	4460      	add	r0, ip
    1118:	f241 53d1 	movw	r3, #5585	; 0x15d1
    111c:	f2c0 0300 	movt	r3, #0
    1120:	4798      	blx	r3

	// set I2C baudrate and enable I2C module
	i2c_m_sync_set_baudrate(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, 0, (speed / 1000));
    1122:	f240 32e8 	movw	r2, #1000	; 0x3e8
    1126:	fbb5 f2f2 	udiv	r2, r5, r2
    112a:	7963      	ldrb	r3, [r4, #5]
    112c:	0098      	lsls	r0, r3, #2
    112e:	18c0      	adds	r0, r0, r3
    1130:	00c0      	lsls	r0, r0, #3
    1132:	f240 0350 	movw	r3, #80	; 0x50
    1136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    113a:	469c      	mov	ip, r3
    113c:	4460      	add	r0, ip
    113e:	2100      	movs	r1, #0
    1140:	f241 53df 	movw	r3, #5599	; 0x15df
    1144:	f2c0 0300 	movt	r3, #0
    1148:	4798      	blx	r3
	i2c_m_sync_enable(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance);
    114a:	7963      	ldrb	r3, [r4, #5]
    114c:	0098      	lsls	r0, r3, #2
    114e:	18c0      	adds	r0, r0, r3
    1150:	00c0      	lsls	r0, r0, #3
    1152:	f240 0350 	movw	r3, #80	; 0x50
    1156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    115a:	469c      	mov	ip, r3
    115c:	4460      	add	r0, ip
    115e:	f241 53c3 	movw	r3, #5571	; 0x15c3
    1162:	f2c0 0300 	movt	r3, #0
    1166:	4798      	blx	r3
}
    1168:	bd70      	pop	{r4, r5, r6, pc}
	...

0000116c <hal_i2c_wake>:

/** \brief wake up CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to wakeup
 */
ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    116c:	b5f0      	push	{r4, r5, r6, r7, lr}
    116e:	46c6      	mov	lr, r8
    1170:	b500      	push	{lr}
    1172:	b086      	sub	sp, #24
    1174:	0005      	movs	r5, r0
    1176:	9001      	str	r0, [sp, #4]
	ATCAIfaceCfg *cfg     = atgetifacecfg(iface);
    1178:	f240 638b 	movw	r3, #1675	; 0x68b
    117c:	f2c0 0300 	movt	r3, #0
    1180:	4798      	blx	r3
    1182:	0006      	movs	r6, r0
	int           retries = cfg->rx_retries;
    1184:	6a87      	ldr	r7, [r0, #40]	; 0x28
	uint32_t      bdrt    = cfg->atcai2c.baud;
    1186:	6883      	ldr	r3, [r0, #8]
    1188:	4698      	mov	r8, r3
	int           status  = !I2C_OK;
	uint8_t       data[4];

	if (bdrt != 100000) // if not already at 100KHz, change it
    118a:	f248 63a0 	movw	r3, #34464	; 0x86a0
    118e:	f2c0 0301 	movt	r3, #1
    1192:	4598      	cmp	r8, r3
    1194:	d009      	beq.n	11aa <hal_i2c_wake+0x3e>
	{
		change_i2c_speed(iface, 100000);
    1196:	f248 61a0 	movw	r1, #34464	; 0x86a0
    119a:	f2c0 0101 	movt	r1, #1
    119e:	0028      	movs	r0, r5
    11a0:	f241 03f5 	movw	r3, #4341	; 0x10f5
    11a4:	f2c0 0300 	movt	r3, #0
    11a8:	4798      	blx	r3
	}

	// send the wake by writing to an address of 0x00
	struct _i2c_m_msg packet = {
    11aa:	ad02      	add	r5, sp, #8
    11ac:	f643 2324 	movw	r3, #14884	; 0x3a24
    11b0:	f2c0 0300 	movt	r3, #0
    11b4:	002a      	movs	r2, r5
    11b6:	cb13      	ldmia	r3!, {r0, r1, r4}
    11b8:	c213      	stmia	r2!, {r0, r1, r4}
	    .buffer = NULL,
	    .flags  = I2C_M_SEVEN | I2C_M_STOP,
	};

	// Send the 00 address as the wake pulse; part will NACK, so don't check for status
	i2c_m_sync_transfer(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    11ba:	7973      	ldrb	r3, [r6, #5]
    11bc:	0098      	lsls	r0, r3, #2
    11be:	18c0      	adds	r0, r0, r3
    11c0:	00c0      	lsls	r0, r0, #3
    11c2:	f240 0350 	movw	r3, #80	; 0x50
    11c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    11ca:	469c      	mov	ip, r3
    11cc:	4460      	add	r0, ip
    11ce:	0029      	movs	r1, r5
    11d0:	f241 53ed 	movw	r3, #5613	; 0x15ed
    11d4:	f2c0 0300 	movt	r3, #0
    11d8:	4798      	blx	r3

	// wait tWHI + tWLO which is configured based on device type and configuration structure
	delay_us(cfg->wake_delay);
    11da:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
    11dc:	f241 43d1 	movw	r3, #5329	; 0x14d1
    11e0:	f2c0 0300 	movt	r3, #0
    11e4:	4798      	blx	r3

	// receive the wake up response
	packet.addr   = cfg->atcai2c.slave_address >> 1;
    11e6:	7933      	ldrb	r3, [r6, #4]
    11e8:	085b      	lsrs	r3, r3, #1
    11ea:	802b      	strh	r3, [r5, #0]
	packet.len    = 4;
    11ec:	2304      	movs	r3, #4
    11ee:	606b      	str	r3, [r5, #4]
	packet.buffer = data;
    11f0:	ab05      	add	r3, sp, #20
    11f2:	60ab      	str	r3, [r5, #8]
	packet.flags  = I2C_M_SEVEN | I2C_M_RD | I2C_M_STOP;
    11f4:	4b19      	ldr	r3, [pc, #100]	; (125c <hal_i2c_wake+0xf0>)
    11f6:	806b      	strh	r3, [r5, #2]

	while (retries-- > 0 && status != I2C_OK) {
    11f8:	1e7d      	subs	r5, r7, #1
    11fa:	2f00      	cmp	r7, #0
    11fc:	dd20      	ble.n	1240 <hal_i2c_wake+0xd4>
		status = i2c_m_sync_transfer(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    11fe:	f241 57ed 	movw	r7, #5613	; 0x15ed
    1202:	f2c0 0700 	movt	r7, #0
    1206:	7973      	ldrb	r3, [r6, #5]
    1208:	0098      	lsls	r0, r3, #2
    120a:	18c0      	adds	r0, r0, r3
    120c:	00c0      	lsls	r0, r0, #3
    120e:	f240 0350 	movw	r3, #80	; 0x50
    1212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1216:	469c      	mov	ip, r3
    1218:	4460      	add	r0, ip
    121a:	a902      	add	r1, sp, #8
    121c:	47b8      	blx	r7
	while (retries-- > 0 && status != I2C_OK) {
    121e:	3d01      	subs	r5, #1
    1220:	d319      	bcc.n	1256 <hal_i2c_wake+0xea>
    1222:	2800      	cmp	r0, #0
    1224:	d1ef      	bne.n	1206 <hal_i2c_wake+0x9a>
	}

	if (status == I2C_OK) {
		// if necessary, revert baud rate to what came in.
		if (bdrt != 100000) {
    1226:	f248 63a0 	movw	r3, #34464	; 0x86a0
    122a:	f2c0 0301 	movt	r3, #1
    122e:	4598      	cmp	r8, r3
    1230:	d006      	beq.n	1240 <hal_i2c_wake+0xd4>
			change_i2c_speed(iface, bdrt);
    1232:	4641      	mov	r1, r8
    1234:	9801      	ldr	r0, [sp, #4]
    1236:	f241 03f5 	movw	r3, #4341	; 0x10f5
    123a:	f2c0 0300 	movt	r3, #0
    123e:	4798      	blx	r3
		}
	}

	return hal_check_wake(data, 4);
    1240:	2104      	movs	r1, #4
    1242:	a805      	add	r0, sp, #20
    1244:	f640 63d1 	movw	r3, #3793	; 0xed1
    1248:	f2c0 0300 	movt	r3, #0
    124c:	4798      	blx	r3
}
    124e:	b006      	add	sp, #24
    1250:	bc04      	pop	{r2}
    1252:	4690      	mov	r8, r2
    1254:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status == I2C_OK) {
    1256:	2800      	cmp	r0, #0
    1258:	d1f2      	bne.n	1240 <hal_i2c_wake+0xd4>
    125a:	e7e4      	b.n	1226 <hal_i2c_wake+0xba>
    125c:	ffff8801 	.word	0xffff8801

00001260 <hal_i2c_idle>:

/** \brief idle CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to idle
 */
ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    1260:	b500      	push	{lr}
    1262:	b085      	sub	sp, #20
	ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1264:	f240 638b 	movw	r3, #1675	; 0x68b
    1268:	f2c0 0300 	movt	r3, #0
    126c:	4798      	blx	r3
	uint8_t       data[4];

	struct _i2c_m_msg packet = {
    126e:	7903      	ldrb	r3, [r0, #4]
    1270:	085b      	lsrs	r3, r3, #1
    1272:	466a      	mov	r2, sp
    1274:	8013      	strh	r3, [r2, #0]
    1276:	4b10      	ldr	r3, [pc, #64]	; (12b8 <hal_i2c_idle+0x58>)
    1278:	8053      	strh	r3, [r2, #2]
    127a:	2301      	movs	r3, #1
    127c:	9301      	str	r3, [sp, #4]
    127e:	ab03      	add	r3, sp, #12
    1280:	9302      	str	r3, [sp, #8]
	    .len    = 1,
	    .buffer = &data[0],
	    .flags  = I2C_M_SEVEN | I2C_M_STOP,
	};

	data[0] = 0x02; // idle word address value
    1282:	2202      	movs	r2, #2
    1284:	701a      	strb	r2, [r3, #0]
	if (i2c_m_sync_transfer(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != I2C_OK) {
    1286:	7943      	ldrb	r3, [r0, #5]
    1288:	0098      	lsls	r0, r3, #2
    128a:	18c0      	adds	r0, r0, r3
    128c:	00c0      	lsls	r0, r0, #3
    128e:	f240 0350 	movw	r3, #80	; 0x50
    1292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1296:	469c      	mov	ip, r3
    1298:	4460      	add	r0, ip
    129a:	4669      	mov	r1, sp
    129c:	f241 53ed 	movw	r3, #5613	; 0x15ed
    12a0:	f2c0 0300 	movt	r3, #0
    12a4:	4798      	blx	r3
    12a6:	0003      	movs	r3, r0
		return ATCA_COMM_FAIL;
    12a8:	20f0      	movs	r0, #240	; 0xf0
	}

	return ATCA_SUCCESS;
    12aa:	1e5a      	subs	r2, r3, #1
    12ac:	4193      	sbcs	r3, r2
    12ae:	425b      	negs	r3, r3
    12b0:	4018      	ands	r0, r3
}
    12b2:	b005      	add	sp, #20
    12b4:	bd00      	pop	{pc}
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	ffff8800 	.word	0xffff8800

000012bc <hal_i2c_sleep>:

/** \brief sleep CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to sleep
 */
ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    12bc:	b500      	push	{lr}
    12be:	b085      	sub	sp, #20
	ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    12c0:	f240 638b 	movw	r3, #1675	; 0x68b
    12c4:	f2c0 0300 	movt	r3, #0
    12c8:	4798      	blx	r3
	uint8_t       data[4];

	struct _i2c_m_msg packet = {
    12ca:	7903      	ldrb	r3, [r0, #4]
    12cc:	085b      	lsrs	r3, r3, #1
    12ce:	466a      	mov	r2, sp
    12d0:	8013      	strh	r3, [r2, #0]
    12d2:	4b0f      	ldr	r3, [pc, #60]	; (1310 <hal_i2c_sleep+0x54>)
    12d4:	8053      	strh	r3, [r2, #2]
    12d6:	2201      	movs	r2, #1
    12d8:	9201      	str	r2, [sp, #4]
    12da:	ab03      	add	r3, sp, #12
    12dc:	9302      	str	r3, [sp, #8]
	    .len    = 1,
	    .buffer = &data[0],
	    .flags  = I2C_M_SEVEN | I2C_M_STOP,
	};

	data[0] = 0x01; // sleep word address value
    12de:	701a      	strb	r2, [r3, #0]
	if (i2c_m_sync_transfer(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != I2C_OK) {
    12e0:	7943      	ldrb	r3, [r0, #5]
    12e2:	0098      	lsls	r0, r3, #2
    12e4:	18c0      	adds	r0, r0, r3
    12e6:	00c0      	lsls	r0, r0, #3
    12e8:	f240 0350 	movw	r3, #80	; 0x50
    12ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    12f0:	469c      	mov	ip, r3
    12f2:	4460      	add	r0, ip
    12f4:	4669      	mov	r1, sp
    12f6:	f241 53ed 	movw	r3, #5613	; 0x15ed
    12fa:	f2c0 0300 	movt	r3, #0
    12fe:	4798      	blx	r3
    1300:	0003      	movs	r3, r0
		return ATCA_COMM_FAIL;
    1302:	20f0      	movs	r0, #240	; 0xf0
	}

	return ATCA_SUCCESS;
    1304:	1e5a      	subs	r2, r3, #1
    1306:	4193      	sbcs	r3, r2
    1308:	425b      	negs	r3, r3
    130a:	4018      	ands	r0, r3
}
    130c:	b005      	add	sp, #20
    130e:	bd00      	pop	{pc}
    1310:	ffff8800 	.word	0xffff8800

00001314 <hal_i2c_release>:

/** \brief manages reference count on given bus and releases resource if no more refences exist
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 */
ATCA_STATUS hal_i2c_release(void *hal_data)
{
    1314:	b510      	push	{r4, lr}
    1316:	0004      	movs	r4, r0
	ATCAI2CMaster_t *hal = (ATCAI2CMaster_t *)hal_data;

	// if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
	if (hal && --(hal->ref_ct) <= 0) {
    1318:	b120      	cbz	r0, 1324 <hal_i2c_release+0x10>
    131a:	6a03      	ldr	r3, [r0, #32]
    131c:	3b01      	subs	r3, #1
    131e:	6203      	str	r3, [r0, #32]
    1320:	2b00      	cmp	r3, #0
    1322:	dd01      	ble.n	1328 <hal_i2c_release+0x14>
		i2c_m_sync_disable(&hal->i2c_master_instance);
		hal->ref_ct = 0;
	}

	return ATCA_SUCCESS;
}
    1324:	2000      	movs	r0, #0
    1326:	bd10      	pop	{r4, pc}
		i2c_m_sync_disable(&hal->i2c_master_instance);
    1328:	f241 53d1 	movw	r3, #5585	; 0x15d1
    132c:	f2c0 0300 	movt	r3, #0
    1330:	4798      	blx	r3
		hal->ref_ct = 0;
    1332:	2300      	movs	r3, #0
    1334:	6223      	str	r3, [r4, #32]
    1336:	e7f5      	b.n	1324 <hal_i2c_release+0x10>

00001338 <atca_delay_ms>:
 *         something else in your system while delaying.
 * \param[in] delay number of milliseconds to delay
 */

void atca_delay_ms(uint32_t delay)
{
    1338:	b510      	push	{r4, lr}
	// use START supplied delay
	delay_ms(delay);
    133a:	b280      	uxth	r0, r0
    133c:	f241 43f7 	movw	r3, #5367	; 0x14f7
    1340:	f2c0 0300 	movt	r3, #0
    1344:	4798      	blx	r3
}
    1346:	bd10      	pop	{r4, pc}

00001348 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1348:	e7fe      	b.n	1348 <Dummy_Handler>
	...

0000134c <Reset_Handler>:
{
    134c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    134e:	f643 3230 	movw	r2, #15152	; 0x3b30
    1352:	f2c0 0200 	movt	r2, #0
    1356:	f240 0300 	movw	r3, #0
    135a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    135e:	429a      	cmp	r2, r3
    1360:	d020      	beq.n	13a4 <Reset_Handler+0x58>
                for (; pDest < &_erelocate;) {
    1362:	001a      	movs	r2, r3
    1364:	f240 0330 	movw	r3, #48	; 0x30
    1368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    136c:	429a      	cmp	r2, r3
    136e:	d219      	bcs.n	13a4 <Reset_Handler+0x58>
    1370:	f240 0330 	movw	r3, #48	; 0x30
    1374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1378:	3303      	adds	r3, #3
    137a:	4a24      	ldr	r2, [pc, #144]	; (140c <Reset_Handler+0xc0>)
    137c:	1a9b      	subs	r3, r3, r2
    137e:	089b      	lsrs	r3, r3, #2
    1380:	3301      	adds	r3, #1
    1382:	009b      	lsls	r3, r3, #2
    1384:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1386:	f240 0100 	movw	r1, #0
    138a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    138e:	1851      	adds	r1, r2, r1
    1390:	f643 3030 	movw	r0, #15152	; 0x3b30
    1394:	f2c0 0000 	movt	r0, #0
    1398:	1810      	adds	r0, r2, r0
    139a:	6800      	ldr	r0, [r0, #0]
    139c:	6008      	str	r0, [r1, #0]
    139e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    13a0:	429a      	cmp	r2, r3
    13a2:	d1f0      	bne.n	1386 <Reset_Handler+0x3a>
        for (pDest = &_szero; pDest < &_ezero;) {
    13a4:	f240 0230 	movw	r2, #48	; 0x30
    13a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    13ac:	f240 1398 	movw	r3, #408	; 0x198
    13b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    13b4:	429a      	cmp	r2, r3
    13b6:	d213      	bcs.n	13e0 <Reset_Handler+0x94>
    13b8:	f240 0230 	movw	r2, #48	; 0x30
    13bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    13c0:	43d3      	mvns	r3, r2
    13c2:	f240 1198 	movw	r1, #408	; 0x198
    13c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    13ca:	468c      	mov	ip, r1
    13cc:	4463      	add	r3, ip
    13ce:	2103      	movs	r1, #3
    13d0:	438b      	bics	r3, r1
    13d2:	3304      	adds	r3, #4
    13d4:	4694      	mov	ip, r2
    13d6:	4463      	add	r3, ip
                *pDest++ = 0;
    13d8:	2100      	movs	r1, #0
    13da:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    13dc:	4293      	cmp	r3, r2
    13de:	d1fc      	bne.n	13da <Reset_Handler+0x8e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    13e0:	f240 0300 	movw	r3, #0
    13e4:	f2c0 0300 	movt	r3, #0
    13e8:	227f      	movs	r2, #127	; 0x7f
    13ea:	4393      	bics	r3, r2
    13ec:	f64e 5200 	movw	r2, #60672	; 0xed00
    13f0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    13f4:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    13f6:	f243 7371 	movw	r3, #14193	; 0x3771
    13fa:	f2c0 0300 	movt	r3, #0
    13fe:	4798      	blx	r3
        main();
    1400:	f242 03b1 	movw	r3, #8369	; 0x20b1
    1404:	f2c0 0300 	movt	r3, #0
    1408:	4798      	blx	r3
    140a:	e7fe      	b.n	140a <Reset_Handler+0xbe>
    140c:	20000004 	.word	0x20000004

00001410 <Interface_PORT_init>:
#endif

struct i2c_m_sync_desc Interface;

void Interface_PORT_init(void)
{
    1410:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN_Msk;
    1412:	f243 2300 	movw	r3, #12800	; 0x3200
    1416:	f2c4 0300 	movt	r3, #16384	; 0x4000
    141a:	2050      	movs	r0, #80	; 0x50
    141c:	5c19      	ldrb	r1, [r3, r0]
    141e:	2204      	movs	r2, #4
    1420:	4391      	bics	r1, r2
    1422:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1424:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
    1426:	2501      	movs	r5, #1
    1428:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    142a:	2401      	movs	r4, #1
    142c:	4321      	orrs	r1, r4
    142e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1430:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1432:	3818      	subs	r0, #24
    1434:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1436:	260f      	movs	r6, #15
    1438:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
    143a:	3e0c      	subs	r6, #12
    143c:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    143e:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN_Msk;
    1440:	2151      	movs	r1, #81	; 0x51
    1442:	5c5e      	ldrb	r6, [r3, r1]
    1444:	4396      	bics	r6, r2
    1446:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1448:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
    144a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    144c:	4322      	orrs	r2, r4
    144e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1450:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1452:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1454:	3942      	subs	r1, #66	; 0x42
    1456:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1458:	3121      	adds	r1, #33	; 0x21
    145a:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    145c:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM0_PAD1);
}
    145e:	bd70      	pop	{r4, r5, r6, pc}

00001460 <Interface_CLOCK_init>:
    1460:	f641 4300 	movw	r3, #7168	; 0x1c00
    1464:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1468:	2140      	movs	r1, #64	; 0x40
    146a:	22ac      	movs	r2, #172	; 0xac
    146c:	5099      	str	r1, [r3, r2]
    146e:	3103      	adds	r1, #3
    1470:	3a04      	subs	r2, #4
    1472:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
    1474:	f640 0300 	movw	r3, #2048	; 0x800
    1478:	f2c4 0300 	movt	r3, #16384	; 0x4000
    147c:	69da      	ldr	r2, [r3, #28]
    147e:	3941      	subs	r1, #65	; 0x41
    1480:	430a      	orrs	r2, r1
    1482:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	nsc_periph_clock_init(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
#endif
}
    1484:	4770      	bx	lr

00001486 <Interface_init>:

void Interface_init(void)
{
    1486:	b510      	push	{r4, lr}
	Interface_CLOCK_init();
    1488:	f241 4361 	movw	r3, #5217	; 0x1461
    148c:	f2c0 0300 	movt	r3, #0
    1490:	4798      	blx	r3
	i2c_m_sync_init(&Interface, SERCOM0);
    1492:	f240 4100 	movw	r1, #1024	; 0x400
    1496:	f2c4 2100 	movt	r1, #16896	; 0x4200
    149a:	f240 1078 	movw	r0, #376	; 0x178
    149e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    14a2:	f241 537d 	movw	r3, #5501	; 0x157d
    14a6:	f2c0 0300 	movt	r3, #0
    14aa:	4798      	blx	r3
	Interface_PORT_init();
    14ac:	f241 4311 	movw	r3, #5137	; 0x1411
    14b0:	f2c0 0300 	movt	r3, #0
    14b4:	4798      	blx	r3
}
    14b6:	bd10      	pop	{r4, pc}

000014b8 <system_init>:

void system_init(void)
{
    14b8:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    14ba:	f241 6335 	movw	r3, #5685	; 0x1635
    14be:	f2c0 0300 	movt	r3, #0
    14c2:	4798      	blx	r3
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	/* Only initialize MCU clock when the project is TrustZone secure project  */
	init_mcu();
#endif

	Interface_init();
    14c4:	f241 4387 	movw	r3, #5255	; 0x1487
    14c8:	f2c0 0300 	movt	r3, #0
    14cc:	4798      	blx	r3
}
    14ce:	bd10      	pop	{r4, pc}

000014d0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    14d0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    14d2:	f240 1340 	movw	r3, #320	; 0x140
    14d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    14da:	681c      	ldr	r4, [r3, #0]
    14dc:	f241 6301 	movw	r3, #5633	; 0x1601
    14e0:	f2c0 0300 	movt	r3, #0
    14e4:	4798      	blx	r3
    14e6:	0001      	movs	r1, r0
    14e8:	0020      	movs	r0, r4
    14ea:	f241 632f 	movw	r3, #5679	; 0x162f
    14ee:	f2c0 0300 	movt	r3, #0
    14f2:	4798      	blx	r3
}
    14f4:	bd10      	pop	{r4, pc}

000014f6 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    14f6:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    14f8:	f240 1340 	movw	r3, #320	; 0x140
    14fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1500:	681c      	ldr	r4, [r3, #0]
    1502:	f241 6317 	movw	r3, #5655	; 0x1617
    1506:	f2c0 0300 	movt	r3, #0
    150a:	4798      	blx	r3
    150c:	0001      	movs	r1, r0
    150e:	0020      	movs	r0, r4
    1510:	f241 632f 	movw	r3, #5679	; 0x162f
    1514:	f2c0 0300 	movt	r3, #0
    1518:	4798      	blx	r3
}
    151a:	bd10      	pop	{r4, pc}

0000151c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    151c:	b510      	push	{r4, lr}
    151e:	b084      	sub	sp, #16
    1520:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1522:	ab01      	add	r3, sp, #4
    1524:	3814      	subs	r0, #20
    1526:	8b82      	ldrh	r2, [r0, #28]
    1528:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    152a:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
    152c:	4a06      	ldr	r2, [pc, #24]	; (1548 <i2c_m_sync_write+0x2c>)
    152e:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
    1530:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1532:	0019      	movs	r1, r3
    1534:	f641 3365 	movw	r3, #7013	; 0x1b65
    1538:	f2c0 0300 	movt	r3, #0
    153c:	4798      	blx	r3

	if (ret) {
    153e:	b900      	cbnz	r0, 1542 <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
    1540:	0020      	movs	r0, r4
}
    1542:	b004      	add	sp, #16
    1544:	bd10      	pop	{r4, pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	ffff8000 	.word	0xffff8000

0000154c <i2c_m_sync_read>:
{
    154c:	b510      	push	{r4, lr}
    154e:	b084      	sub	sp, #16
    1550:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
    1552:	ab01      	add	r3, sp, #4
    1554:	3814      	subs	r0, #20
    1556:	8b82      	ldrh	r2, [r0, #28]
    1558:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    155a:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    155c:	4a06      	ldr	r2, [pc, #24]	; (1578 <i2c_m_sync_read+0x2c>)
    155e:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
    1560:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1562:	0019      	movs	r1, r3
    1564:	f641 3365 	movw	r3, #7013	; 0x1b65
    1568:	f2c0 0300 	movt	r3, #0
    156c:	4798      	blx	r3
	if (ret) {
    156e:	b900      	cbnz	r0, 1572 <i2c_m_sync_read+0x26>
	return n;
    1570:	0020      	movs	r0, r4
}
    1572:	b004      	add	sp, #16
    1574:	bd10      	pop	{r4, pc}
    1576:	46c0      	nop			; (mov r8, r8)
    1578:	ffff8001 	.word	0xffff8001

0000157c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    157c:	b570      	push	{r4, r5, r6, lr}
    157e:	0004      	movs	r4, r0
    1580:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    1582:	f643 2130 	movw	r1, #14896	; 0x3a30
    1586:	f2c0 0100 	movt	r1, #0
    158a:	1e43      	subs	r3, r0, #1
    158c:	4198      	sbcs	r0, r3
    158e:	b2c0      	uxtb	r0, r0
    1590:	225e      	movs	r2, #94	; 0x5e
    1592:	f241 53fb 	movw	r3, #5627	; 0x15fb
    1596:	f2c0 0300 	movt	r3, #0
    159a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    159c:	0029      	movs	r1, r5
    159e:	0020      	movs	r0, r4
    15a0:	f641 03a5 	movw	r3, #6309	; 0x18a5
    15a4:	f2c0 0300 	movt	r3, #0
    15a8:	4798      	blx	r3
	if (init_status) {
    15aa:	b948      	cbnz	r0, 15c0 <i2c_m_sync_init+0x44>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    15ac:	f241 534d 	movw	r3, #5453	; 0x154d
    15b0:	f2c0 0300 	movt	r3, #0
    15b4:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    15b6:	f241 531d 	movw	r3, #5405	; 0x151d
    15ba:	f2c0 0300 	movt	r3, #0
    15be:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
    15c0:	bd70      	pop	{r4, r5, r6, pc}

000015c2 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    15c2:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
    15c4:	f641 03d9 	movw	r3, #6361	; 0x18d9
    15c8:	f2c0 0300 	movt	r3, #0
    15cc:	4798      	blx	r3
}
    15ce:	bd10      	pop	{r4, pc}

000015d0 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    15d0:	b510      	push	{r4, lr}
	return _i2c_m_sync_disable(&i2c->device);
    15d2:	f641 1357 	movw	r3, #6487	; 0x1957
    15d6:	f2c0 0300 	movt	r3, #0
    15da:	4798      	blx	r3
}
    15dc:	bd10      	pop	{r4, pc}

000015de <i2c_m_sync_set_baudrate>:

/**
 * \brief Sync version of i2c set baudrate
 */
int32_t i2c_m_sync_set_baudrate(struct i2c_m_sync_desc *i2c, uint32_t clkrate, uint32_t baudrate)
{
    15de:	b510      	push	{r4, lr}
	return _i2c_m_sync_set_baudrate(&i2c->device, clkrate, baudrate);
    15e0:	f641 13a1 	movw	r3, #6561	; 0x19a1
    15e4:	f2c0 0300 	movt	r3, #0
    15e8:	4798      	blx	r3
}
    15ea:	bd10      	pop	{r4, pc}

000015ec <i2c_m_sync_transfer>:

/**
 * \brief Sync version of i2c transfer command
 */
int32_t i2c_m_sync_transfer(struct i2c_m_sync_desc *const i2c, struct _i2c_m_msg *msg)
{
    15ec:	b510      	push	{r4, lr}
	return _i2c_m_sync_transfer(&i2c->device, msg);
    15ee:	f641 3365 	movw	r3, #7013	; 0x1b65
    15f2:	f2c0 0300 	movt	r3, #0
    15f6:	4798      	blx	r3
}
    15f8:	bd10      	pop	{r4, pc}

000015fa <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    15fa:	b900      	cbnz	r0, 15fe <assert+0x4>
		__asm("BKPT #0");
    15fc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    15fe:	4770      	bx	lr

00001600 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    1600:	0003      	movs	r3, r0
		return (us * (freq / 10000) + 299) / 300;
    1602:	f240 1090 	movw	r0, #400	; 0x190
    1606:	4358      	muls	r0, r3
    1608:	302c      	adds	r0, #44	; 0x2c
    160a:	30ff      	adds	r0, #255	; 0xff
    160c:	f240 132c 	movw	r3, #300	; 0x12c
    1610:	fbb0 f0f3 	udiv	r0, r0, r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1614:	4770      	bx	lr

00001616 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    1616:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
    1618:	f240 1090 	movw	r0, #400	; 0x190
    161c:	4358      	muls	r0, r3
    161e:	3002      	adds	r0, #2
    1620:	2303      	movs	r3, #3
    1622:	fbb0 f0f3 	udiv	r0, r0, r3
    1626:	0083      	lsls	r3, r0, #2
    1628:	1818      	adds	r0, r3, r0
    162a:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    162c:	4770      	bx	lr

0000162e <_delay_cycles>:
#if defined(__GNUC__) && (__ARMCOMPILER_VERSION > 6000000) /*  Keil MDK with ARM Compiler 6 */
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    162e:	3901      	subs	r1, #1
    1630:	d8fd      	bhi.n	162e <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    1632:	4770      	bx	lr

00001634 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1634:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1636:	f245 0300 	movw	r3, #20480	; 0x5000
    163a:	f2c4 1300 	movt	r3, #16640	; 0x4100
    163e:	685a      	ldr	r2, [r3, #4]
    1640:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL_SEC, CONF_NVM_WAIT_STATE);
#else
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
#endif

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
    1642:	2000      	movs	r0, #0
    1644:	f241 7303 	movw	r3, #5891	; 0x1703
    1648:	f2c0 0300 	movt	r3, #0
    164c:	4798      	blx	r3

	_osc32kctrl_init_sources();
    164e:	f241 63bb 	movw	r3, #5819	; 0x16bb
    1652:	f2c0 0300 	movt	r3, #0
    1656:	4798      	blx	r3
	_oscctrl_init_sources();
    1658:	f241 63d3 	movw	r3, #5843	; 0x16d3
    165c:	f2c0 0300 	movt	r3, #0
    1660:	4798      	blx	r3
	_mclk_init();
    1662:	f241 63ad 	movw	r3, #5805	; 0x16ad
    1666:	f2c0 0300 	movt	r3, #0
    166a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    166c:	f241 7301 	movw	r3, #5889	; 0x1701
    1670:	f2c0 0300 	movt	r3, #0
    1674:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1676:	201f      	movs	r0, #31
    1678:	f241 6385 	movw	r3, #5765	; 0x1685
    167c:	f2c0 0300 	movt	r3, #0
    1680:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    1682:	bd10      	pop	{r4, pc}

00001684 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1684:	07c3      	lsls	r3, r0, #31
    1686:	d510      	bpl.n	16aa <_gclk_init_generators_by_fref+0x26>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1688:	f641 4300 	movw	r3, #7168	; 0x1c00
    168c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1690:	f240 1205 	movw	r2, #261	; 0x105
    1694:	f2c0 0201 	movt	r2, #1
    1698:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    169a:	f641 4200 	movw	r2, #7168	; 0x1c00
    169e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    16a2:	217d      	movs	r1, #125	; 0x7d
    16a4:	6853      	ldr	r3, [r2, #4]
    16a6:	4219      	tst	r1, r3
    16a8:	d1fc      	bne.n	16a4 <_gclk_init_generators_by_fref+0x20>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
    16aa:	4770      	bx	lr

000016ac <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    16ac:	f640 0300 	movw	r3, #2048	; 0x800
    16b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16b4:	2201      	movs	r2, #1
    16b6:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    16b8:	4770      	bx	lr

000016ba <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    16ba:	f241 4300 	movw	r3, #5120	; 0x1400
    16be:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16c2:	69da      	ldr	r2, [r3, #28]
	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    16c4:	f641 7100 	movw	r1, #7936	; 0x1f00
    16c8:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    16ca:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    16cc:	2200      	movs	r2, #0
    16ce:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    16d0:	4770      	bx	lr

000016d2 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    16d2:	f241 0300 	movw	r3, #4096	; 0x1000
    16d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16da:	2202      	movs	r2, #2
    16dc:	761a      	strb	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    16de:	f241 0200 	movw	r2, #4096	; 0x1000
    16e2:	f2c4 0200 	movt	r2, #16384	; 0x4000
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    16e6:	2110      	movs	r1, #16
    16e8:	6913      	ldr	r3, [r2, #16]
    16ea:	4219      	tst	r1, r3
    16ec:	d0fc      	beq.n	16e8 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
    16ee:	f241 0300 	movw	r3, #4096	; 0x1000
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	7e1a      	ldrb	r2, [r3, #24]
    16f8:	2180      	movs	r1, #128	; 0x80
    16fa:	430a      	orrs	r2, r1
    16fc:	761a      	strb	r2, [r3, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    16fe:	4770      	bx	lr

00001700 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    1700:	4770      	bx	lr

00001702 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    1702:	f240 4300 	movw	r3, #1024	; 0x400
    1706:	f2c4 0300 	movt	r3, #16384	; 0x4000
    170a:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    170c:	2203      	movs	r2, #3
    170e:	4013      	ands	r3, r2
    1710:	4298      	cmp	r0, r3
    1712:	d012      	beq.n	173a <_set_performance_level+0x38>
	((Pm *)hw)->INTFLAG.reg = mask;
    1714:	f240 4200 	movw	r2, #1024	; 0x400
    1718:	f2c4 0200 	movt	r2, #16384	; 0x4000
    171c:	23ff      	movs	r3, #255	; 0xff
    171e:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    1720:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    1722:	2103      	movs	r1, #3
    1724:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
    1726:	4008      	ands	r0, r1
    1728:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
    172a:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    172c:	f240 4200 	movw	r2, #1024	; 0x400
    1730:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1734:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    1736:	2b00      	cmp	r3, #0
    1738:	d0fc      	beq.n	1734 <_set_performance_level+0x32>
			;
	}
}
    173a:	4770      	bx	lr

0000173c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    173c:	b530      	push	{r4, r5, lr}
    173e:	b085      	sub	sp, #20
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1740:	aa01      	add	r2, sp, #4
    1742:	f643 234c 	movw	r3, #14924	; 0x3a4c
    1746:	f2c0 0300 	movt	r3, #0
    174a:	cb32      	ldmia	r3!, {r1, r4, r5}
    174c:	c232      	stmia	r2!, {r1, r4, r5}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    174e:	0003      	movs	r3, r0
    1750:	9a01      	ldr	r2, [sp, #4]
    1752:	4282      	cmp	r2, r0
    1754:	d00c      	beq.n	1770 <_sercom_get_hardware_index+0x34>
    1756:	9a02      	ldr	r2, [sp, #8]
    1758:	4282      	cmp	r2, r0
    175a:	d007      	beq.n	176c <_sercom_get_hardware_index+0x30>
			return i;
		}
	}
	return 0;
    175c:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    175e:	9a03      	ldr	r2, [sp, #12]
    1760:	429a      	cmp	r2, r3
    1762:	d001      	beq.n	1768 <_sercom_get_hardware_index+0x2c>
}
    1764:	b005      	add	sp, #20
    1766:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1768:	3002      	adds	r0, #2
    176a:	e002      	b.n	1772 <_sercom_get_hardware_index+0x36>
    176c:	2001      	movs	r0, #1
    176e:	e000      	b.n	1772 <_sercom_get_hardware_index+0x36>
    1770:	2000      	movs	r0, #0
			return i;
    1772:	b2c0      	uxtb	r0, r0
    1774:	e7f6      	b.n	1764 <_sercom_get_hardware_index+0x28>

00001776 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    1776:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1778:	f241 733d 	movw	r3, #5949	; 0x173d
    177c:	f2c0 0300 	movt	r3, #0
    1780:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
    1782:	b168      	cbz	r0, 17a0 <_get_i2cm_index+0x2a>
			return i;
		}
	}

	ASSERT(false);
    1784:	f643 2170 	movw	r1, #14960	; 0x3a70
    1788:	f2c0 0100 	movt	r1, #0
    178c:	f240 32a6 	movw	r2, #934	; 0x3a6
    1790:	2000      	movs	r0, #0
    1792:	f241 53fb 	movw	r3, #5627	; 0x15fb
    1796:	f2c0 0300 	movt	r3, #0
    179a:	4798      	blx	r3
	return -1;
    179c:	2001      	movs	r0, #1
    179e:	4240      	negs	r0, r0
}
    17a0:	bd10      	pop	{r4, pc}
	...

000017a4 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    17a4:	b570      	push	{r4, r5, r6, lr}
    17a6:	0005      	movs	r5, r0
    17a8:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    17aa:	0008      	movs	r0, r1
    17ac:	f241 7377 	movw	r3, #6007	; 0x1777
    17b0:	f2c0 0300 	movt	r3, #0
    17b4:	4798      	blx	r3
    17b6:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    17b8:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    17ba:	07db      	lsls	r3, r3, #31
    17bc:	d425      	bmi.n	180a <_i2c_m_sync_init_impl+0x66>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    17be:	0043      	lsls	r3, r0, #1
    17c0:	181b      	adds	r3, r3, r0
    17c2:	00db      	lsls	r3, r3, #3
    17c4:	f643 224c 	movw	r2, #14924	; 0x3a4c
    17c8:	f2c0 0200 	movt	r2, #0
    17cc:	4694      	mov	ip, r2
    17ce:	4463      	add	r3, ip
    17d0:	6919      	ldr	r1, [r3, #16]
    17d2:	231c      	movs	r3, #28
    17d4:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17d6:	2203      	movs	r2, #3
    17d8:	69e3      	ldr	r3, [r4, #28]
    17da:	421a      	tst	r2, r3
    17dc:	d1fc      	bne.n	17d8 <_i2c_m_sync_init_impl+0x34>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    17de:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    17e0:	079b      	lsls	r3, r3, #30
    17e2:	d50b      	bpl.n	17fc <_i2c_m_sync_init_impl+0x58>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    17e4:	6823      	ldr	r3, [r4, #0]
    17e6:	2202      	movs	r2, #2
    17e8:	4393      	bics	r3, r2
    17ea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17ec:	3201      	adds	r2, #1
    17ee:	69e3      	ldr	r3, [r4, #28]
    17f0:	421a      	tst	r2, r3
    17f2:	d1fc      	bne.n	17ee <_i2c_m_sync_init_impl+0x4a>
    17f4:	2202      	movs	r2, #2
    17f6:	69e3      	ldr	r3, [r4, #28]
    17f8:	421a      	tst	r2, r3
    17fa:	d1fc      	bne.n	17f6 <_i2c_m_sync_init_impl+0x52>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    17fc:	2301      	movs	r3, #1
    17fe:	430b      	orrs	r3, r1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1800:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1802:	2203      	movs	r2, #3
    1804:	69e3      	ldr	r3, [r4, #28]
    1806:	421a      	tst	r2, r3
    1808:	d1fc      	bne.n	1804 <_i2c_m_sync_init_impl+0x60>
    180a:	2201      	movs	r2, #1
    180c:	69e3      	ldr	r3, [r4, #28]
    180e:	421a      	tst	r2, r3
    1810:	d1fc      	bne.n	180c <_i2c_m_sync_init_impl+0x68>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1812:	0043      	lsls	r3, r0, #1
    1814:	181b      	adds	r3, r3, r0
    1816:	00db      	lsls	r3, r3, #3
    1818:	f643 224c 	movw	r2, #14924	; 0x3a4c
    181c:	f2c0 0200 	movt	r2, #0
    1820:	4694      	mov	ip, r2
    1822:	4463      	add	r3, ip
    1824:	6919      	ldr	r1, [r3, #16]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1826:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1828:	2203      	movs	r2, #3
    182a:	69e3      	ldr	r3, [r4, #28]
    182c:	421a      	tst	r2, r3
    182e:	d1fc      	bne.n	182a <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1830:	0043      	lsls	r3, r0, #1
    1832:	181b      	adds	r3, r3, r0
    1834:	00db      	lsls	r3, r3, #3
    1836:	f643 224c 	movw	r2, #14924	; 0x3a4c
    183a:	f2c0 0200 	movt	r2, #0
    183e:	4694      	mov	ip, r2
    1840:	4463      	add	r3, ip
    1842:	695b      	ldr	r3, [r3, #20]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1844:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1846:	2204      	movs	r2, #4
    1848:	69e3      	ldr	r3, [r4, #28]
    184a:	421a      	tst	r2, r3
    184c:	d1fc      	bne.n	1848 <_i2c_m_sync_init_impl+0xa4>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    184e:	0043      	lsls	r3, r0, #1
    1850:	181b      	adds	r3, r3, r0
    1852:	00db      	lsls	r3, r3, #3
    1854:	f643 224c 	movw	r2, #14924	; 0x3a4c
    1858:	f2c0 0200 	movt	r2, #0
    185c:	4694      	mov	ip, r2
    185e:	4463      	add	r3, ip
    1860:	699b      	ldr	r3, [r3, #24]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1862:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1864:	0189      	lsls	r1, r1, #6
    1866:	0f89      	lsrs	r1, r1, #30
    1868:	81a9      	strh	r1, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    186a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    186c:	4e0c      	ldr	r6, [pc, #48]	; (18a0 <_i2c_m_sync_init_impl+0xfc>)
    186e:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1870:	2301      	movs	r3, #1
    1872:	428b      	cmp	r3, r1
    1874:	419b      	sbcs	r3, r3
    1876:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1878:	039b      	lsls	r3, r3, #14
    187a:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    187c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    187e:	2204      	movs	r2, #4
    1880:	69e3      	ldr	r3, [r4, #28]
    1882:	421a      	tst	r2, r3
    1884:	d1fc      	bne.n	1880 <_i2c_m_sync_init_impl+0xdc>

	service->trise = _i2cms[i].trise;
    1886:	0043      	lsls	r3, r0, #1
    1888:	1818      	adds	r0, r3, r0
    188a:	00c0      	lsls	r0, r0, #3
    188c:	f643 234c 	movw	r3, #14924	; 0x3a4c
    1890:	f2c0 0300 	movt	r3, #0
    1894:	469c      	mov	ip, r3
    1896:	4460      	add	r0, ip
    1898:	8bc3      	ldrh	r3, [r0, #30]
    189a:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    189c:	2000      	movs	r0, #0
    189e:	bd70      	pop	{r4, r5, r6, pc}
    18a0:	ffffbfff 	.word	0xffffbfff

000018a4 <_i2c_m_sync_init>:
{
    18a4:	b570      	push	{r4, r5, r6, lr}
    18a6:	0004      	movs	r4, r0
    18a8:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    18aa:	f643 2170 	movw	r1, #14960	; 0x3a70
    18ae:	f2c0 0100 	movt	r1, #0
    18b2:	1e43      	subs	r3, r0, #1
    18b4:	4198      	sbcs	r0, r3
    18b6:	b2c0      	uxtb	r0, r0
    18b8:	f240 5218 	movw	r2, #1304	; 0x518
    18bc:	f241 53fb 	movw	r3, #5627	; 0x15fb
    18c0:	f2c0 0300 	movt	r3, #0
    18c4:	4798      	blx	r3
	i2c_dev->hw = hw;
    18c6:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    18c8:	0029      	movs	r1, r5
    18ca:	0020      	movs	r0, r4
    18cc:	f241 73a5 	movw	r3, #6053	; 0x17a5
    18d0:	f2c0 0300 	movt	r3, #0
    18d4:	4798      	blx	r3
}
    18d6:	bd70      	pop	{r4, r5, r6, pc}

000018d8 <_i2c_m_sync_enable>:
{
    18d8:	b570      	push	{r4, r5, r6, lr}
    18da:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
    18dc:	f643 2670 	movw	r6, #14960	; 0x3a70
    18e0:	f2c0 0600 	movt	r6, #0
    18e4:	1e43      	subs	r3, r0, #1
    18e6:	4198      	sbcs	r0, r3
    18e8:	b2c0      	uxtb	r0, r0
    18ea:	f240 5235 	movw	r2, #1333	; 0x535
    18ee:	0031      	movs	r1, r6
    18f0:	f241 55fb 	movw	r5, #5627	; 0x15fb
    18f4:	f2c0 0500 	movt	r5, #0
    18f8:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    18fa:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    18fc:	0020      	movs	r0, r4
    18fe:	1e43      	subs	r3, r0, #1
    1900:	4198      	sbcs	r0, r3
    1902:	b2c0      	uxtb	r0, r0
    1904:	f240 6205 	movw	r2, #1541	; 0x605
    1908:	0031      	movs	r1, r6
    190a:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    190c:	6823      	ldr	r3, [r4, #0]
    190e:	2202      	movs	r2, #2
    1910:	4313      	orrs	r3, r2
    1912:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1914:	3201      	adds	r2, #1
    1916:	69e3      	ldr	r3, [r4, #28]
    1918:	421a      	tst	r2, r3
    191a:	d1fc      	bne.n	1916 <_i2c_m_sync_enable+0x3e>
    191c:	2504      	movs	r5, #4
    191e:	2204      	movs	r2, #4
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1920:	2003      	movs	r0, #3
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1922:	2610      	movs	r6, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1924:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1928:	69e3      	ldr	r3, [r4, #28]
    192a:	421a      	tst	r2, r3
    192c:	d1fc      	bne.n	1928 <_i2c_m_sync_enable+0x50>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    192e:	8b63      	ldrh	r3, [r4, #26]
    1930:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1932:	4003      	ands	r3, r0
    1934:	2b01      	cmp	r3, #1
    1936:	d009      	beq.n	194c <_i2c_m_sync_enable+0x74>
    1938:	3901      	subs	r1, #1
		if (timeout <= 0) {
    193a:	2900      	cmp	r1, #0
    193c:	d1f4      	bne.n	1928 <_i2c_m_sync_enable+0x50>
    193e:	3d01      	subs	r5, #1
			if (--timeout_attempt)
    1940:	b135      	cbz	r5, 1950 <_i2c_m_sync_enable+0x78>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1942:	8366      	strh	r6, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1944:	69e3      	ldr	r3, [r4, #28]
    1946:	421a      	tst	r2, r3
    1948:	d1fc      	bne.n	1944 <_i2c_m_sync_enable+0x6c>
    194a:	e7eb      	b.n	1924 <_i2c_m_sync_enable+0x4c>
	return ERR_NONE;
    194c:	2000      	movs	r0, #0
}
    194e:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    1950:	2006      	movs	r0, #6
    1952:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
    1954:	e7fb      	b.n	194e <_i2c_m_sync_enable+0x76>

00001956 <_i2c_m_sync_disable>:
{
    1956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1958:	0007      	movs	r7, r0
	void *hw = i2c_dev->hw;
    195a:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    195c:	f643 2670 	movw	r6, #14960	; 0x3a70
    1960:	f2c0 0600 	movt	r6, #0
    1964:	1e43      	subs	r3, r0, #1
    1966:	4198      	sbcs	r0, r3
    1968:	b2c0      	uxtb	r0, r0
    196a:	f240 5243 	movw	r2, #1347	; 0x543
    196e:	0031      	movs	r1, r6
    1970:	f241 55fb 	movw	r5, #5627	; 0x15fb
    1974:	f2c0 0500 	movt	r5, #0
    1978:	47a8      	blx	r5
	ASSERT(i2c_dev->hw);
    197a:	6938      	ldr	r0, [r7, #16]
    197c:	1e43      	subs	r3, r0, #1
    197e:	4198      	sbcs	r0, r3
    1980:	b2c0      	uxtb	r0, r0
    1982:	f240 5244 	movw	r2, #1348	; 0x544
    1986:	0031      	movs	r1, r6
    1988:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    198a:	6823      	ldr	r3, [r4, #0]
    198c:	2202      	movs	r2, #2
    198e:	4393      	bics	r3, r2
    1990:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1992:	3201      	adds	r2, #1
    1994:	69e3      	ldr	r3, [r4, #28]
    1996:	421a      	tst	r2, r3
    1998:	d1fc      	bne.n	1994 <_i2c_m_sync_disable+0x3e>
}
    199a:	2000      	movs	r0, #0
    199c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000019a0 <_i2c_m_sync_set_baudrate>:
{
    19a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19a2:	46de      	mov	lr, fp
    19a4:	4657      	mov	r7, sl
    19a6:	464e      	mov	r6, r9
    19a8:	4645      	mov	r5, r8
    19aa:	b5e0      	push	{r5, r6, r7, lr}
    19ac:	b085      	sub	sp, #20
    19ae:	0006      	movs	r6, r0
    19b0:	0015      	movs	r5, r2
	void *   hw = i2c_dev->hw;
    19b2:	6904      	ldr	r4, [r0, #16]
    19b4:	2203      	movs	r2, #3
    19b6:	69e3      	ldr	r3, [r4, #28]
    19b8:	421a      	tst	r2, r3
    19ba:	d1fc      	bne.n	19b6 <_i2c_m_sync_set_baudrate+0x16>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    19bc:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomi2cm_get_CTRLA_ENABLE_bit(hw)) {
    19be:	079b      	lsls	r3, r3, #30
    19c0:	d500      	bpl.n	19c4 <_i2c_m_sync_set_baudrate+0x24>
    19c2:	e0c7      	b.n	1b54 <_i2c_m_sync_set_baudrate+0x1b4>
	tmp     = _get_i2cm_index(hw);
    19c4:	0020      	movs	r0, r4
    19c6:	f241 7377 	movw	r3, #6007	; 0x1777
    19ca:	f2c0 0300 	movt	r3, #0
    19ce:	4798      	blx	r3
	if (i2c_dev->service.mode == I2C_STANDARD_MODE) {
    19d0:	89b3      	ldrh	r3, [r6, #12]
    19d2:	b1db      	cbz	r3, 1a0c <_i2c_m_sync_set_baudrate+0x6c>
	} else if (i2c_dev->service.mode == I2C_FASTMODE) {
    19d4:	2b01      	cmp	r3, #1
    19d6:	d06b      	beq.n	1ab0 <_i2c_m_sync_set_baudrate+0x110>
	} else if (i2c_dev->service.mode == I2C_HIGHSPEED_MODE) {
    19d8:	2b02      	cmp	r3, #2
    19da:	d000      	beq.n	19de <_i2c_m_sync_set_baudrate+0x3e>
    19dc:	e0bd      	b.n	1b5a <_i2c_m_sync_set_baudrate+0x1ba>
		tmp = (clkrate - 2 * baudrate) / (2 * baudrate);
    19de:	006d      	lsls	r5, r5, #1
	tmp = ((Sercom *)hw)->I2CM.BAUD.reg;
    19e0:	68e3      	ldr	r3, [r4, #12]
	tmp &= ~SERCOM_I2CM_BAUD_HSBAUD_Msk;
    19e2:	495f      	ldr	r1, [pc, #380]	; (1b60 <_i2c_m_sync_set_baudrate+0x1c0>)
    19e4:	4019      	ands	r1, r3
    19e6:	f640 72a0 	movw	r2, #4000	; 0xfa0
    19ea:	1b52      	subs	r2, r2, r5
    19ec:	fbb2 f3f5 	udiv	r3, r2, r5
	tmp |= SERCOM_I2CM_BAUD_HSBAUD(data);
    19f0:	041b      	lsls	r3, r3, #16
    19f2:	25ff      	movs	r5, #255	; 0xff
    19f4:	042d      	lsls	r5, r5, #16
    19f6:	402b      	ands	r3, r5
    19f8:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.BAUD.reg = tmp;
    19fa:	60e3      	str	r3, [r4, #12]
	return ERR_NONE;
    19fc:	2000      	movs	r0, #0
}
    19fe:	b005      	add	sp, #20
    1a00:	bc3c      	pop	{r2, r3, r4, r5}
    1a02:	4690      	mov	r8, r2
    1a04:	4699      	mov	r9, r3
    1a06:	46a2      	mov	sl, r4
    1a08:	46ab      	mov	fp, r5
    1a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tmp = ((Sercom *)hw)->I2CM.BAUD.reg;
    1a0c:	68e7      	ldr	r7, [r4, #12]
	tmp &= ~SERCOM_I2CM_BAUD_BAUD_Msk;
    1a0e:	f240 08ff 	movw	r8, #255	; 0xff
    1a12:	4643      	mov	r3, r8
    1a14:	439f      	bics	r7, r3
		tmp = (uint32_t)((clkrate - 10 * baudrate - baudrate * clkrate * (i2c_dev->service.trise * 0.000000001))
    1a16:	00a8      	lsls	r0, r5, #2
    1a18:	1940      	adds	r0, r0, r5
    1a1a:	0040      	lsls	r0, r0, #1
    1a1c:	f640 7ba0 	movw	fp, #4000	; 0xfa0
    1a20:	465b      	mov	r3, fp
    1a22:	1a18      	subs	r0, r3, r0
    1a24:	f243 4945 	movw	r9, #13381	; 0x3445
    1a28:	f2c0 0900 	movt	r9, #0
    1a2c:	47c8      	blx	r9
    1a2e:	9000      	str	r0, [sp, #0]
    1a30:	9101      	str	r1, [sp, #4]
    1a32:	89f0      	ldrh	r0, [r6, #14]
    1a34:	f243 33c1 	movw	r3, #13249	; 0x33c1
    1a38:	f2c0 0300 	movt	r3, #0
    1a3c:	4798      	blx	r3
    1a3e:	f242 76bd 	movw	r6, #10173	; 0x27bd
    1a42:	f2c0 0600 	movt	r6, #0
    1a46:	f24d 6295 	movw	r2, #54933	; 0xd695
    1a4a:	f6ce 0226 	movt	r2, #59430	; 0xe826
    1a4e:	f642 630b 	movw	r3, #11787	; 0x2e0b
    1a52:	f6c3 6311 	movt	r3, #15889	; 0x3e11
    1a56:	47b0      	blx	r6
    1a58:	9002      	str	r0, [sp, #8]
    1a5a:	9103      	str	r1, [sp, #12]
    1a5c:	465b      	mov	r3, fp
    1a5e:	436b      	muls	r3, r5
    1a60:	0018      	movs	r0, r3
    1a62:	47c8      	blx	r9
    1a64:	0002      	movs	r2, r0
    1a66:	000b      	movs	r3, r1
    1a68:	9802      	ldr	r0, [sp, #8]
    1a6a:	9903      	ldr	r1, [sp, #12]
    1a6c:	47b0      	blx	r6
    1a6e:	0002      	movs	r2, r0
    1a70:	000b      	movs	r3, r1
    1a72:	f642 46cd 	movw	r6, #11469	; 0x2ccd
    1a76:	f2c0 0600 	movt	r6, #0
    1a7a:	9800      	ldr	r0, [sp, #0]
    1a7c:	9901      	ldr	r1, [sp, #4]
    1a7e:	47b0      	blx	r6
    1a80:	9000      	str	r0, [sp, #0]
    1a82:	9101      	str	r1, [sp, #4]
		                 / (2 * baudrate));
    1a84:	0068      	lsls	r0, r5, #1
    1a86:	47c8      	blx	r9
    1a88:	0002      	movs	r2, r0
    1a8a:	000b      	movs	r3, r1
    1a8c:	f242 156d 	movw	r5, #8557	; 0x216d
    1a90:	f2c0 0500 	movt	r5, #0
    1a94:	9800      	ldr	r0, [sp, #0]
    1a96:	9901      	ldr	r1, [sp, #4]
    1a98:	47a8      	blx	r5
		tmp = (uint32_t)((clkrate - 10 * baudrate - baudrate * clkrate * (i2c_dev->service.trise * 0.000000001))
    1a9a:	f242 1331 	movw	r3, #8497	; 0x2131
    1a9e:	f2c0 0300 	movt	r3, #0
    1aa2:	4798      	blx	r3
	tmp |= SERCOM_I2CM_BAUD_BAUD(data);
    1aa4:	4643      	mov	r3, r8
    1aa6:	4018      	ands	r0, r3
    1aa8:	4338      	orrs	r0, r7
	((Sercom *)hw)->I2CM.BAUD.reg = tmp;
    1aaa:	60e0      	str	r0, [r4, #12]
	return ERR_NONE;
    1aac:	2000      	movs	r0, #0
    1aae:	e7a6      	b.n	19fe <_i2c_m_sync_set_baudrate+0x5e>
	tmp = ((Sercom *)hw)->I2CM.BAUD.reg;
    1ab0:	68e7      	ldr	r7, [r4, #12]
	tmp &= ~SERCOM_I2CM_BAUD_BAUD_Msk;
    1ab2:	f240 08ff 	movw	r8, #255	; 0xff
    1ab6:	4643      	mov	r3, r8
    1ab8:	439f      	bics	r7, r3
		tmp = (uint32_t)((clkrate - 10 * baudrate - baudrate * clkrate * (i2c_dev->service.trise * 0.000000001))
    1aba:	00a8      	lsls	r0, r5, #2
    1abc:	1940      	adds	r0, r0, r5
    1abe:	0040      	lsls	r0, r0, #1
    1ac0:	f640 7aa0 	movw	sl, #4000	; 0xfa0
    1ac4:	4653      	mov	r3, sl
    1ac6:	1a18      	subs	r0, r3, r0
    1ac8:	f243 4945 	movw	r9, #13381	; 0x3445
    1acc:	f2c0 0900 	movt	r9, #0
    1ad0:	47c8      	blx	r9
    1ad2:	9000      	str	r0, [sp, #0]
    1ad4:	9101      	str	r1, [sp, #4]
    1ad6:	89f0      	ldrh	r0, [r6, #14]
    1ad8:	f243 33c1 	movw	r3, #13249	; 0x33c1
    1adc:	f2c0 0300 	movt	r3, #0
    1ae0:	4798      	blx	r3
    1ae2:	f242 76bd 	movw	r6, #10173	; 0x27bd
    1ae6:	f2c0 0600 	movt	r6, #0
    1aea:	f24d 6295 	movw	r2, #54933	; 0xd695
    1aee:	f6ce 0226 	movt	r2, #59430	; 0xe826
    1af2:	f642 630b 	movw	r3, #11787	; 0x2e0b
    1af6:	f6c3 6311 	movt	r3, #15889	; 0x3e11
    1afa:	47b0      	blx	r6
    1afc:	9002      	str	r0, [sp, #8]
    1afe:	9103      	str	r1, [sp, #12]
    1b00:	4653      	mov	r3, sl
    1b02:	436b      	muls	r3, r5
    1b04:	0018      	movs	r0, r3
    1b06:	47c8      	blx	r9
    1b08:	0002      	movs	r2, r0
    1b0a:	000b      	movs	r3, r1
    1b0c:	9802      	ldr	r0, [sp, #8]
    1b0e:	9903      	ldr	r1, [sp, #12]
    1b10:	47b0      	blx	r6
    1b12:	0002      	movs	r2, r0
    1b14:	000b      	movs	r3, r1
    1b16:	f642 46cd 	movw	r6, #11469	; 0x2ccd
    1b1a:	f2c0 0600 	movt	r6, #0
    1b1e:	9800      	ldr	r0, [sp, #0]
    1b20:	9901      	ldr	r1, [sp, #4]
    1b22:	47b0      	blx	r6
    1b24:	9000      	str	r0, [sp, #0]
    1b26:	9101      	str	r1, [sp, #4]
		                 / (2 * baudrate));
    1b28:	0068      	lsls	r0, r5, #1
    1b2a:	47c8      	blx	r9
    1b2c:	0002      	movs	r2, r0
    1b2e:	000b      	movs	r3, r1
    1b30:	f242 156d 	movw	r5, #8557	; 0x216d
    1b34:	f2c0 0500 	movt	r5, #0
    1b38:	9800      	ldr	r0, [sp, #0]
    1b3a:	9901      	ldr	r1, [sp, #4]
    1b3c:	47a8      	blx	r5
		tmp = (uint32_t)((clkrate - 10 * baudrate - baudrate * clkrate * (i2c_dev->service.trise * 0.000000001))
    1b3e:	f242 1331 	movw	r3, #8497	; 0x2131
    1b42:	f2c0 0300 	movt	r3, #0
    1b46:	4798      	blx	r3
	tmp |= SERCOM_I2CM_BAUD_BAUD(data);
    1b48:	4643      	mov	r3, r8
    1b4a:	4018      	ands	r0, r3
    1b4c:	4338      	orrs	r0, r7
	((Sercom *)hw)->I2CM.BAUD.reg = tmp;
    1b4e:	60e0      	str	r0, [r4, #12]
	return ERR_NONE;
    1b50:	2000      	movs	r0, #0
    1b52:	e754      	b.n	19fe <_i2c_m_sync_set_baudrate+0x5e>
		return ERR_DENIED;
    1b54:	2011      	movs	r0, #17
    1b56:	4240      	negs	r0, r0
    1b58:	e751      	b.n	19fe <_i2c_m_sync_set_baudrate+0x5e>
		return ERR_INVALID_ARG;
    1b5a:	200d      	movs	r0, #13
    1b5c:	4240      	negs	r0, r0
    1b5e:	e74e      	b.n	19fe <_i2c_m_sync_set_baudrate+0x5e>
    1b60:	ff00ffff 	.word	0xff00ffff

00001b64 <_i2c_m_sync_transfer>:
{
    1b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b66:	46de      	mov	lr, fp
    1b68:	4657      	mov	r7, sl
    1b6a:	464e      	mov	r6, r9
    1b6c:	4645      	mov	r5, r8
    1b6e:	b5e0      	push	{r5, r6, r7, lr}
    1b70:	b083      	sub	sp, #12
    1b72:	0005      	movs	r5, r0
    1b74:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
    1b76:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1b78:	0006      	movs	r6, r0
    1b7a:	1e73      	subs	r3, r6, #1
    1b7c:	419e      	sbcs	r6, r3
    1b7e:	b2f3      	uxtb	r3, r6
    1b80:	9301      	str	r3, [sp, #4]
    1b82:	f643 2670 	movw	r6, #14960	; 0x3a70
    1b86:	f2c0 0600 	movt	r6, #0
    1b8a:	f240 52d0 	movw	r2, #1488	; 0x5d0
    1b8e:	0031      	movs	r1, r6
    1b90:	0018      	movs	r0, r3
    1b92:	f241 57fb 	movw	r7, #5627	; 0x15fb
    1b96:	f2c0 0700 	movt	r7, #0
    1b9a:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1b9c:	6928      	ldr	r0, [r5, #16]
    1b9e:	1e43      	subs	r3, r0, #1
    1ba0:	4198      	sbcs	r0, r3
    1ba2:	b2c0      	uxtb	r0, r0
    1ba4:	f240 52d1 	movw	r2, #1489	; 0x5d1
    1ba8:	0031      	movs	r1, r6
    1baa:	47b8      	blx	r7
	ASSERT(msg);
    1bac:	4640      	mov	r0, r8
    1bae:	1e43      	subs	r3, r0, #1
    1bb0:	4198      	sbcs	r0, r3
    1bb2:	b2c0      	uxtb	r0, r0
    1bb4:	f240 52d2 	movw	r2, #1490	; 0x5d2
    1bb8:	0031      	movs	r1, r6
    1bba:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1bbc:	886b      	ldrh	r3, [r5, #2]
    1bbe:	05db      	lsls	r3, r3, #23
    1bc0:	d500      	bpl.n	1bc4 <_i2c_m_sync_transfer+0x60>
    1bc2:	e21e      	b.n	2002 <_i2c_m_sync_transfer+0x49e>
	msg->flags |= I2C_M_BUSY;
    1bc4:	4643      	mov	r3, r8
    1bc6:	885b      	ldrh	r3, [r3, #2]
    1bc8:	f240 1200 	movw	r2, #256	; 0x100
    1bcc:	4313      	orrs	r3, r2
    1bce:	4642      	mov	r2, r8
    1bd0:	8053      	strh	r3, [r2, #2]
	i2c_dev->service.msg = *msg;
    1bd2:	002b      	movs	r3, r5
    1bd4:	ca43      	ldmia	r2!, {r0, r1, r6}
    1bd6:	c343      	stmia	r3!, {r0, r1, r6}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1bd8:	6863      	ldr	r3, [r4, #4]
    1bda:	f240 1200 	movw	r2, #256	; 0x100
    1bde:	4313      	orrs	r3, r2
    1be0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1be2:	3afc      	subs	r2, #252	; 0xfc
    1be4:	69e3      	ldr	r3, [r4, #28]
    1be6:	421a      	tst	r2, r3
    1be8:	d1fc      	bne.n	1be4 <_i2c_m_sync_transfer+0x80>
	void *             hw    = i2c_dev->hw;
    1bea:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1bec:	683b      	ldr	r3, [r7, #0]
    1bee:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
    1bf0:	f643 2170 	movw	r1, #14960	; 0x3a70
    1bf4:	f2c0 0100 	movt	r1, #0
    1bf8:	f240 52a5 	movw	r2, #1445	; 0x5a5
    1bfc:	9801      	ldr	r0, [sp, #4]
    1bfe:	f241 53fb 	movw	r3, #5627	; 0x15fb
    1c02:	f2c0 0300 	movt	r3, #0
    1c06:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1c08:	686b      	ldr	r3, [r5, #4]
    1c0a:	2b01      	cmp	r3, #1
    1c0c:	d05c      	beq.n	1cc8 <_i2c_m_sync_transfer+0x164>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1c0e:	687b      	ldr	r3, [r7, #4]
    1c10:	4ab6      	ldr	r2, [pc, #728]	; (1eec <_i2c_m_sync_transfer+0x388>)
    1c12:	4013      	ands	r3, r2
    1c14:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c16:	2204      	movs	r2, #4
    1c18:	69fb      	ldr	r3, [r7, #28]
    1c1a:	421a      	tst	r2, r3
    1c1c:	d1fc      	bne.n	1c18 <_i2c_m_sync_transfer+0xb4>
	if (msg->addr & I2C_M_TEN) {
    1c1e:	882b      	ldrh	r3, [r5, #0]
    1c20:	055a      	lsls	r2, r3, #21
    1c22:	d55e      	bpl.n	1ce2 <_i2c_m_sync_transfer+0x17e>
		if (msg->flags & I2C_M_RD) {
    1c24:	886a      	ldrh	r2, [r5, #2]
    1c26:	07d2      	lsls	r2, r2, #31
    1c28:	d504      	bpl.n	1c34 <_i2c_m_sync_transfer+0xd0>
			msg->flags |= I2C_M_TEN;
    1c2a:	886a      	ldrh	r2, [r5, #2]
    1c2c:	f240 4100 	movw	r1, #1024	; 0x400
    1c30:	430a      	orrs	r2, r1
    1c32:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    1c34:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1c36:	f240 71fe 	movw	r1, #2046	; 0x7fe
    1c3a:	4019      	ands	r1, r3
    1c3c:	2204      	movs	r2, #4
    1c3e:	69fb      	ldr	r3, [r7, #28]
    1c40:	421a      	tst	r2, r3
    1c42:	d1fc      	bne.n	1c3e <_i2c_m_sync_transfer+0xda>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1c46:	f244 0300 	movw	r3, #16384	; 0x4000
    1c4a:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    1c4c:	f248 0200 	movw	r2, #32768	; 0x8000
    1c50:	4313      	orrs	r3, r2
    1c52:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1c54:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c56:	2204      	movs	r2, #4
    1c58:	69fb      	ldr	r3, [r7, #28]
    1c5a:	421a      	tst	r2, r3
    1c5c:	d1fc      	bne.n	1c58 <_i2c_m_sync_transfer+0xf4>
	void *   hw      = i2c_dev->hw;
    1c5e:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1c60:	7e0b      	ldrb	r3, [r1, #24]
    1c62:	b2db      	uxtb	r3, r3
    1c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1c68:	2003      	movs	r0, #3
    1c6a:	4218      	tst	r0, r3
    1c6c:	d104      	bne.n	1c78 <_i2c_m_sync_transfer+0x114>
    1c6e:	7e0b      	ldrb	r3, [r1, #24]
    1c70:	b2db      	uxtb	r3, r3
    1c72:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
    1c74:	2a00      	cmp	r2, #0
    1c76:	d1f8      	bne.n	1c6a <_i2c_m_sync_transfer+0x106>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1c78:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c7a:	2104      	movs	r1, #4
    1c7c:	69fa      	ldr	r2, [r7, #28]
    1c7e:	4211      	tst	r1, r2
    1c80:	d1fc      	bne.n	1c7c <_i2c_m_sync_transfer+0x118>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1c82:	8b7a      	ldrh	r2, [r7, #26]
    1c84:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    1c86:	07d9      	lsls	r1, r3, #31
    1c88:	d400      	bmi.n	1c8c <_i2c_m_sync_transfer+0x128>
    1c8a:	e09f      	b.n	1dcc <_i2c_m_sync_transfer+0x268>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1c8c:	0793      	lsls	r3, r2, #30
    1c8e:	d53e      	bpl.n	1d0e <_i2c_m_sync_transfer+0x1aa>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1c90:	2301      	movs	r3, #1
    1c92:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    1c94:	886b      	ldrh	r3, [r5, #2]
    1c96:	f241 0100 	movw	r1, #4096	; 0x1000
    1c9a:	430b      	orrs	r3, r1
    1c9c:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1c9e:	886b      	ldrh	r3, [r5, #2]
    1ca0:	4993      	ldr	r1, [pc, #588]	; (1ef0 <_i2c_m_sync_transfer+0x38c>)
    1ca2:	400b      	ands	r3, r1
    1ca4:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1ca6:	2001      	movs	r0, #1
    1ca8:	0003      	movs	r3, r0
    1caa:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
    1cac:	4258      	negs	r0, r3
    1cae:	4158      	adcs	r0, r3
    1cb0:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1cb2:	886b      	ldrh	r3, [r5, #2]
    1cb4:	4a8e      	ldr	r2, [pc, #568]	; (1ef0 <_i2c_m_sync_transfer+0x38c>)
    1cb6:	4013      	ands	r3, r2
    1cb8:	806b      	strh	r3, [r5, #2]
}
    1cba:	b003      	add	sp, #12
    1cbc:	bc3c      	pop	{r2, r3, r4, r5}
    1cbe:	4690      	mov	r8, r2
    1cc0:	4699      	mov	r9, r3
    1cc2:	46a2      	mov	sl, r4
    1cc4:	46ab      	mov	fp, r5
    1cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
    1cc8:	464b      	mov	r3, r9
    1cca:	011b      	lsls	r3, r3, #4
    1ccc:	d59f      	bpl.n	1c0e <_i2c_m_sync_transfer+0xaa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1cce:	687a      	ldr	r2, [r7, #4]
    1cd0:	2380      	movs	r3, #128	; 0x80
    1cd2:	02db      	lsls	r3, r3, #11
    1cd4:	4313      	orrs	r3, r2
    1cd6:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1cd8:	2204      	movs	r2, #4
    1cda:	69fb      	ldr	r3, [r7, #28]
    1cdc:	421a      	tst	r2, r3
    1cde:	d1fc      	bne.n	1cda <_i2c_m_sync_transfer+0x176>
    1ce0:	e79d      	b.n	1c1e <_i2c_m_sync_transfer+0xba>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1ce2:	886a      	ldrh	r2, [r5, #2]
    1ce4:	005b      	lsls	r3, r3, #1
    1ce6:	21ff      	movs	r1, #255	; 0xff
    1ce8:	400b      	ands	r3, r1
    1cea:	39fe      	subs	r1, #254	; 0xfe
    1cec:	4011      	ands	r1, r2
    1cee:	4319      	orrs	r1, r3
    1cf0:	2204      	movs	r2, #4
    1cf2:	69fb      	ldr	r3, [r7, #28]
    1cf4:	421a      	tst	r2, r3
    1cf6:	d1fc      	bne.n	1cf2 <_i2c_m_sync_transfer+0x18e>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1cfa:	f244 0300 	movw	r3, #16384	; 0x4000
    1cfe:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    1d00:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1d02:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d04:	2204      	movs	r2, #4
    1d06:	69fb      	ldr	r3, [r7, #28]
    1d08:	421a      	tst	r2, r3
    1d0a:	d1fc      	bne.n	1d06 <_i2c_m_sync_transfer+0x1a2>
    1d0c:	e7a7      	b.n	1c5e <_i2c_m_sync_transfer+0xfa>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1d0e:	0753      	lsls	r3, r2, #29
    1d10:	d41b      	bmi.n	1d4a <_i2c_m_sync_transfer+0x1e6>
			if (msg->flags & I2C_M_TEN) {
    1d12:	886b      	ldrh	r3, [r5, #2]
    1d14:	055b      	lsls	r3, r3, #21
    1d16:	d535      	bpl.n	1d84 <_i2c_m_sync_transfer+0x220>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1d18:	882b      	ldrh	r3, [r5, #0]
    1d1a:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1d1c:	2106      	movs	r1, #6
    1d1e:	4019      	ands	r1, r3
    1d20:	2204      	movs	r2, #4
    1d22:	69fb      	ldr	r3, [r7, #28]
    1d24:	421a      	tst	r2, r3
    1d26:	d1fc      	bne.n	1d22 <_i2c_m_sync_transfer+0x1be>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1d2a:	f244 0300 	movw	r3, #16384	; 0x4000
    1d2e:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1d30:	22f1      	movs	r2, #241	; 0xf1
    1d32:	4313      	orrs	r3, r2
    1d34:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1d36:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d38:	3aed      	subs	r2, #237	; 0xed
    1d3a:	69fb      	ldr	r3, [r7, #28]
    1d3c:	421a      	tst	r2, r3
    1d3e:	d1fc      	bne.n	1d3a <_i2c_m_sync_transfer+0x1d6>
				msg->flags &= ~I2C_M_TEN;
    1d40:	886b      	ldrh	r3, [r5, #2]
    1d42:	4a6c      	ldr	r2, [pc, #432]	; (1ef4 <_i2c_m_sync_transfer+0x390>)
    1d44:	4013      	ands	r3, r2
    1d46:	806b      	strh	r3, [r5, #2]
    1d48:	e065      	b.n	1e16 <_i2c_m_sync_transfer+0x2b2>
				if (msg->len > 0) {
    1d4a:	686b      	ldr	r3, [r5, #4]
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	dd04      	ble.n	1d5a <_i2c_m_sync_transfer+0x1f6>
					msg->flags |= I2C_M_FAIL;
    1d50:	886b      	ldrh	r3, [r5, #2]
    1d52:	f241 0200 	movw	r2, #4096	; 0x1000
    1d56:	4313      	orrs	r3, r2
    1d58:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1d5a:	886b      	ldrh	r3, [r5, #2]
    1d5c:	b21b      	sxth	r3, r3
    1d5e:	2b00      	cmp	r3, #0
    1d60:	db06      	blt.n	1d70 <_i2c_m_sync_transfer+0x20c>
				msg->flags &= ~I2C_M_BUSY;
    1d62:	886b      	ldrh	r3, [r5, #2]
    1d64:	4a62      	ldr	r2, [pc, #392]	; (1ef0 <_i2c_m_sync_transfer+0x38c>)
    1d66:	4013      	ands	r3, r2
    1d68:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1d6a:	2002      	movs	r0, #2
    1d6c:	4240      	negs	r0, r0
    1d6e:	e7a0      	b.n	1cb2 <_i2c_m_sync_transfer+0x14e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1d70:	687a      	ldr	r2, [r7, #4]
    1d72:	23c0      	movs	r3, #192	; 0xc0
    1d74:	029b      	lsls	r3, r3, #10
    1d76:	4313      	orrs	r3, r2
    1d78:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d7a:	2304      	movs	r3, #4
    1d7c:	69fa      	ldr	r2, [r7, #28]
    1d7e:	4213      	tst	r3, r2
    1d80:	d1fc      	bne.n	1d7c <_i2c_m_sync_transfer+0x218>
    1d82:	e7ee      	b.n	1d62 <_i2c_m_sync_transfer+0x1fe>
			if (msg->len == 0) {
    1d84:	686b      	ldr	r3, [r5, #4]
    1d86:	b993      	cbnz	r3, 1dae <_i2c_m_sync_transfer+0x24a>
				if (msg->flags & I2C_M_STOP) {
    1d88:	886b      	ldrh	r3, [r5, #2]
    1d8a:	b21b      	sxth	r3, r3
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	db04      	blt.n	1d9a <_i2c_m_sync_transfer+0x236>
				msg->flags &= ~I2C_M_BUSY;
    1d90:	886b      	ldrh	r3, [r5, #2]
    1d92:	4a57      	ldr	r2, [pc, #348]	; (1ef0 <_i2c_m_sync_transfer+0x38c>)
    1d94:	4013      	ands	r3, r2
    1d96:	806b      	strh	r3, [r5, #2]
    1d98:	e03d      	b.n	1e16 <_i2c_m_sync_transfer+0x2b2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1d9a:	687a      	ldr	r2, [r7, #4]
    1d9c:	23c0      	movs	r3, #192	; 0xc0
    1d9e:	029b      	lsls	r3, r3, #10
    1da0:	4313      	orrs	r3, r2
    1da2:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1da4:	2204      	movs	r2, #4
    1da6:	69fb      	ldr	r3, [r7, #28]
    1da8:	421a      	tst	r2, r3
    1daa:	d1fc      	bne.n	1da6 <_i2c_m_sync_transfer+0x242>
    1dac:	e7f0      	b.n	1d90 <_i2c_m_sync_transfer+0x22c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1dae:	68ab      	ldr	r3, [r5, #8]
    1db0:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1db2:	2328      	movs	r3, #40	; 0x28
    1db4:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1db6:	2204      	movs	r2, #4
    1db8:	69fb      	ldr	r3, [r7, #28]
    1dba:	421a      	tst	r2, r3
    1dbc:	d1fc      	bne.n	1db8 <_i2c_m_sync_transfer+0x254>
				msg->buffer++;
    1dbe:	68ab      	ldr	r3, [r5, #8]
    1dc0:	3301      	adds	r3, #1
    1dc2:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1dc4:	686b      	ldr	r3, [r5, #4]
    1dc6:	3b01      	subs	r3, #1
    1dc8:	606b      	str	r3, [r5, #4]
    1dca:	e024      	b.n	1e16 <_i2c_m_sync_transfer+0x2b2>
	} else if (flags & SB_FLAG) {
    1dcc:	079b      	lsls	r3, r3, #30
    1dce:	d522      	bpl.n	1e16 <_i2c_m_sync_transfer+0x2b2>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1dd0:	686b      	ldr	r3, [r5, #4]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d03f      	beq.n	1e56 <_i2c_m_sync_transfer+0x2f2>
    1dd6:	0752      	lsls	r2, r2, #29
    1dd8:	d43d      	bmi.n	1e56 <_i2c_m_sync_transfer+0x2f2>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1dda:	0136      	lsls	r6, r6, #4
    1ddc:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
    1dde:	3b01      	subs	r3, #1
    1de0:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1de2:	2b00      	cmp	r3, #0
    1de4:	d000      	beq.n	1de8 <_i2c_m_sync_transfer+0x284>
    1de6:	e10f      	b.n	2008 <_i2c_m_sync_transfer+0x4a4>
    1de8:	2e00      	cmp	r6, #0
    1dea:	d100      	bne.n	1dee <_i2c_m_sync_transfer+0x28a>
    1dec:	e112      	b.n	2014 <_i2c_m_sync_transfer+0x4b0>
				if (msg->flags & I2C_M_STOP) {
    1dee:	886b      	ldrh	r3, [r5, #2]
    1df0:	b21b      	sxth	r3, r3
    1df2:	2b00      	cmp	r3, #0
    1df4:	db1c      	blt.n	1e30 <_i2c_m_sync_transfer+0x2cc>
				msg->flags &= ~I2C_M_BUSY;
    1df6:	886b      	ldrh	r3, [r5, #2]
    1df8:	4a3d      	ldr	r2, [pc, #244]	; (1ef0 <_i2c_m_sync_transfer+0x38c>)
    1dfa:	4013      	ands	r3, r2
    1dfc:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1dfe:	68a9      	ldr	r1, [r5, #8]
    1e00:	1c4b      	adds	r3, r1, #1
    1e02:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e04:	2204      	movs	r2, #4
    1e06:	69fb      	ldr	r3, [r7, #28]
    1e08:	421a      	tst	r2, r3
    1e0a:	d1fc      	bne.n	1e06 <_i2c_m_sync_transfer+0x2a2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1e0c:	2328      	movs	r3, #40	; 0x28
    1e0e:	5cfb      	ldrb	r3, [r7, r3]
    1e10:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1e12:	2302      	movs	r3, #2
    1e14:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    1e16:	2300      	movs	r3, #0
    1e18:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1e1a:	f240 1a00 	movw	sl, #256	; 0x100
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1e1e:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e20:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
    1e22:	f240 0c01 	movw	ip, #1
	} else if (flags & SB_FLAG) {
    1e26:	f240 0902 	movw	r9, #2
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1e2a:	f240 0b28 	movw	fp, #40	; 0x28
    1e2e:	e0b3      	b.n	1f98 <_i2c_m_sync_transfer+0x434>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	4a2f      	ldr	r2, [pc, #188]	; (1ef0 <_i2c_m_sync_transfer+0x38c>)
    1e34:	4013      	ands	r3, r2
    1e36:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e38:	3206      	adds	r2, #6
    1e3a:	32ff      	adds	r2, #255	; 0xff
    1e3c:	69fb      	ldr	r3, [r7, #28]
    1e3e:	421a      	tst	r2, r3
    1e40:	d1fc      	bne.n	1e3c <_i2c_m_sync_transfer+0x2d8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1e42:	687a      	ldr	r2, [r7, #4]
    1e44:	23c0      	movs	r3, #192	; 0xc0
    1e46:	029b      	lsls	r3, r3, #10
    1e48:	4313      	orrs	r3, r2
    1e4a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e4c:	2204      	movs	r2, #4
    1e4e:	69fb      	ldr	r3, [r7, #28]
    1e50:	421a      	tst	r2, r3
    1e52:	d1fc      	bne.n	1e4e <_i2c_m_sync_transfer+0x2ea>
    1e54:	e7cf      	b.n	1df6 <_i2c_m_sync_transfer+0x292>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1e56:	2302      	movs	r3, #2
    1e58:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    1e5a:	2002      	movs	r0, #2
    1e5c:	4240      	negs	r0, r0
    1e5e:	e728      	b.n	1cb2 <_i2c_m_sync_transfer+0x14e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1e60:	6862      	ldr	r2, [r4, #4]
    1e62:	23c0      	movs	r3, #192	; 0xc0
    1e64:	029b      	lsls	r3, r3, #10
    1e66:	4313      	orrs	r3, r2
    1e68:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e6a:	2204      	movs	r2, #4
    1e6c:	69e3      	ldr	r3, [r4, #28]
    1e6e:	421a      	tst	r2, r3
    1e70:	d1fc      	bne.n	1e6c <_i2c_m_sync_transfer+0x308>
    1e72:	e0a7      	b.n	1fc4 <_i2c_m_sync_transfer+0x460>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1e74:	4202      	tst	r2, r0
    1e76:	d11b      	bne.n	1eb0 <_i2c_m_sync_transfer+0x34c>
			if (msg->flags & I2C_M_TEN) {
    1e78:	886b      	ldrh	r3, [r5, #2]
    1e7a:	055b      	lsls	r3, r3, #21
    1e7c:	d53c      	bpl.n	1ef8 <_i2c_m_sync_transfer+0x394>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1e7e:	882b      	ldrh	r3, [r5, #0]
    1e80:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1e82:	2006      	movs	r0, #6
    1e84:	4018      	ands	r0, r3
    1e86:	69e3      	ldr	r3, [r4, #28]
    1e88:	421a      	tst	r2, r3
    1e8a:	d1fc      	bne.n	1e86 <_i2c_m_sync_transfer+0x322>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1e8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    1e8e:	f244 0300 	movw	r3, #16384	; 0x4000
    1e92:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
    1e94:	26f1      	movs	r6, #241	; 0xf1
    1e96:	4333      	orrs	r3, r6
    1e98:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1e9a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e9c:	69e3      	ldr	r3, [r4, #28]
    1e9e:	421a      	tst	r2, r3
    1ea0:	d1fc      	bne.n	1e9c <_i2c_m_sync_transfer+0x338>
				msg->flags &= ~I2C_M_TEN;
    1ea2:	886b      	ldrh	r3, [r5, #2]
    1ea4:	4813      	ldr	r0, [pc, #76]	; (1ef4 <_i2c_m_sync_transfer+0x390>)
    1ea6:	4003      	ands	r3, r0
    1ea8:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1eaa:	2300      	movs	r3, #0
    1eac:	9301      	str	r3, [sp, #4]
    1eae:	e073      	b.n	1f98 <_i2c_m_sync_transfer+0x434>
				if (msg->len > 0) {
    1eb0:	686b      	ldr	r3, [r5, #4]
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	dd04      	ble.n	1ec0 <_i2c_m_sync_transfer+0x35c>
					msg->flags |= I2C_M_FAIL;
    1eb6:	886b      	ldrh	r3, [r5, #2]
    1eb8:	f241 0000 	movw	r0, #4096	; 0x1000
    1ebc:	4303      	orrs	r3, r0
    1ebe:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1ec0:	886b      	ldrh	r3, [r5, #2]
    1ec2:	b21b      	sxth	r3, r3
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	db07      	blt.n	1ed8 <_i2c_m_sync_transfer+0x374>
				msg->flags &= ~I2C_M_BUSY;
    1ec8:	886b      	ldrh	r3, [r5, #2]
    1eca:	4809      	ldr	r0, [pc, #36]	; (1ef0 <_i2c_m_sync_transfer+0x38c>)
    1ecc:	4003      	ands	r3, r0
    1ece:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1ed0:	2302      	movs	r3, #2
    1ed2:	425b      	negs	r3, r3
    1ed4:	9301      	str	r3, [sp, #4]
    1ed6:	e05f      	b.n	1f98 <_i2c_m_sync_transfer+0x434>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1ed8:	6860      	ldr	r0, [r4, #4]
    1eda:	23c0      	movs	r3, #192	; 0xc0
    1edc:	029b      	lsls	r3, r3, #10
    1ede:	4303      	orrs	r3, r0
    1ee0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ee2:	69e3      	ldr	r3, [r4, #28]
    1ee4:	421a      	tst	r2, r3
    1ee6:	d1fc      	bne.n	1ee2 <_i2c_m_sync_transfer+0x37e>
    1ee8:	e7ee      	b.n	1ec8 <_i2c_m_sync_transfer+0x364>
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	fffbffff 	.word	0xfffbffff
    1ef0:	fffffeff 	.word	0xfffffeff
    1ef4:	fffffbff 	.word	0xfffffbff
			if (msg->len == 0) {
    1ef8:	686b      	ldr	r3, [r5, #4]
    1efa:	b99b      	cbnz	r3, 1f24 <_i2c_m_sync_transfer+0x3c0>
				if (msg->flags & I2C_M_STOP) {
    1efc:	886b      	ldrh	r3, [r5, #2]
    1efe:	b21b      	sxth	r3, r3
    1f00:	2b00      	cmp	r3, #0
    1f02:	db06      	blt.n	1f12 <_i2c_m_sync_transfer+0x3ae>
				msg->flags &= ~I2C_M_BUSY;
    1f04:	886b      	ldrh	r3, [r5, #2]
    1f06:	4863      	ldr	r0, [pc, #396]	; (2094 <_i2c_m_sync_transfer+0x530>)
    1f08:	4003      	ands	r3, r0
    1f0a:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    1f0c:	2300      	movs	r3, #0
    1f0e:	9301      	str	r3, [sp, #4]
    1f10:	e042      	b.n	1f98 <_i2c_m_sync_transfer+0x434>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1f12:	6860      	ldr	r0, [r4, #4]
    1f14:	23c0      	movs	r3, #192	; 0xc0
    1f16:	029b      	lsls	r3, r3, #10
    1f18:	4303      	orrs	r3, r0
    1f1a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f1c:	69e3      	ldr	r3, [r4, #28]
    1f1e:	421a      	tst	r2, r3
    1f20:	d1fc      	bne.n	1f1c <_i2c_m_sync_transfer+0x3b8>
    1f22:	e7ef      	b.n	1f04 <_i2c_m_sync_transfer+0x3a0>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1f24:	68ab      	ldr	r3, [r5, #8]
    1f26:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1f28:	4658      	mov	r0, fp
    1f2a:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f2c:	69e3      	ldr	r3, [r4, #28]
    1f2e:	421a      	tst	r2, r3
    1f30:	d1fc      	bne.n	1f2c <_i2c_m_sync_transfer+0x3c8>
				msg->buffer++;
    1f32:	68ab      	ldr	r3, [r5, #8]
    1f34:	3301      	adds	r3, #1
    1f36:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1f38:	686b      	ldr	r3, [r5, #4]
    1f3a:	3b01      	subs	r3, #1
    1f3c:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1f3e:	2300      	movs	r3, #0
    1f40:	9301      	str	r3, [sp, #4]
    1f42:	e029      	b.n	1f98 <_i2c_m_sync_transfer+0x434>
	return I2C_OK;
    1f44:	2700      	movs	r7, #0
    1f46:	9701      	str	r7, [sp, #4]
	} else if (flags & SB_FLAG) {
    1f48:	464f      	mov	r7, r9
    1f4a:	421f      	tst	r7, r3
    1f4c:	d024      	beq.n	1f98 <_i2c_m_sync_transfer+0x434>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1f4e:	686b      	ldr	r3, [r5, #4]
    1f50:	2b00      	cmp	r3, #0
    1f52:	d04e      	beq.n	1ff2 <_i2c_m_sync_transfer+0x48e>
    1f54:	4202      	tst	r2, r0
    1f56:	d14c      	bne.n	1ff2 <_i2c_m_sync_transfer+0x48e>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1f58:	0ef6      	lsrs	r6, r6, #27
    1f5a:	4660      	mov	r0, ip
    1f5c:	4006      	ands	r6, r0
			msg->len--;
    1f5e:	3b01      	subs	r3, #1
    1f60:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1f62:	2b00      	cmp	r3, #0
    1f64:	d000      	beq.n	1f68 <_i2c_m_sync_transfer+0x404>
    1f66:	e082      	b.n	206e <_i2c_m_sync_transfer+0x50a>
    1f68:	2e00      	cmp	r6, #0
    1f6a:	d100      	bne.n	1f6e <_i2c_m_sync_transfer+0x40a>
    1f6c:	e085      	b.n	207a <_i2c_m_sync_transfer+0x516>
				if (msg->flags & I2C_M_STOP) {
    1f6e:	886b      	ldrh	r3, [r5, #2]
    1f70:	b21b      	sxth	r3, r3
    1f72:	2b00      	cmp	r3, #0
    1f74:	db2d      	blt.n	1fd2 <_i2c_m_sync_transfer+0x46e>
				msg->flags &= ~I2C_M_BUSY;
    1f76:	886b      	ldrh	r3, [r5, #2]
    1f78:	4846      	ldr	r0, [pc, #280]	; (2094 <_i2c_m_sync_transfer+0x530>)
    1f7a:	4003      	ands	r3, r0
    1f7c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1f7e:	68a8      	ldr	r0, [r5, #8]
    1f80:	1c43      	adds	r3, r0, #1
    1f82:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f84:	69e3      	ldr	r3, [r4, #28]
    1f86:	421a      	tst	r2, r3
    1f88:	d1fc      	bne.n	1f84 <_i2c_m_sync_transfer+0x420>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1f8a:	465b      	mov	r3, fp
    1f8c:	5ce3      	ldrb	r3, [r4, r3]
    1f8e:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1f90:	464b      	mov	r3, r9
    1f92:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1f94:	2300      	movs	r3, #0
    1f96:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1f98:	886b      	ldrh	r3, [r5, #2]
    1f9a:	4650      	mov	r0, sl
    1f9c:	4203      	tst	r3, r0
    1f9e:	d02e      	beq.n	1ffe <_i2c_m_sync_transfer+0x49a>
	void *   hw      = i2c_dev->hw;
    1fa0:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1fa2:	7e33      	ldrb	r3, [r6, #24]
    1fa4:	b2db      	uxtb	r3, r3
    1fa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1faa:	4219      	tst	r1, r3
    1fac:	d140      	bne.n	2030 <_i2c_m_sync_transfer+0x4cc>
    1fae:	7e33      	ldrb	r3, [r6, #24]
    1fb0:	b2db      	uxtb	r3, r3
    1fb2:	3801      	subs	r0, #1
		if (timeout-- == 0) {
    1fb4:	2800      	cmp	r0, #0
    1fb6:	d1f8      	bne.n	1faa <_i2c_m_sync_transfer+0x446>
			if (msg->flags & I2C_M_STOP) {
    1fb8:	4643      	mov	r3, r8
    1fba:	885b      	ldrh	r3, [r3, #2]
    1fbc:	b21b      	sxth	r3, r3
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	da00      	bge.n	1fc4 <_i2c_m_sync_transfer+0x460>
    1fc2:	e74d      	b.n	1e60 <_i2c_m_sync_transfer+0x2fc>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1fc4:	886b      	ldrh	r3, [r5, #2]
    1fc6:	4a33      	ldr	r2, [pc, #204]	; (2094 <_i2c_m_sync_transfer+0x530>)
    1fc8:	4013      	ands	r3, r2
    1fca:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    1fcc:	2005      	movs	r0, #5
    1fce:	4240      	negs	r0, r0
			return ret;
    1fd0:	e673      	b.n	1cba <_i2c_m_sync_transfer+0x156>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1fd2:	6863      	ldr	r3, [r4, #4]
    1fd4:	482f      	ldr	r0, [pc, #188]	; (2094 <_i2c_m_sync_transfer+0x530>)
    1fd6:	4003      	ands	r3, r0
    1fd8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fda:	69e3      	ldr	r3, [r4, #28]
    1fdc:	421a      	tst	r2, r3
    1fde:	d1fc      	bne.n	1fda <_i2c_m_sync_transfer+0x476>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1fe0:	6860      	ldr	r0, [r4, #4]
    1fe2:	23c0      	movs	r3, #192	; 0xc0
    1fe4:	029b      	lsls	r3, r3, #10
    1fe6:	4303      	orrs	r3, r0
    1fe8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fea:	69e3      	ldr	r3, [r4, #28]
    1fec:	421a      	tst	r2, r3
    1fee:	d1fc      	bne.n	1fea <_i2c_m_sync_transfer+0x486>
    1ff0:	e7c1      	b.n	1f76 <_i2c_m_sync_transfer+0x412>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1ff2:	464b      	mov	r3, r9
    1ff4:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1ff6:	2302      	movs	r3, #2
    1ff8:	425b      	negs	r3, r3
    1ffa:	9301      	str	r3, [sp, #4]
    1ffc:	e7cc      	b.n	1f98 <_i2c_m_sync_transfer+0x434>
    1ffe:	9801      	ldr	r0, [sp, #4]
    2000:	e65b      	b.n	1cba <_i2c_m_sync_transfer+0x156>
		return I2C_ERR_BUSY;
    2002:	2006      	movs	r0, #6
    2004:	4240      	negs	r0, r0
    2006:	e658      	b.n	1cba <_i2c_m_sync_transfer+0x156>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2008:	2b01      	cmp	r3, #1
    200a:	d000      	beq.n	200e <_i2c_m_sync_transfer+0x4aa>
    200c:	e6f7      	b.n	1dfe <_i2c_m_sync_transfer+0x29a>
    200e:	2e00      	cmp	r6, #0
    2010:	d100      	bne.n	2014 <_i2c_m_sync_transfer+0x4b0>
    2012:	e6f4      	b.n	1dfe <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2014:	687a      	ldr	r2, [r7, #4]
    2016:	2380      	movs	r3, #128	; 0x80
    2018:	02db      	lsls	r3, r3, #11
    201a:	4313      	orrs	r3, r2
    201c:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    201e:	2204      	movs	r2, #4
    2020:	69fb      	ldr	r3, [r7, #28]
    2022:	421a      	tst	r2, r3
    2024:	d1fc      	bne.n	2020 <_i2c_m_sync_transfer+0x4bc>
			if (msg->len == 0) {
    2026:	686b      	ldr	r3, [r5, #4]
    2028:	2b00      	cmp	r3, #0
    202a:	d100      	bne.n	202e <_i2c_m_sync_transfer+0x4ca>
    202c:	e6df      	b.n	1dee <_i2c_m_sync_transfer+0x28a>
    202e:	e6e6      	b.n	1dfe <_i2c_m_sync_transfer+0x29a>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2030:	6826      	ldr	r6, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2032:	69e0      	ldr	r0, [r4, #28]
    2034:	4202      	tst	r2, r0
    2036:	d1fc      	bne.n	2032 <_i2c_m_sync_transfer+0x4ce>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2038:	8b60      	ldrh	r0, [r4, #26]
    203a:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
    203c:	4667      	mov	r7, ip
    203e:	421f      	tst	r7, r3
    2040:	d100      	bne.n	2044 <_i2c_m_sync_transfer+0x4e0>
    2042:	e77f      	b.n	1f44 <_i2c_m_sync_transfer+0x3e0>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2044:	464b      	mov	r3, r9
    2046:	4203      	tst	r3, r0
    2048:	d100      	bne.n	204c <_i2c_m_sync_transfer+0x4e8>
    204a:	e713      	b.n	1e74 <_i2c_m_sync_transfer+0x310>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    204c:	7627      	strb	r7, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    204e:	886b      	ldrh	r3, [r5, #2]
    2050:	f241 0600 	movw	r6, #4096	; 0x1000
    2054:	4333      	orrs	r3, r6
    2056:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    2058:	886b      	ldrh	r3, [r5, #2]
    205a:	4e0e      	ldr	r6, [pc, #56]	; (2094 <_i2c_m_sync_transfer+0x530>)
    205c:	4033      	ands	r3, r6
    205e:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    2060:	4663      	mov	r3, ip
    2062:	4003      	ands	r3, r0
			return I2C_ERR_BAD_ADDRESS;
    2064:	4258      	negs	r0, r3
    2066:	4158      	adcs	r0, r3
    2068:	1f43      	subs	r3, r0, #5
    206a:	9301      	str	r3, [sp, #4]
    206c:	e794      	b.n	1f98 <_i2c_m_sync_transfer+0x434>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    206e:	2b01      	cmp	r3, #1
    2070:	d000      	beq.n	2074 <_i2c_m_sync_transfer+0x510>
    2072:	e784      	b.n	1f7e <_i2c_m_sync_transfer+0x41a>
    2074:	2e00      	cmp	r6, #0
    2076:	d100      	bne.n	207a <_i2c_m_sync_transfer+0x516>
    2078:	e781      	b.n	1f7e <_i2c_m_sync_transfer+0x41a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    207a:	6860      	ldr	r0, [r4, #4]
    207c:	2380      	movs	r3, #128	; 0x80
    207e:	02db      	lsls	r3, r3, #11
    2080:	4303      	orrs	r3, r0
    2082:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2084:	69e3      	ldr	r3, [r4, #28]
    2086:	421a      	tst	r2, r3
    2088:	d1fc      	bne.n	2084 <_i2c_m_sync_transfer+0x520>
			if (msg->len == 0) {
    208a:	686b      	ldr	r3, [r5, #4]
    208c:	2b00      	cmp	r3, #0
    208e:	d100      	bne.n	2092 <_i2c_m_sync_transfer+0x52e>
    2090:	e76d      	b.n	1f6e <_i2c_m_sync_transfer+0x40a>
    2092:	e774      	b.n	1f7e <_i2c_m_sync_transfer+0x41a>
    2094:	fffffeff 	.word	0xfffffeff

00002098 <CRYPTO_AUTHENTICATION_INTERFACE_0_init>:
	.rx_retries            = CONF_CRYPTO_AUTHENTICATION_INTERFACE_0_I2C_RXRETRY,
.cfg_data              = &Interface};


void CRYPTO_AUTHENTICATION_INTERFACE_0_init(void)
{
    2098:	b510      	push	{r4, lr}
	atcab_init(&CRYPTO_AUTHENTICATION_INTERFACE_0_desc);
    209a:	f240 0000 	movw	r0, #0
    209e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    20a2:	f240 7353 	movw	r3, #1875	; 0x753
    20a6:	f2c0 0300 	movt	r3, #0
    20aa:	4798      	blx	r3
}
    20ac:	bd10      	pop	{r4, pc}
	...

000020b0 <main>:


int main(void)
{
    20b0:	b530      	push	{r4, r5, lr}
    20b2:	4c1e      	ldr	r4, [pc, #120]	; (212c <main+0x7c>)
    20b4:	44a5      	add	sp, r4
	
	//uint8_t random_number[32];
	uint8_t inBytes = 4;
	uint8_t bufferIn[4] = {0x74, 0xba, 0x25, 0x21};
    20b6:	f643 238c 	movw	r3, #14988	; 0x3a8c
    20ba:	f2c0 0300 	movt	r3, #0
    20be:	681b      	ldr	r3, [r3, #0]
    20c0:	938b      	str	r3, [sp, #556]	; 0x22c
	uint8_t     serialnum[ATCA_SERIAL_NUM_SIZE];
	uint8_t     random_number[ATCA_KEY_SIZE];
	uint8_t     loop_count = 2;
		
		
	system_init();
    20c2:	f241 43b9 	movw	r3, #5305	; 0x14b9
    20c6:	f2c0 0300 	movt	r3, #0
    20ca:	4798      	blx	r3
	//CRYPTO_AUTHENTICATION_INTERFACE_0_example();
	
	
	
	/* Init CRYPTO_AUTHENTICATION_INTERFACE_0 */
	 CRYPTO_AUTHENTICATION_INTERFACE_0_init();
    20cc:	f242 0399 	movw	r3, #8345	; 0x2099
    20d0:	f2c0 0300 	movt	r3, #0
    20d4:	4798      	blx	r3
    20d6:	2403      	movs	r4, #3
	
	do {
		/* Read device serial number... Unique value for each device and same on every read */
		if (ATCA_SUCCESS != (status = atcab_read_serial_number(serialnum)))
    20d8:	f640 15e3 	movw	r5, #2531	; 0x9e3
    20dc:	f2c0 0500 	movt	r5, #0
    20e0:	a808      	add	r0, sp, #32
    20e2:	47a8      	blx	r5
    20e4:	b9e0      	cbnz	r0, 2120 <main+0x70>
		break;

		/* Read random number... Unique value on every read */
		if (ATCA_SUCCESS != (status = atcab_random(random_number)))
    20e6:	4668      	mov	r0, sp
    20e8:	f640 03a9 	movw	r3, #2217	; 0x8a9
    20ec:	f2c0 0300 	movt	r3, #0
    20f0:	4798      	blx	r3
    20f2:	b9a8      	cbnz	r0, 2120 <main+0x70>
		break;
		
		memset(bufferOut, 0x00, 256);
    20f4:	f240 1200 	movw	r2, #256	; 0x100
    20f8:	2100      	movs	r1, #0
    20fa:	a80b      	add	r0, sp, #44	; 0x2c
    20fc:	f243 73f1 	movw	r3, #14321	; 0x37f1
    2100:	f2c0 0300 	movt	r3, #0
    2104:	4798      	blx	r3
		if (ATCA_SUCCESS != (status = atcab_sha(inBytes, bufferIn, bufferOut)))
    2106:	aa0b      	add	r2, sp, #44	; 0x2c
    2108:	a98b      	add	r1, sp, #556	; 0x22c
    210a:	2004      	movs	r0, #4
    210c:	f640 6347 	movw	r3, #3655	; 0xe47
    2110:	f2c0 0300 	movt	r3, #0
    2114:	4798      	blx	r3
    2116:	b918      	cbnz	r0, 2120 <main+0x70>
    2118:	3c01      	subs	r4, #1
    211a:	b2e4      	uxtb	r4, r4
			break;
			
	} while (loop_count--);
    211c:	2c00      	cmp	r4, #0
    211e:	d1df      	bne.n	20e0 <main+0x30>
	
}	
    2120:	2000      	movs	r0, #0
    2122:	f240 2334 	movw	r3, #564	; 0x234
    2126:	449d      	add	sp, r3
    2128:	bd30      	pop	{r4, r5, pc}
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	fffffdcc 	.word	0xfffffdcc

00002130 <__aeabi_d2uiz>:
    2130:	2300      	movs	r3, #0
    2132:	b570      	push	{r4, r5, r6, lr}
    2134:	2200      	movs	r2, #0
    2136:	f2c4 13e0 	movt	r3, #16864	; 0x41e0
    213a:	0004      	movs	r4, r0
    213c:	000d      	movs	r5, r1
    213e:	f001 f9ef 	bl	3520 <__aeabi_dcmpge>
    2142:	b920      	cbnz	r0, 214e <__aeabi_d2uiz+0x1e>
    2144:	0020      	movs	r0, r4
    2146:	0029      	movs	r1, r5
    2148:	f001 f90c 	bl	3364 <__aeabi_d2iz>
    214c:	bd70      	pop	{r4, r5, r6, pc}
    214e:	2300      	movs	r3, #0
    2150:	2200      	movs	r2, #0
    2152:	f2c4 13e0 	movt	r3, #16864	; 0x41e0
    2156:	0020      	movs	r0, r4
    2158:	0029      	movs	r1, r5
    215a:	f000 fdb7 	bl	2ccc <__aeabi_dsub>
    215e:	f001 f901 	bl	3364 <__aeabi_d2iz>
    2162:	2380      	movs	r3, #128	; 0x80
    2164:	061b      	lsls	r3, r3, #24
    2166:	469c      	mov	ip, r3
    2168:	4460      	add	r0, ip
    216a:	e7ef      	b.n	214c <__aeabi_d2uiz+0x1c>

0000216c <__aeabi_ddiv>:
    216c:	b5f0      	push	{r4, r5, r6, r7, lr}
    216e:	4657      	mov	r7, sl
    2170:	4645      	mov	r5, r8
    2172:	46de      	mov	lr, fp
    2174:	464e      	mov	r6, r9
    2176:	b5e0      	push	{r5, r6, r7, lr}
    2178:	004c      	lsls	r4, r1, #1
    217a:	001e      	movs	r6, r3
    217c:	030f      	lsls	r7, r1, #12
    217e:	0fcb      	lsrs	r3, r1, #31
    2180:	0d64      	lsrs	r4, r4, #21
    2182:	b085      	sub	sp, #20
    2184:	4683      	mov	fp, r0
    2186:	4692      	mov	sl, r2
    2188:	0005      	movs	r5, r0
    218a:	0b3f      	lsrs	r7, r7, #12
    218c:	4698      	mov	r8, r3
    218e:	2c00      	cmp	r4, #0
    2190:	d053      	beq.n	223a <__aeabi_ddiv+0xce>
    2192:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2196:	429c      	cmp	r4, r3
    2198:	d035      	beq.n	2206 <__aeabi_ddiv+0x9a>
    219a:	2380      	movs	r3, #128	; 0x80
    219c:	0f42      	lsrs	r2, r0, #29
    219e:	041b      	lsls	r3, r3, #16
    21a0:	00ff      	lsls	r7, r7, #3
    21a2:	4313      	orrs	r3, r2
    21a4:	433b      	orrs	r3, r7
    21a6:	4699      	mov	r9, r3
    21a8:	4b71      	ldr	r3, [pc, #452]	; (2370 <__aeabi_ddiv+0x204>)
    21aa:	2700      	movs	r7, #0
    21ac:	469c      	mov	ip, r3
    21ae:	2300      	movs	r3, #0
    21b0:	00c5      	lsls	r5, r0, #3
    21b2:	4464      	add	r4, ip
    21b4:	9302      	str	r3, [sp, #8]
    21b6:	0333      	lsls	r3, r6, #12
    21b8:	0b1b      	lsrs	r3, r3, #12
    21ba:	469b      	mov	fp, r3
    21bc:	0073      	lsls	r3, r6, #1
    21be:	0d5b      	lsrs	r3, r3, #21
    21c0:	0ff6      	lsrs	r6, r6, #31
    21c2:	4650      	mov	r0, sl
    21c4:	9601      	str	r6, [sp, #4]
    21c6:	2b00      	cmp	r3, #0
    21c8:	d063      	beq.n	2292 <__aeabi_ddiv+0x126>
    21ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
    21ce:	4293      	cmp	r3, r2
    21d0:	d055      	beq.n	227e <__aeabi_ddiv+0x112>
    21d2:	465a      	mov	r2, fp
    21d4:	00d1      	lsls	r1, r2, #3
    21d6:	2280      	movs	r2, #128	; 0x80
    21d8:	0f40      	lsrs	r0, r0, #29
    21da:	0412      	lsls	r2, r2, #16
    21dc:	4302      	orrs	r2, r0
    21de:	430a      	orrs	r2, r1
    21e0:	4963      	ldr	r1, [pc, #396]	; (2370 <__aeabi_ddiv+0x204>)
    21e2:	4693      	mov	fp, r2
    21e4:	4652      	mov	r2, sl
    21e6:	1858      	adds	r0, r3, r1
    21e8:	2100      	movs	r1, #0
    21ea:	00d2      	lsls	r2, r2, #3
    21ec:	4643      	mov	r3, r8
    21ee:	1a20      	subs	r0, r4, r0
    21f0:	4073      	eors	r3, r6
    21f2:	469c      	mov	ip, r3
    21f4:	9000      	str	r0, [sp, #0]
    21f6:	430f      	orrs	r7, r1
    21f8:	2f0f      	cmp	r7, #15
    21fa:	d900      	bls.n	21fe <__aeabi_ddiv+0x92>
    21fc:	e0be      	b.n	237c <__aeabi_ddiv+0x210>
    21fe:	485d      	ldr	r0, [pc, #372]	; (2374 <__aeabi_ddiv+0x208>)
    2200:	00bf      	lsls	r7, r7, #2
    2202:	59c0      	ldr	r0, [r0, r7]
    2204:	4687      	mov	pc, r0
    2206:	0003      	movs	r3, r0
    2208:	433b      	orrs	r3, r7
    220a:	4699      	mov	r9, r3
    220c:	2b00      	cmp	r3, #0
    220e:	d175      	bne.n	22fc <__aeabi_ddiv+0x190>
    2210:	2302      	movs	r3, #2
    2212:	2500      	movs	r5, #0
    2214:	2708      	movs	r7, #8
    2216:	f240 74ff 	movw	r4, #2047	; 0x7ff
    221a:	9302      	str	r3, [sp, #8]
    221c:	e7cb      	b.n	21b6 <__aeabi_ddiv+0x4a>
    221e:	4643      	mov	r3, r8
    2220:	46cb      	mov	fp, r9
    2222:	002a      	movs	r2, r5
    2224:	9902      	ldr	r1, [sp, #8]
    2226:	9301      	str	r3, [sp, #4]
    2228:	2902      	cmp	r1, #2
    222a:	d000      	beq.n	222e <__aeabi_ddiv+0xc2>
    222c:	e1bd      	b.n	25aa <__aeabi_ddiv+0x43e>
    222e:	9b01      	ldr	r3, [sp, #4]
    2230:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2234:	2400      	movs	r4, #0
    2236:	2500      	movs	r5, #0
    2238:	e06d      	b.n	2316 <__aeabi_ddiv+0x1aa>
    223a:	0003      	movs	r3, r0
    223c:	433b      	orrs	r3, r7
    223e:	4699      	mov	r9, r3
    2240:	2b00      	cmp	r3, #0
    2242:	d055      	beq.n	22f0 <__aeabi_ddiv+0x184>
    2244:	2f00      	cmp	r7, #0
    2246:	d100      	bne.n	224a <__aeabi_ddiv+0xde>
    2248:	e1c8      	b.n	25dc <__aeabi_ddiv+0x470>
    224a:	0038      	movs	r0, r7
    224c:	f001 f972 	bl	3534 <__clzsi2>
    2250:	0003      	movs	r3, r0
    2252:	3b0b      	subs	r3, #11
    2254:	2b1c      	cmp	r3, #28
    2256:	dd00      	ble.n	225a <__aeabi_ddiv+0xee>
    2258:	e1b9      	b.n	25ce <__aeabi_ddiv+0x462>
    225a:	221d      	movs	r2, #29
    225c:	1ad3      	subs	r3, r2, r3
    225e:	465a      	mov	r2, fp
    2260:	0001      	movs	r1, r0
    2262:	40da      	lsrs	r2, r3
    2264:	3908      	subs	r1, #8
    2266:	408f      	lsls	r7, r1
    2268:	0013      	movs	r3, r2
    226a:	465d      	mov	r5, fp
    226c:	433b      	orrs	r3, r7
    226e:	4699      	mov	r9, r3
    2270:	408d      	lsls	r5, r1
    2272:	2300      	movs	r3, #0
    2274:	4c40      	ldr	r4, [pc, #256]	; (2378 <__aeabi_ddiv+0x20c>)
    2276:	2700      	movs	r7, #0
    2278:	1a24      	subs	r4, r4, r0
    227a:	9302      	str	r3, [sp, #8]
    227c:	e79b      	b.n	21b6 <__aeabi_ddiv+0x4a>
    227e:	4652      	mov	r2, sl
    2280:	465b      	mov	r3, fp
    2282:	431a      	orrs	r2, r3
    2284:	bb7a      	cbnz	r2, 22e6 <__aeabi_ddiv+0x17a>
    2286:	f240 0b00 	movw	fp, #0
    228a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    228e:	2102      	movs	r1, #2
    2290:	e7ac      	b.n	21ec <__aeabi_ddiv+0x80>
    2292:	465a      	mov	r2, fp
    2294:	4302      	orrs	r2, r0
    2296:	b30a      	cbz	r2, 22dc <__aeabi_ddiv+0x170>
    2298:	465b      	mov	r3, fp
    229a:	2b00      	cmp	r3, #0
    229c:	d100      	bne.n	22a0 <__aeabi_ddiv+0x134>
    229e:	e1a8      	b.n	25f2 <__aeabi_ddiv+0x486>
    22a0:	4658      	mov	r0, fp
    22a2:	f001 f947 	bl	3534 <__clzsi2>
    22a6:	0003      	movs	r3, r0
    22a8:	3b0b      	subs	r3, #11
    22aa:	2b1c      	cmp	r3, #28
    22ac:	dd00      	ble.n	22b0 <__aeabi_ddiv+0x144>
    22ae:	e199      	b.n	25e4 <__aeabi_ddiv+0x478>
    22b0:	0002      	movs	r2, r0
    22b2:	4659      	mov	r1, fp
    22b4:	3a08      	subs	r2, #8
    22b6:	4091      	lsls	r1, r2
    22b8:	f240 0c1d 	movw	ip, #29
    22bc:	468b      	mov	fp, r1
    22be:	4661      	mov	r1, ip
    22c0:	1acb      	subs	r3, r1, r3
    22c2:	4651      	mov	r1, sl
    22c4:	40d9      	lsrs	r1, r3
    22c6:	000b      	movs	r3, r1
    22c8:	4659      	mov	r1, fp
    22ca:	430b      	orrs	r3, r1
    22cc:	469b      	mov	fp, r3
    22ce:	4653      	mov	r3, sl
    22d0:	4093      	lsls	r3, r2
    22d2:	001a      	movs	r2, r3
    22d4:	4b28      	ldr	r3, [pc, #160]	; (2378 <__aeabi_ddiv+0x20c>)
    22d6:	2100      	movs	r1, #0
    22d8:	1a18      	subs	r0, r3, r0
    22da:	e787      	b.n	21ec <__aeabi_ddiv+0x80>
    22dc:	f240 0b00 	movw	fp, #0
    22e0:	2000      	movs	r0, #0
    22e2:	2101      	movs	r1, #1
    22e4:	e782      	b.n	21ec <__aeabi_ddiv+0x80>
    22e6:	4652      	mov	r2, sl
    22e8:	f240 70ff 	movw	r0, #2047	; 0x7ff
    22ec:	2103      	movs	r1, #3
    22ee:	e77d      	b.n	21ec <__aeabi_ddiv+0x80>
    22f0:	2301      	movs	r3, #1
    22f2:	2500      	movs	r5, #0
    22f4:	2704      	movs	r7, #4
    22f6:	2400      	movs	r4, #0
    22f8:	9302      	str	r3, [sp, #8]
    22fa:	e75c      	b.n	21b6 <__aeabi_ddiv+0x4a>
    22fc:	2303      	movs	r3, #3
    22fe:	46b9      	mov	r9, r7
    2300:	f240 74ff 	movw	r4, #2047	; 0x7ff
    2304:	270c      	movs	r7, #12
    2306:	9302      	str	r3, [sp, #8]
    2308:	e755      	b.n	21b6 <__aeabi_ddiv+0x4a>
    230a:	2480      	movs	r4, #128	; 0x80
    230c:	2300      	movs	r3, #0
    230e:	2500      	movs	r5, #0
    2310:	0324      	lsls	r4, r4, #12
    2312:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2316:	2100      	movs	r1, #0
    2318:	0028      	movs	r0, r5
    231a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    231e:	0324      	lsls	r4, r4, #12
    2320:	0b22      	lsrs	r2, r4, #12
    2322:	0d0c      	lsrs	r4, r1, #20
    2324:	0524      	lsls	r4, r4, #20
    2326:	4314      	orrs	r4, r2
    2328:	f2c8 050f 	movt	r5, #32783	; 0x800f
    232c:	0532      	lsls	r2, r6, #20
    232e:	402c      	ands	r4, r5
    2330:	4322      	orrs	r2, r4
    2332:	0052      	lsls	r2, r2, #1
    2334:	07db      	lsls	r3, r3, #31
    2336:	0852      	lsrs	r2, r2, #1
    2338:	431a      	orrs	r2, r3
    233a:	0011      	movs	r1, r2
    233c:	b005      	add	sp, #20
    233e:	bc3c      	pop	{r2, r3, r4, r5}
    2340:	4690      	mov	r8, r2
    2342:	4699      	mov	r9, r3
    2344:	46a2      	mov	sl, r4
    2346:	46ab      	mov	fp, r5
    2348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    234a:	2201      	movs	r2, #1
    234c:	4252      	negs	r2, r2
    234e:	2301      	movs	r3, #1
    2350:	1b99      	subs	r1, r3, r6
    2352:	2938      	cmp	r1, #56	; 0x38
    2354:	dc00      	bgt.n	2358 <__aeabi_ddiv+0x1ec>
    2356:	e1bc      	b.n	26d2 <__aeabi_ddiv+0x566>
    2358:	4662      	mov	r2, ip
    235a:	4013      	ands	r3, r2
    235c:	2600      	movs	r6, #0
    235e:	2400      	movs	r4, #0
    2360:	2500      	movs	r5, #0
    2362:	e7d8      	b.n	2316 <__aeabi_ddiv+0x1aa>
    2364:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2368:	2400      	movs	r4, #0
    236a:	2500      	movs	r5, #0
    236c:	e7d3      	b.n	2316 <__aeabi_ddiv+0x1aa>
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	fffffc01 	.word	0xfffffc01
    2374:	00003a90 	.word	0x00003a90
    2378:	fffffc0d 	.word	0xfffffc0d
    237c:	45d9      	cmp	r9, fp
    237e:	d900      	bls.n	2382 <__aeabi_ddiv+0x216>
    2380:	e13e      	b.n	2600 <__aeabi_ddiv+0x494>
    2382:	d100      	bne.n	2386 <__aeabi_ddiv+0x21a>
    2384:	e139      	b.n	25fa <__aeabi_ddiv+0x48e>
    2386:	9b00      	ldr	r3, [sp, #0]
    2388:	002f      	movs	r7, r5
    238a:	3b01      	subs	r3, #1
    238c:	9300      	str	r3, [sp, #0]
    238e:	2500      	movs	r5, #0
    2390:	464b      	mov	r3, r9
    2392:	4659      	mov	r1, fp
    2394:	0e10      	lsrs	r0, r2, #24
    2396:	0209      	lsls	r1, r1, #8
    2398:	4301      	orrs	r1, r0
    239a:	0c08      	lsrs	r0, r1, #16
    239c:	0216      	lsls	r6, r2, #8
    239e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    23a2:	fbb3 f8f0 	udiv	r8, r3, r0
    23a6:	400a      	ands	r2, r1
    23a8:	0014      	movs	r4, r2
    23aa:	9201      	str	r2, [sp, #4]
    23ac:	4642      	mov	r2, r8
    23ae:	4362      	muls	r2, r4
    23b0:	4644      	mov	r4, r8
    23b2:	4344      	muls	r4, r0
    23b4:	1b1b      	subs	r3, r3, r4
    23b6:	041b      	lsls	r3, r3, #16
    23b8:	4699      	mov	r9, r3
    23ba:	464c      	mov	r4, r9
    23bc:	0c3b      	lsrs	r3, r7, #16
    23be:	4323      	orrs	r3, r4
    23c0:	429a      	cmp	r2, r3
    23c2:	d90f      	bls.n	23e4 <__aeabi_ddiv+0x278>
    23c4:	2401      	movs	r4, #1
    23c6:	4264      	negs	r4, r4
    23c8:	4444      	add	r4, r8
    23ca:	185b      	adds	r3, r3, r1
    23cc:	46a1      	mov	r9, r4
    23ce:	4299      	cmp	r1, r3
    23d0:	d900      	bls.n	23d4 <__aeabi_ddiv+0x268>
    23d2:	e13d      	b.n	2650 <__aeabi_ddiv+0x4e4>
    23d4:	429a      	cmp	r2, r3
    23d6:	d800      	bhi.n	23da <__aeabi_ddiv+0x26e>
    23d8:	e13a      	b.n	2650 <__aeabi_ddiv+0x4e4>
    23da:	2402      	movs	r4, #2
    23dc:	4264      	negs	r4, r4
    23de:	46a1      	mov	r9, r4
    23e0:	185b      	adds	r3, r3, r1
    23e2:	44c8      	add	r8, r9
    23e4:	1a9b      	subs	r3, r3, r2
    23e6:	fbb3 fbf0 	udiv	fp, r3, r0
    23ea:	465a      	mov	r2, fp
    23ec:	9c01      	ldr	r4, [sp, #4]
    23ee:	f64f 7aff 	movw	sl, #65535	; 0xffff
    23f2:	4362      	muls	r2, r4
    23f4:	465c      	mov	r4, fp
    23f6:	4344      	muls	r4, r0
    23f8:	1b1b      	subs	r3, r3, r4
    23fa:	4654      	mov	r4, sl
    23fc:	041b      	lsls	r3, r3, #16
    23fe:	403c      	ands	r4, r7
    2400:	4323      	orrs	r3, r4
    2402:	429a      	cmp	r2, r3
    2404:	d90d      	bls.n	2422 <__aeabi_ddiv+0x2b6>
    2406:	465c      	mov	r4, fp
    2408:	185b      	adds	r3, r3, r1
    240a:	1e67      	subs	r7, r4, #1
    240c:	4299      	cmp	r1, r3
    240e:	d900      	bls.n	2412 <__aeabi_ddiv+0x2a6>
    2410:	e120      	b.n	2654 <__aeabi_ddiv+0x4e8>
    2412:	429a      	cmp	r2, r3
    2414:	d800      	bhi.n	2418 <__aeabi_ddiv+0x2ac>
    2416:	e11d      	b.n	2654 <__aeabi_ddiv+0x4e8>
    2418:	2402      	movs	r4, #2
    241a:	4264      	negs	r4, r4
    241c:	46a1      	mov	r9, r4
    241e:	185b      	adds	r3, r3, r1
    2420:	44cb      	add	fp, r9
    2422:	1a9a      	subs	r2, r3, r2
    2424:	4643      	mov	r3, r8
    2426:	465c      	mov	r4, fp
    2428:	f64f 78ff 	movw	r8, #65535	; 0xffff
    242c:	041b      	lsls	r3, r3, #16
    242e:	431c      	orrs	r4, r3
    2430:	0c33      	lsrs	r3, r6, #16
    2432:	469a      	mov	sl, r3
    2434:	4643      	mov	r3, r8
    2436:	0c27      	lsrs	r7, r4, #16
    2438:	4023      	ands	r3, r4
    243a:	46a3      	mov	fp, r4
    243c:	4644      	mov	r4, r8
    243e:	4034      	ands	r4, r6
    2440:	9403      	str	r4, [sp, #12]
    2442:	435c      	muls	r4, r3
    2444:	9402      	str	r4, [sp, #8]
    2446:	9c03      	ldr	r4, [sp, #12]
    2448:	437c      	muls	r4, r7
    244a:	46a1      	mov	r9, r4
    244c:	4654      	mov	r4, sl
    244e:	4363      	muls	r3, r4
    2450:	4367      	muls	r7, r4
    2452:	9c02      	ldr	r4, [sp, #8]
    2454:	444b      	add	r3, r9
    2456:	0c24      	lsrs	r4, r4, #16
    2458:	46a0      	mov	r8, r4
    245a:	4443      	add	r3, r8
    245c:	4599      	cmp	r9, r3
    245e:	d903      	bls.n	2468 <__aeabi_ddiv+0x2fc>
    2460:	2480      	movs	r4, #128	; 0x80
    2462:	0264      	lsls	r4, r4, #9
    2464:	46a0      	mov	r8, r4
    2466:	4447      	add	r7, r8
    2468:	0c1c      	lsrs	r4, r3, #16
    246a:	46a1      	mov	r9, r4
    246c:	44b9      	add	r9, r7
    246e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2472:	9c02      	ldr	r4, [sp, #8]
    2474:	041b      	lsls	r3, r3, #16
    2476:	4027      	ands	r7, r4
    2478:	19db      	adds	r3, r3, r7
    247a:	454a      	cmp	r2, r9
    247c:	d200      	bcs.n	2480 <__aeabi_ddiv+0x314>
    247e:	e0cb      	b.n	2618 <__aeabi_ddiv+0x4ac>
    2480:	d100      	bne.n	2484 <__aeabi_ddiv+0x318>
    2482:	e0c5      	b.n	2610 <__aeabi_ddiv+0x4a4>
    2484:	464c      	mov	r4, r9
    2486:	1b17      	subs	r7, r2, r4
    2488:	1aeb      	subs	r3, r5, r3
    248a:	429d      	cmp	r5, r3
    248c:	41ad      	sbcs	r5, r5
    248e:	426d      	negs	r5, r5
    2490:	1b7f      	subs	r7, r7, r5
    2492:	42b9      	cmp	r1, r7
    2494:	d100      	bne.n	2498 <__aeabi_ddiv+0x32c>
    2496:	e107      	b.n	26a8 <__aeabi_ddiv+0x53c>
    2498:	fbb7 f2f0 	udiv	r2, r7, r0
    249c:	0004      	movs	r4, r0
    249e:	9d01      	ldr	r5, [sp, #4]
    24a0:	4354      	muls	r4, r2
    24a2:	4355      	muls	r5, r2
    24a4:	1b3f      	subs	r7, r7, r4
    24a6:	043f      	lsls	r7, r7, #16
    24a8:	0c1c      	lsrs	r4, r3, #16
    24aa:	4327      	orrs	r7, r4
    24ac:	42bd      	cmp	r5, r7
    24ae:	d90a      	bls.n	24c6 <__aeabi_ddiv+0x35a>
    24b0:	1e54      	subs	r4, r2, #1
    24b2:	187f      	adds	r7, r7, r1
    24b4:	46a0      	mov	r8, r4
    24b6:	42b9      	cmp	r1, r7
    24b8:	d900      	bls.n	24bc <__aeabi_ddiv+0x350>
    24ba:	e0ff      	b.n	26bc <__aeabi_ddiv+0x550>
    24bc:	42bd      	cmp	r5, r7
    24be:	d800      	bhi.n	24c2 <__aeabi_ddiv+0x356>
    24c0:	e0fc      	b.n	26bc <__aeabi_ddiv+0x550>
    24c2:	3a02      	subs	r2, #2
    24c4:	187f      	adds	r7, r7, r1
    24c6:	1b7f      	subs	r7, r7, r5
    24c8:	fbb7 f5f0 	udiv	r5, r7, r0
    24cc:	4368      	muls	r0, r5
    24ce:	1a3f      	subs	r7, r7, r0
    24d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    24d4:	9c01      	ldr	r4, [sp, #4]
    24d6:	043f      	lsls	r7, r7, #16
    24d8:	436c      	muls	r4, r5
    24da:	4003      	ands	r3, r0
    24dc:	46a0      	mov	r8, r4
    24de:	433b      	orrs	r3, r7
    24e0:	429c      	cmp	r4, r3
    24e2:	d909      	bls.n	24f8 <__aeabi_ddiv+0x38c>
    24e4:	185b      	adds	r3, r3, r1
    24e6:	1e68      	subs	r0, r5, #1
    24e8:	4299      	cmp	r1, r3
    24ea:	d900      	bls.n	24ee <__aeabi_ddiv+0x382>
    24ec:	e0e8      	b.n	26c0 <__aeabi_ddiv+0x554>
    24ee:	429c      	cmp	r4, r3
    24f0:	d800      	bhi.n	24f4 <__aeabi_ddiv+0x388>
    24f2:	e0e5      	b.n	26c0 <__aeabi_ddiv+0x554>
    24f4:	3d02      	subs	r5, #2
    24f6:	185b      	adds	r3, r3, r1
    24f8:	4640      	mov	r0, r8
    24fa:	0412      	lsls	r2, r2, #16
    24fc:	432a      	orrs	r2, r5
    24fe:	9c03      	ldr	r4, [sp, #12]
    2500:	0c15      	lsrs	r5, r2, #16
    2502:	1a1b      	subs	r3, r3, r0
    2504:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2508:	0027      	movs	r7, r4
    250a:	436c      	muls	r4, r5
    250c:	46a0      	mov	r8, r4
    250e:	4654      	mov	r4, sl
    2510:	4010      	ands	r0, r2
    2512:	4347      	muls	r7, r0
    2514:	4365      	muls	r5, r4
    2516:	4360      	muls	r0, r4
    2518:	0c3c      	lsrs	r4, r7, #16
    251a:	46a1      	mov	r9, r4
    251c:	4440      	add	r0, r8
    251e:	4448      	add	r0, r9
    2520:	4580      	cmp	r8, r0
    2522:	d903      	bls.n	252c <__aeabi_ddiv+0x3c0>
    2524:	2480      	movs	r4, #128	; 0x80
    2526:	0264      	lsls	r4, r4, #9
    2528:	46a0      	mov	r8, r4
    252a:	4445      	add	r5, r8
    252c:	0c04      	lsrs	r4, r0, #16
    252e:	46a0      	mov	r8, r4
    2530:	4445      	add	r5, r8
    2532:	f64f 78ff 	movw	r8, #65535	; 0xffff
    2536:	4644      	mov	r4, r8
    2538:	0400      	lsls	r0, r0, #16
    253a:	403c      	ands	r4, r7
    253c:	1900      	adds	r0, r0, r4
    253e:	42ab      	cmp	r3, r5
    2540:	d200      	bcs.n	2544 <__aeabi_ddiv+0x3d8>
    2542:	e099      	b.n	2678 <__aeabi_ddiv+0x50c>
    2544:	d100      	bne.n	2548 <__aeabi_ddiv+0x3dc>
    2546:	e094      	b.n	2672 <__aeabi_ddiv+0x506>
    2548:	2301      	movs	r3, #1
    254a:	431a      	orrs	r2, r3
    254c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2550:	9900      	ldr	r1, [sp, #0]
    2552:	18ce      	adds	r6, r1, r3
    2554:	2e00      	cmp	r6, #0
    2556:	dc00      	bgt.n	255a <__aeabi_ddiv+0x3ee>
    2558:	e6f9      	b.n	234e <__aeabi_ddiv+0x1e2>
    255a:	0753      	lsls	r3, r2, #29
    255c:	d000      	beq.n	2560 <__aeabi_ddiv+0x3f4>
    255e:	e097      	b.n	2690 <__aeabi_ddiv+0x524>
    2560:	465b      	mov	r3, fp
    2562:	01db      	lsls	r3, r3, #7
    2564:	d507      	bpl.n	2576 <__aeabi_ddiv+0x40a>
    2566:	4659      	mov	r1, fp
    2568:	4b93      	ldr	r3, [pc, #588]	; (27b8 <__aeabi_ddiv+0x64c>)
    256a:	4019      	ands	r1, r3
    256c:	f240 4300 	movw	r3, #1024	; 0x400
    2570:	468b      	mov	fp, r1
    2572:	9900      	ldr	r1, [sp, #0]
    2574:	18ce      	adds	r6, r1, r3
    2576:	f240 73fe 	movw	r3, #2046	; 0x7fe
    257a:	429e      	cmp	r6, r3
    257c:	dd6c      	ble.n	2658 <__aeabi_ddiv+0x4ec>
    257e:	2301      	movs	r3, #1
    2580:	4662      	mov	r2, ip
    2582:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2586:	4013      	ands	r3, r2
    2588:	2400      	movs	r4, #0
    258a:	2500      	movs	r5, #0
    258c:	e6c3      	b.n	2316 <__aeabi_ddiv+0x1aa>
    258e:	2480      	movs	r4, #128	; 0x80
    2590:	464b      	mov	r3, r9
    2592:	0324      	lsls	r4, r4, #12
    2594:	4223      	tst	r3, r4
    2596:	d015      	beq.n	25c4 <__aeabi_ddiv+0x458>
    2598:	465b      	mov	r3, fp
    259a:	4223      	tst	r3, r4
    259c:	d111      	bne.n	25c2 <__aeabi_ddiv+0x456>
    259e:	431c      	orrs	r4, r3
    25a0:	0324      	lsls	r4, r4, #12
    25a2:	0b24      	lsrs	r4, r4, #12
    25a4:	0033      	movs	r3, r6
    25a6:	0015      	movs	r5, r2
    25a8:	e6b3      	b.n	2312 <__aeabi_ddiv+0x1a6>
    25aa:	2903      	cmp	r1, #3
    25ac:	d100      	bne.n	25b0 <__aeabi_ddiv+0x444>
    25ae:	e0f9      	b.n	27a4 <__aeabi_ddiv+0x638>
    25b0:	9b01      	ldr	r3, [sp, #4]
    25b2:	2901      	cmp	r1, #1
    25b4:	d000      	beq.n	25b8 <__aeabi_ddiv+0x44c>
    25b6:	e08a      	b.n	26ce <__aeabi_ddiv+0x562>
    25b8:	400b      	ands	r3, r1
    25ba:	2600      	movs	r6, #0
    25bc:	2400      	movs	r4, #0
    25be:	2500      	movs	r5, #0
    25c0:	e6a9      	b.n	2316 <__aeabi_ddiv+0x1aa>
    25c2:	464b      	mov	r3, r9
    25c4:	431c      	orrs	r4, r3
    25c6:	0324      	lsls	r4, r4, #12
    25c8:	0b24      	lsrs	r4, r4, #12
    25ca:	4643      	mov	r3, r8
    25cc:	e6a1      	b.n	2312 <__aeabi_ddiv+0x1a6>
    25ce:	0003      	movs	r3, r0
    25d0:	465a      	mov	r2, fp
    25d2:	3b28      	subs	r3, #40	; 0x28
    25d4:	409a      	lsls	r2, r3
    25d6:	2500      	movs	r5, #0
    25d8:	4691      	mov	r9, r2
    25da:	e64a      	b.n	2272 <__aeabi_ddiv+0x106>
    25dc:	f000 ffaa 	bl	3534 <__clzsi2>
    25e0:	3020      	adds	r0, #32
    25e2:	e635      	b.n	2250 <__aeabi_ddiv+0xe4>
    25e4:	0003      	movs	r3, r0
    25e6:	4652      	mov	r2, sl
    25e8:	3b28      	subs	r3, #40	; 0x28
    25ea:	409a      	lsls	r2, r3
    25ec:	4693      	mov	fp, r2
    25ee:	2200      	movs	r2, #0
    25f0:	e670      	b.n	22d4 <__aeabi_ddiv+0x168>
    25f2:	f000 ff9f 	bl	3534 <__clzsi2>
    25f6:	3020      	adds	r0, #32
    25f8:	e655      	b.n	22a6 <__aeabi_ddiv+0x13a>
    25fa:	4295      	cmp	r5, r2
    25fc:	d200      	bcs.n	2600 <__aeabi_ddiv+0x494>
    25fe:	e6c2      	b.n	2386 <__aeabi_ddiv+0x21a>
    2600:	4649      	mov	r1, r9
    2602:	464b      	mov	r3, r9
    2604:	07cf      	lsls	r7, r1, #31
    2606:	0869      	lsrs	r1, r5, #1
    2608:	085b      	lsrs	r3, r3, #1
    260a:	430f      	orrs	r7, r1
    260c:	07ed      	lsls	r5, r5, #31
    260e:	e6c0      	b.n	2392 <__aeabi_ddiv+0x226>
    2610:	2700      	movs	r7, #0
    2612:	429d      	cmp	r5, r3
    2614:	d300      	bcc.n	2618 <__aeabi_ddiv+0x4ac>
    2616:	e737      	b.n	2488 <__aeabi_ddiv+0x31c>
    2618:	19ad      	adds	r5, r5, r6
    261a:	42b5      	cmp	r5, r6
    261c:	41bf      	sbcs	r7, r7
    261e:	2401      	movs	r4, #1
    2620:	427f      	negs	r7, r7
    2622:	4264      	negs	r4, r4
    2624:	187f      	adds	r7, r7, r1
    2626:	445c      	add	r4, fp
    2628:	18ba      	adds	r2, r7, r2
    262a:	46a0      	mov	r8, r4
    262c:	4291      	cmp	r1, r2
    262e:	d207      	bcs.n	2640 <__aeabi_ddiv+0x4d4>
    2630:	4591      	cmp	r9, r2
    2632:	d872      	bhi.n	271a <__aeabi_ddiv+0x5ae>
    2634:	d100      	bne.n	2638 <__aeabi_ddiv+0x4cc>
    2636:	e0aa      	b.n	278e <__aeabi_ddiv+0x622>
    2638:	464c      	mov	r4, r9
    263a:	46c3      	mov	fp, r8
    263c:	1b17      	subs	r7, r2, r4
    263e:	e723      	b.n	2488 <__aeabi_ddiv+0x31c>
    2640:	4291      	cmp	r1, r2
    2642:	d1f9      	bne.n	2638 <__aeabi_ddiv+0x4cc>
    2644:	42ae      	cmp	r6, r5
    2646:	d9f3      	bls.n	2630 <__aeabi_ddiv+0x4c4>
    2648:	464a      	mov	r2, r9
    264a:	46a3      	mov	fp, r4
    264c:	1a8f      	subs	r7, r1, r2
    264e:	e71b      	b.n	2488 <__aeabi_ddiv+0x31c>
    2650:	46c8      	mov	r8, r9
    2652:	e6c7      	b.n	23e4 <__aeabi_ddiv+0x278>
    2654:	46bb      	mov	fp, r7
    2656:	e6e4      	b.n	2422 <__aeabi_ddiv+0x2b6>
    2658:	465b      	mov	r3, fp
    265a:	08d2      	lsrs	r2, r2, #3
    265c:	075d      	lsls	r5, r3, #29
    265e:	4315      	orrs	r5, r2
    2660:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2664:	025c      	lsls	r4, r3, #9
    2666:	4016      	ands	r6, r2
    2668:	2301      	movs	r3, #1
    266a:	4662      	mov	r2, ip
    266c:	0b24      	lsrs	r4, r4, #12
    266e:	4013      	ands	r3, r2
    2670:	e651      	b.n	2316 <__aeabi_ddiv+0x1aa>
    2672:	2800      	cmp	r0, #0
    2674:	d100      	bne.n	2678 <__aeabi_ddiv+0x50c>
    2676:	e769      	b.n	254c <__aeabi_ddiv+0x3e0>
    2678:	18cb      	adds	r3, r1, r3
    267a:	1e57      	subs	r7, r2, #1
    267c:	4299      	cmp	r1, r3
    267e:	d921      	bls.n	26c4 <__aeabi_ddiv+0x558>
    2680:	003a      	movs	r2, r7
    2682:	42ab      	cmp	r3, r5
    2684:	d000      	beq.n	2688 <__aeabi_ddiv+0x51c>
    2686:	e75f      	b.n	2548 <__aeabi_ddiv+0x3dc>
    2688:	42b0      	cmp	r0, r6
    268a:	d000      	beq.n	268e <__aeabi_ddiv+0x522>
    268c:	e75c      	b.n	2548 <__aeabi_ddiv+0x3dc>
    268e:	e75d      	b.n	254c <__aeabi_ddiv+0x3e0>
    2690:	230f      	movs	r3, #15
    2692:	4013      	ands	r3, r2
    2694:	2b04      	cmp	r3, #4
    2696:	d100      	bne.n	269a <__aeabi_ddiv+0x52e>
    2698:	e762      	b.n	2560 <__aeabi_ddiv+0x3f4>
    269a:	0013      	movs	r3, r2
    269c:	1d1a      	adds	r2, r3, #4
    269e:	429a      	cmp	r2, r3
    26a0:	419b      	sbcs	r3, r3
    26a2:	425b      	negs	r3, r3
    26a4:	449b      	add	fp, r3
    26a6:	e75b      	b.n	2560 <__aeabi_ddiv+0x3f4>
    26a8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    26ac:	9a00      	ldr	r2, [sp, #0]
    26ae:	18d6      	adds	r6, r2, r3
    26b0:	2e00      	cmp	r6, #0
    26b2:	dc00      	bgt.n	26b6 <__aeabi_ddiv+0x54a>
    26b4:	e649      	b.n	234a <__aeabi_ddiv+0x1de>
    26b6:	2301      	movs	r3, #1
    26b8:	425b      	negs	r3, r3
    26ba:	e7ef      	b.n	269c <__aeabi_ddiv+0x530>
    26bc:	4642      	mov	r2, r8
    26be:	e702      	b.n	24c6 <__aeabi_ddiv+0x35a>
    26c0:	0005      	movs	r5, r0
    26c2:	e719      	b.n	24f8 <__aeabi_ddiv+0x38c>
    26c4:	429d      	cmp	r5, r3
    26c6:	d835      	bhi.n	2734 <__aeabi_ddiv+0x5c8>
    26c8:	d066      	beq.n	2798 <__aeabi_ddiv+0x62c>
    26ca:	003a      	movs	r2, r7
    26cc:	e73c      	b.n	2548 <__aeabi_ddiv+0x3dc>
    26ce:	469c      	mov	ip, r3
    26d0:	e73c      	b.n	254c <__aeabi_ddiv+0x3e0>
    26d2:	291f      	cmp	r1, #31
    26d4:	dc37      	bgt.n	2746 <__aeabi_ddiv+0x5da>
    26d6:	2320      	movs	r3, #32
    26d8:	0014      	movs	r4, r2
    26da:	4658      	mov	r0, fp
    26dc:	1a5b      	subs	r3, r3, r1
    26de:	409a      	lsls	r2, r3
    26e0:	4098      	lsls	r0, r3
    26e2:	40cc      	lsrs	r4, r1
    26e4:	1e53      	subs	r3, r2, #1
    26e6:	419a      	sbcs	r2, r3
    26e8:	4320      	orrs	r0, r4
    26ea:	465c      	mov	r4, fp
    26ec:	4310      	orrs	r0, r2
    26ee:	40cc      	lsrs	r4, r1
    26f0:	0743      	lsls	r3, r0, #29
    26f2:	d009      	beq.n	2708 <__aeabi_ddiv+0x59c>
    26f4:	230f      	movs	r3, #15
    26f6:	4003      	ands	r3, r0
    26f8:	2b04      	cmp	r3, #4
    26fa:	d005      	beq.n	2708 <__aeabi_ddiv+0x59c>
    26fc:	0002      	movs	r2, r0
    26fe:	1d10      	adds	r0, r2, #4
    2700:	4290      	cmp	r0, r2
    2702:	419b      	sbcs	r3, r3
    2704:	425b      	negs	r3, r3
    2706:	18e4      	adds	r4, r4, r3
    2708:	0223      	lsls	r3, r4, #8
    270a:	d535      	bpl.n	2778 <__aeabi_ddiv+0x60c>
    270c:	2301      	movs	r3, #1
    270e:	4662      	mov	r2, ip
    2710:	2601      	movs	r6, #1
    2712:	4013      	ands	r3, r2
    2714:	2400      	movs	r4, #0
    2716:	2500      	movs	r5, #0
    2718:	e5fd      	b.n	2316 <__aeabi_ddiv+0x1aa>
    271a:	19ad      	adds	r5, r5, r6
    271c:	42b5      	cmp	r5, r6
    271e:	41bf      	sbcs	r7, r7
    2720:	2402      	movs	r4, #2
    2722:	427f      	negs	r7, r7
    2724:	4264      	negs	r4, r4
    2726:	187f      	adds	r7, r7, r1
    2728:	18bf      	adds	r7, r7, r2
    272a:	46a0      	mov	r8, r4
    272c:	464a      	mov	r2, r9
    272e:	44c3      	add	fp, r8
    2730:	1abf      	subs	r7, r7, r2
    2732:	e6a9      	b.n	2488 <__aeabi_ddiv+0x31c>
    2734:	1e97      	subs	r7, r2, #2
    2736:	0072      	lsls	r2, r6, #1
    2738:	42b2      	cmp	r2, r6
    273a:	41b6      	sbcs	r6, r6
    273c:	4276      	negs	r6, r6
    273e:	1871      	adds	r1, r6, r1
    2740:	185b      	adds	r3, r3, r1
    2742:	0016      	movs	r6, r2
    2744:	e79c      	b.n	2680 <__aeabi_ddiv+0x514>
    2746:	231f      	movs	r3, #31
    2748:	465d      	mov	r5, fp
    274a:	425b      	negs	r3, r3
    274c:	1b9e      	subs	r6, r3, r6
    274e:	40f5      	lsrs	r5, r6
    2750:	2920      	cmp	r1, #32
    2752:	d025      	beq.n	27a0 <__aeabi_ddiv+0x634>
    2754:	335f      	adds	r3, #95	; 0x5f
    2756:	1a59      	subs	r1, r3, r1
    2758:	465b      	mov	r3, fp
    275a:	408b      	lsls	r3, r1
    275c:	431a      	orrs	r2, r3
    275e:	1e53      	subs	r3, r2, #1
    2760:	419a      	sbcs	r2, r3
    2762:	432a      	orrs	r2, r5
    2764:	2507      	movs	r5, #7
    2766:	4015      	ands	r5, r2
    2768:	2400      	movs	r4, #0
    276a:	b14d      	cbz	r5, 2780 <__aeabi_ddiv+0x614>
    276c:	230f      	movs	r3, #15
    276e:	2400      	movs	r4, #0
    2770:	4013      	ands	r3, r2
    2772:	0010      	movs	r0, r2
    2774:	2b04      	cmp	r3, #4
    2776:	d1c2      	bne.n	26fe <__aeabi_ddiv+0x592>
    2778:	0002      	movs	r2, r0
    277a:	0765      	lsls	r5, r4, #29
    277c:	0264      	lsls	r4, r4, #9
    277e:	0b24      	lsrs	r4, r4, #12
    2780:	08d2      	lsrs	r2, r2, #3
    2782:	4315      	orrs	r5, r2
    2784:	2301      	movs	r3, #1
    2786:	4662      	mov	r2, ip
    2788:	2600      	movs	r6, #0
    278a:	4013      	ands	r3, r2
    278c:	e5c3      	b.n	2316 <__aeabi_ddiv+0x1aa>
    278e:	42ab      	cmp	r3, r5
    2790:	d8c3      	bhi.n	271a <__aeabi_ddiv+0x5ae>
    2792:	46c3      	mov	fp, r8
    2794:	2700      	movs	r7, #0
    2796:	e677      	b.n	2488 <__aeabi_ddiv+0x31c>
    2798:	4286      	cmp	r6, r0
    279a:	d3cb      	bcc.n	2734 <__aeabi_ddiv+0x5c8>
    279c:	003a      	movs	r2, r7
    279e:	e773      	b.n	2688 <__aeabi_ddiv+0x51c>
    27a0:	2300      	movs	r3, #0
    27a2:	e7db      	b.n	275c <__aeabi_ddiv+0x5f0>
    27a4:	2480      	movs	r4, #128	; 0x80
    27a6:	465b      	mov	r3, fp
    27a8:	0324      	lsls	r4, r4, #12
    27aa:	431c      	orrs	r4, r3
    27ac:	0324      	lsls	r4, r4, #12
    27ae:	0b24      	lsrs	r4, r4, #12
    27b0:	9b01      	ldr	r3, [sp, #4]
    27b2:	0015      	movs	r5, r2
    27b4:	e5ad      	b.n	2312 <__aeabi_ddiv+0x1a6>
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	feffffff 	.word	0xfeffffff

000027bc <__aeabi_dmul>:
    27bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27be:	464e      	mov	r6, r9
    27c0:	46de      	mov	lr, fp
    27c2:	4657      	mov	r7, sl
    27c4:	4645      	mov	r5, r8
    27c6:	b5e0      	push	{r5, r6, r7, lr}
    27c8:	4699      	mov	r9, r3
    27ca:	004e      	lsls	r6, r1, #1
    27cc:	030b      	lsls	r3, r1, #12
    27ce:	0b1b      	lsrs	r3, r3, #12
    27d0:	0d76      	lsrs	r6, r6, #21
    27d2:	b087      	sub	sp, #28
    27d4:	0004      	movs	r4, r0
    27d6:	4692      	mov	sl, r2
    27d8:	469b      	mov	fp, r3
    27da:	0fcd      	lsrs	r5, r1, #31
    27dc:	2e00      	cmp	r6, #0
    27de:	d100      	bne.n	27e2 <__aeabi_dmul+0x26>
    27e0:	e076      	b.n	28d0 <__aeabi_dmul+0x114>
    27e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
    27e6:	429e      	cmp	r6, r3
    27e8:	d03a      	beq.n	2860 <__aeabi_dmul+0xa4>
    27ea:	465b      	mov	r3, fp
    27ec:	00da      	lsls	r2, r3, #3
    27ee:	2380      	movs	r3, #128	; 0x80
    27f0:	0f41      	lsrs	r1, r0, #29
    27f2:	041b      	lsls	r3, r3, #16
    27f4:	430b      	orrs	r3, r1
    27f6:	4313      	orrs	r3, r2
    27f8:	469b      	mov	fp, r3
    27fa:	4b71      	ldr	r3, [pc, #452]	; (29c0 <__aeabi_dmul+0x204>)
    27fc:	f240 0800 	movw	r8, #0
    2800:	469c      	mov	ip, r3
    2802:	2300      	movs	r3, #0
    2804:	00c7      	lsls	r7, r0, #3
    2806:	4466      	add	r6, ip
    2808:	9302      	str	r3, [sp, #8]
    280a:	464b      	mov	r3, r9
    280c:	005a      	lsls	r2, r3, #1
    280e:	031c      	lsls	r4, r3, #12
    2810:	0d52      	lsrs	r2, r2, #21
    2812:	0fdb      	lsrs	r3, r3, #31
    2814:	4650      	mov	r0, sl
    2816:	0b24      	lsrs	r4, r4, #12
    2818:	4699      	mov	r9, r3
    281a:	2a00      	cmp	r2, #0
    281c:	d100      	bne.n	2820 <__aeabi_dmul+0x64>
    281e:	e082      	b.n	2926 <__aeabi_dmul+0x16a>
    2820:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2824:	429a      	cmp	r2, r3
    2826:	d100      	bne.n	282a <__aeabi_dmul+0x6e>
    2828:	e075      	b.n	2916 <__aeabi_dmul+0x15a>
    282a:	2380      	movs	r3, #128	; 0x80
    282c:	0f41      	lsrs	r1, r0, #29
    282e:	041b      	lsls	r3, r3, #16
    2830:	430b      	orrs	r3, r1
    2832:	4963      	ldr	r1, [pc, #396]	; (29c0 <__aeabi_dmul+0x204>)
    2834:	00e4      	lsls	r4, r4, #3
    2836:	431c      	orrs	r4, r3
    2838:	00c3      	lsls	r3, r0, #3
    283a:	1850      	adds	r0, r2, r1
    283c:	2200      	movs	r2, #0
    283e:	4649      	mov	r1, r9
    2840:	1836      	adds	r6, r6, r0
    2842:	4640      	mov	r0, r8
    2844:	4069      	eors	r1, r5
    2846:	9100      	str	r1, [sp, #0]
    2848:	1c71      	adds	r1, r6, #1
    284a:	9101      	str	r1, [sp, #4]
    284c:	4310      	orrs	r0, r2
    284e:	280f      	cmp	r0, #15
    2850:	d900      	bls.n	2854 <__aeabi_dmul+0x98>
    2852:	e0bb      	b.n	29cc <__aeabi_dmul+0x210>
    2854:	0080      	lsls	r0, r0, #2
    2856:	4680      	mov	r8, r0
    2858:	4641      	mov	r1, r8
    285a:	485a      	ldr	r0, [pc, #360]	; (29c4 <__aeabi_dmul+0x208>)
    285c:	5841      	ldr	r1, [r0, r1]
    285e:	468f      	mov	pc, r1
    2860:	465f      	mov	r7, fp
    2862:	4307      	orrs	r7, r0
    2864:	2f00      	cmp	r7, #0
    2866:	d000      	beq.n	286a <__aeabi_dmul+0xae>
    2868:	e092      	b.n	2990 <__aeabi_dmul+0x1d4>
    286a:	2302      	movs	r3, #2
    286c:	f240 0b00 	movw	fp, #0
    2870:	f240 0808 	movw	r8, #8
    2874:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2878:	9302      	str	r3, [sp, #8]
    287a:	e7c6      	b.n	280a <__aeabi_dmul+0x4e>
    287c:	4649      	mov	r1, r9
    287e:	9100      	str	r1, [sp, #0]
    2880:	2a02      	cmp	r2, #2
    2882:	d06c      	beq.n	295e <__aeabi_dmul+0x1a2>
    2884:	2a03      	cmp	r2, #3
    2886:	d100      	bne.n	288a <__aeabi_dmul+0xce>
    2888:	e214      	b.n	2cb4 <__aeabi_dmul+0x4f8>
    288a:	2a01      	cmp	r2, #1
    288c:	d000      	beq.n	2890 <__aeabi_dmul+0xd4>
    288e:	e16c      	b.n	2b6a <__aeabi_dmul+0x3ae>
    2890:	9900      	ldr	r1, [sp, #0]
    2892:	2400      	movs	r4, #0
    2894:	4011      	ands	r1, r2
    2896:	2700      	movs	r7, #0
    2898:	2200      	movs	r2, #0
    289a:	b2cd      	uxtb	r5, r1
    289c:	2100      	movs	r1, #0
    289e:	0312      	lsls	r2, r2, #12
    28a0:	0d0b      	lsrs	r3, r1, #20
    28a2:	0b12      	lsrs	r2, r2, #12
    28a4:	051b      	lsls	r3, r3, #20
    28a6:	4313      	orrs	r3, r2
    28a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    28ac:	f2c8 020f 	movt	r2, #32783	; 0x800f
    28b0:	4013      	ands	r3, r2
    28b2:	0524      	lsls	r4, r4, #20
    28b4:	431c      	orrs	r4, r3
    28b6:	0064      	lsls	r4, r4, #1
    28b8:	07ed      	lsls	r5, r5, #31
    28ba:	0864      	lsrs	r4, r4, #1
    28bc:	432c      	orrs	r4, r5
    28be:	0038      	movs	r0, r7
    28c0:	0021      	movs	r1, r4
    28c2:	b007      	add	sp, #28
    28c4:	bc3c      	pop	{r2, r3, r4, r5}
    28c6:	4690      	mov	r8, r2
    28c8:	4699      	mov	r9, r3
    28ca:	46a2      	mov	sl, r4
    28cc:	46ab      	mov	fp, r5
    28ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28d0:	001f      	movs	r7, r3
    28d2:	4307      	orrs	r7, r0
    28d4:	2f00      	cmp	r7, #0
    28d6:	d053      	beq.n	2980 <__aeabi_dmul+0x1c4>
    28d8:	2b00      	cmp	r3, #0
    28da:	d100      	bne.n	28de <__aeabi_dmul+0x122>
    28dc:	e192      	b.n	2c04 <__aeabi_dmul+0x448>
    28de:	0018      	movs	r0, r3
    28e0:	f000 fe28 	bl	3534 <__clzsi2>
    28e4:	0003      	movs	r3, r0
    28e6:	3b0b      	subs	r3, #11
    28e8:	2b1c      	cmp	r3, #28
    28ea:	dd00      	ble.n	28ee <__aeabi_dmul+0x132>
    28ec:	e184      	b.n	2bf8 <__aeabi_dmul+0x43c>
    28ee:	221d      	movs	r2, #29
    28f0:	1ad3      	subs	r3, r2, r3
    28f2:	0022      	movs	r2, r4
    28f4:	0001      	movs	r1, r0
    28f6:	465e      	mov	r6, fp
    28f8:	40da      	lsrs	r2, r3
    28fa:	3908      	subs	r1, #8
    28fc:	408e      	lsls	r6, r1
    28fe:	0013      	movs	r3, r2
    2900:	408c      	lsls	r4, r1
    2902:	4333      	orrs	r3, r6
    2904:	469b      	mov	fp, r3
    2906:	0027      	movs	r7, r4
    2908:	2300      	movs	r3, #0
    290a:	4e2f      	ldr	r6, [pc, #188]	; (29c8 <__aeabi_dmul+0x20c>)
    290c:	f240 0800 	movw	r8, #0
    2910:	1a36      	subs	r6, r6, r0
    2912:	9302      	str	r3, [sp, #8]
    2914:	e779      	b.n	280a <__aeabi_dmul+0x4e>
    2916:	4653      	mov	r3, sl
    2918:	4323      	orrs	r3, r4
    291a:	bb63      	cbnz	r3, 2976 <__aeabi_dmul+0x1ba>
    291c:	2400      	movs	r4, #0
    291e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    2922:	2202      	movs	r2, #2
    2924:	e78b      	b.n	283e <__aeabi_dmul+0x82>
    2926:	4653      	mov	r3, sl
    2928:	4323      	orrs	r3, r4
    292a:	b303      	cbz	r3, 296e <__aeabi_dmul+0x1b2>
    292c:	2c00      	cmp	r4, #0
    292e:	d100      	bne.n	2932 <__aeabi_dmul+0x176>
    2930:	e15e      	b.n	2bf0 <__aeabi_dmul+0x434>
    2932:	0020      	movs	r0, r4
    2934:	f000 fdfe 	bl	3534 <__clzsi2>
    2938:	0003      	movs	r3, r0
    293a:	3b0b      	subs	r3, #11
    293c:	2b1c      	cmp	r3, #28
    293e:	dd00      	ble.n	2942 <__aeabi_dmul+0x186>
    2940:	e150      	b.n	2be4 <__aeabi_dmul+0x428>
    2942:	211d      	movs	r1, #29
    2944:	1acb      	subs	r3, r1, r3
    2946:	4651      	mov	r1, sl
    2948:	0002      	movs	r2, r0
    294a:	40d9      	lsrs	r1, r3
    294c:	4653      	mov	r3, sl
    294e:	3a08      	subs	r2, #8
    2950:	4094      	lsls	r4, r2
    2952:	4093      	lsls	r3, r2
    2954:	430c      	orrs	r4, r1
    2956:	4a1c      	ldr	r2, [pc, #112]	; (29c8 <__aeabi_dmul+0x20c>)
    2958:	1a10      	subs	r0, r2, r0
    295a:	2200      	movs	r2, #0
    295c:	e76f      	b.n	283e <__aeabi_dmul+0x82>
    295e:	2501      	movs	r5, #1
    2960:	9b00      	ldr	r3, [sp, #0]
    2962:	f240 74ff 	movw	r4, #2047	; 0x7ff
    2966:	401d      	ands	r5, r3
    2968:	2200      	movs	r2, #0
    296a:	2700      	movs	r7, #0
    296c:	e796      	b.n	289c <__aeabi_dmul+0xe0>
    296e:	2400      	movs	r4, #0
    2970:	2000      	movs	r0, #0
    2972:	2201      	movs	r2, #1
    2974:	e763      	b.n	283e <__aeabi_dmul+0x82>
    2976:	4653      	mov	r3, sl
    2978:	f240 70ff 	movw	r0, #2047	; 0x7ff
    297c:	2203      	movs	r2, #3
    297e:	e75e      	b.n	283e <__aeabi_dmul+0x82>
    2980:	2301      	movs	r3, #1
    2982:	f240 0b00 	movw	fp, #0
    2986:	f240 0804 	movw	r8, #4
    298a:	2600      	movs	r6, #0
    298c:	9302      	str	r3, [sp, #8]
    298e:	e73c      	b.n	280a <__aeabi_dmul+0x4e>
    2990:	2303      	movs	r3, #3
    2992:	0007      	movs	r7, r0
    2994:	f240 080c 	movw	r8, #12
    2998:	f240 76ff 	movw	r6, #2047	; 0x7ff
    299c:	9302      	str	r3, [sp, #8]
    299e:	e734      	b.n	280a <__aeabi_dmul+0x4e>
    29a0:	2280      	movs	r2, #128	; 0x80
    29a2:	2500      	movs	r5, #0
    29a4:	2700      	movs	r7, #0
    29a6:	0312      	lsls	r2, r2, #12
    29a8:	f240 74ff 	movw	r4, #2047	; 0x7ff
    29ac:	e776      	b.n	289c <__aeabi_dmul+0xe0>
    29ae:	465c      	mov	r4, fp
    29b0:	003b      	movs	r3, r7
    29b2:	9a02      	ldr	r2, [sp, #8]
    29b4:	e764      	b.n	2880 <__aeabi_dmul+0xc4>
    29b6:	465c      	mov	r4, fp
    29b8:	003b      	movs	r3, r7
    29ba:	9500      	str	r5, [sp, #0]
    29bc:	9a02      	ldr	r2, [sp, #8]
    29be:	e75f      	b.n	2880 <__aeabi_dmul+0xc4>
    29c0:	fffffc01 	.word	0xfffffc01
    29c4:	00003ad0 	.word	0x00003ad0
    29c8:	fffffc0d 	.word	0xfffffc0d
    29cc:	f64f 75ff 	movw	r5, #65535	; 0xffff
    29d0:	0c3a      	lsrs	r2, r7, #16
    29d2:	4694      	mov	ip, r2
    29d4:	0c1a      	lsrs	r2, r3, #16
    29d6:	402b      	ands	r3, r5
    29d8:	0019      	movs	r1, r3
    29da:	402f      	ands	r7, r5
    29dc:	4379      	muls	r1, r7
    29de:	4689      	mov	r9, r1
    29e0:	4661      	mov	r1, ip
    29e2:	4648      	mov	r0, r9
    29e4:	4359      	muls	r1, r3
    29e6:	0015      	movs	r5, r2
    29e8:	4688      	mov	r8, r1
    29ea:	4661      	mov	r1, ip
    29ec:	0c00      	lsrs	r0, r0, #16
    29ee:	4682      	mov	sl, r0
    29f0:	437d      	muls	r5, r7
    29f2:	4351      	muls	r1, r2
    29f4:	4445      	add	r5, r8
    29f6:	4455      	add	r5, sl
    29f8:	9102      	str	r1, [sp, #8]
    29fa:	45a8      	cmp	r8, r5
    29fc:	d904      	bls.n	2a08 <__aeabi_dmul+0x24c>
    29fe:	2080      	movs	r0, #128	; 0x80
    2a00:	0240      	lsls	r0, r0, #9
    2a02:	4680      	mov	r8, r0
    2a04:	4441      	add	r1, r8
    2a06:	9102      	str	r1, [sp, #8]
    2a08:	f64f 78ff 	movw	r8, #65535	; 0xffff
    2a0c:	0c29      	lsrs	r1, r5, #16
    2a0e:	4640      	mov	r0, r8
    2a10:	9103      	str	r1, [sp, #12]
    2a12:	4649      	mov	r1, r9
    2a14:	042d      	lsls	r5, r5, #16
    2a16:	4001      	ands	r1, r0
    2a18:	4689      	mov	r9, r1
    2a1a:	0029      	movs	r1, r5
    2a1c:	0c25      	lsrs	r5, r4, #16
    2a1e:	4449      	add	r1, r9
    2a20:	4004      	ands	r4, r0
    2a22:	9104      	str	r1, [sp, #16]
    2a24:	0021      	movs	r1, r4
    2a26:	4379      	muls	r1, r7
    2a28:	4688      	mov	r8, r1
    2a2a:	4661      	mov	r1, ip
    2a2c:	4361      	muls	r1, r4
    2a2e:	4689      	mov	r9, r1
    2a30:	4661      	mov	r1, ip
    2a32:	4369      	muls	r1, r5
    2a34:	468c      	mov	ip, r1
    2a36:	4641      	mov	r1, r8
    2a38:	0c09      	lsrs	r1, r1, #16
    2a3a:	468a      	mov	sl, r1
    2a3c:	436f      	muls	r7, r5
    2a3e:	444f      	add	r7, r9
    2a40:	4457      	add	r7, sl
    2a42:	45b9      	cmp	r9, r7
    2a44:	d903      	bls.n	2a4e <__aeabi_dmul+0x292>
    2a46:	2180      	movs	r1, #128	; 0x80
    2a48:	0249      	lsls	r1, r1, #9
    2a4a:	4689      	mov	r9, r1
    2a4c:	44cc      	add	ip, r9
    2a4e:	0c39      	lsrs	r1, r7, #16
    2a50:	4461      	add	r1, ip
    2a52:	f64f 7cff 	movw	ip, #65535	; 0xffff
    2a56:	9105      	str	r1, [sp, #20]
    2a58:	4660      	mov	r0, ip
    2a5a:	4641      	mov	r1, r8
    2a5c:	4001      	ands	r1, r0
    2a5e:	4688      	mov	r8, r1
    2a60:	9903      	ldr	r1, [sp, #12]
    2a62:	043f      	lsls	r7, r7, #16
    2a64:	4447      	add	r7, r8
    2a66:	4688      	mov	r8, r1
    2a68:	44b8      	add	r8, r7
    2a6a:	4641      	mov	r1, r8
    2a6c:	9103      	str	r1, [sp, #12]
    2a6e:	4659      	mov	r1, fp
    2a70:	0c09      	lsrs	r1, r1, #16
    2a72:	4688      	mov	r8, r1
    2a74:	4658      	mov	r0, fp
    2a76:	4661      	mov	r1, ip
    2a78:	4001      	ands	r1, r0
    2a7a:	468c      	mov	ip, r1
    2a7c:	4359      	muls	r1, r3
    2a7e:	4689      	mov	r9, r1
    2a80:	4641      	mov	r1, r8
    2a82:	434b      	muls	r3, r1
    2a84:	4351      	muls	r1, r2
    2a86:	468a      	mov	sl, r1
    2a88:	4661      	mov	r1, ip
    2a8a:	434a      	muls	r2, r1
    2a8c:	4649      	mov	r1, r9
    2a8e:	0c09      	lsrs	r1, r1, #16
    2a90:	468b      	mov	fp, r1
    2a92:	18d2      	adds	r2, r2, r3
    2a94:	445a      	add	r2, fp
    2a96:	4293      	cmp	r3, r2
    2a98:	d903      	bls.n	2aa2 <__aeabi_dmul+0x2e6>
    2a9a:	2380      	movs	r3, #128	; 0x80
    2a9c:	025b      	lsls	r3, r3, #9
    2a9e:	469b      	mov	fp, r3
    2aa0:	44da      	add	sl, fp
    2aa2:	0c13      	lsrs	r3, r2, #16
    2aa4:	4453      	add	r3, sl
    2aa6:	f64f 7aff 	movw	sl, #65535	; 0xffff
    2aaa:	4648      	mov	r0, r9
    2aac:	4651      	mov	r1, sl
    2aae:	4001      	ands	r1, r0
    2ab0:	4689      	mov	r9, r1
    2ab2:	4641      	mov	r1, r8
    2ab4:	4361      	muls	r1, r4
    2ab6:	468a      	mov	sl, r1
    2ab8:	4641      	mov	r1, r8
    2aba:	4369      	muls	r1, r5
    2abc:	0412      	lsls	r2, r2, #16
    2abe:	4491      	add	r9, r2
    2ac0:	4688      	mov	r8, r1
    2ac2:	4662      	mov	r2, ip
    2ac4:	4661      	mov	r1, ip
    2ac6:	4362      	muls	r2, r4
    2ac8:	434d      	muls	r5, r1
    2aca:	0c14      	lsrs	r4, r2, #16
    2acc:	4455      	add	r5, sl
    2ace:	1964      	adds	r4, r4, r5
    2ad0:	45a2      	cmp	sl, r4
    2ad2:	d903      	bls.n	2adc <__aeabi_dmul+0x320>
    2ad4:	2180      	movs	r1, #128	; 0x80
    2ad6:	0249      	lsls	r1, r1, #9
    2ad8:	468c      	mov	ip, r1
    2ada:	44e0      	add	r8, ip
    2adc:	9803      	ldr	r0, [sp, #12]
    2ade:	9902      	ldr	r1, [sp, #8]
    2ae0:	4684      	mov	ip, r0
    2ae2:	4461      	add	r1, ip
    2ae4:	42b9      	cmp	r1, r7
    2ae6:	41bf      	sbcs	r7, r7
    2ae8:	f64f 7cff 	movw	ip, #65535	; 0xffff
    2aec:	000d      	movs	r5, r1
    2aee:	4279      	negs	r1, r7
    2af0:	468a      	mov	sl, r1
    2af2:	9805      	ldr	r0, [sp, #20]
    2af4:	4661      	mov	r1, ip
    2af6:	4684      	mov	ip, r0
    2af8:	0427      	lsls	r7, r4, #16
    2afa:	4011      	ands	r1, r2
    2afc:	187a      	adds	r2, r7, r1
    2afe:	4462      	add	r2, ip
    2b00:	444d      	add	r5, r9
    2b02:	4694      	mov	ip, r2
    2b04:	002f      	movs	r7, r5
    2b06:	454d      	cmp	r5, r9
    2b08:	41ad      	sbcs	r5, r5
    2b0a:	44d4      	add	ip, sl
    2b0c:	426d      	negs	r5, r5
    2b0e:	469b      	mov	fp, r3
    2b10:	4282      	cmp	r2, r0
    2b12:	4192      	sbcs	r2, r2
    2b14:	45d4      	cmp	ip, sl
    2b16:	4189      	sbcs	r1, r1
    2b18:	46a9      	mov	r9, r5
    2b1a:	44e3      	add	fp, ip
    2b1c:	4252      	negs	r2, r2
    2b1e:	4249      	negs	r1, r1
    2b20:	44d9      	add	r9, fp
    2b22:	0c24      	lsrs	r4, r4, #16
    2b24:	430a      	orrs	r2, r1
    2b26:	1912      	adds	r2, r2, r4
    2b28:	45a9      	cmp	r9, r5
    2b2a:	41ad      	sbcs	r5, r5
    2b2c:	459b      	cmp	fp, r3
    2b2e:	41a4      	sbcs	r4, r4
    2b30:	464b      	mov	r3, r9
    2b32:	426d      	negs	r5, r5
    2b34:	4264      	negs	r4, r4
    2b36:	432c      	orrs	r4, r5
    2b38:	1914      	adds	r4, r2, r4
    2b3a:	4444      	add	r4, r8
    2b3c:	0ddb      	lsrs	r3, r3, #23
    2b3e:	0264      	lsls	r4, r4, #9
    2b40:	431c      	orrs	r4, r3
    2b42:	9b04      	ldr	r3, [sp, #16]
    2b44:	027d      	lsls	r5, r7, #9
    2b46:	431d      	orrs	r5, r3
    2b48:	002b      	movs	r3, r5
    2b4a:	1e5d      	subs	r5, r3, #1
    2b4c:	41ab      	sbcs	r3, r5
    2b4e:	0dff      	lsrs	r7, r7, #23
    2b50:	431f      	orrs	r7, r3
    2b52:	464b      	mov	r3, r9
    2b54:	025b      	lsls	r3, r3, #9
    2b56:	433b      	orrs	r3, r7
    2b58:	01e2      	lsls	r2, r4, #7
    2b5a:	d557      	bpl.n	2c0c <__aeabi_dmul+0x450>
    2b5c:	2701      	movs	r7, #1
    2b5e:	085a      	lsrs	r2, r3, #1
    2b60:	403b      	ands	r3, r7
    2b62:	4313      	orrs	r3, r2
    2b64:	07e7      	lsls	r7, r4, #31
    2b66:	433b      	orrs	r3, r7
    2b68:	0864      	lsrs	r4, r4, #1
    2b6a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2b6e:	9901      	ldr	r1, [sp, #4]
    2b70:	188e      	adds	r6, r1, r2
    2b72:	2e00      	cmp	r6, #0
    2b74:	dd4c      	ble.n	2c10 <__aeabi_dmul+0x454>
    2b76:	075a      	lsls	r2, r3, #29
    2b78:	d009      	beq.n	2b8e <__aeabi_dmul+0x3d2>
    2b7a:	220f      	movs	r2, #15
    2b7c:	401a      	ands	r2, r3
    2b7e:	2a04      	cmp	r2, #4
    2b80:	d005      	beq.n	2b8e <__aeabi_dmul+0x3d2>
    2b82:	1d1a      	adds	r2, r3, #4
    2b84:	429a      	cmp	r2, r3
    2b86:	419b      	sbcs	r3, r3
    2b88:	425b      	negs	r3, r3
    2b8a:	18e4      	adds	r4, r4, r3
    2b8c:	0013      	movs	r3, r2
    2b8e:	01e2      	lsls	r2, r4, #7
    2b90:	d505      	bpl.n	2b9e <__aeabi_dmul+0x3e2>
    2b92:	4a4d      	ldr	r2, [pc, #308]	; (2cc8 <__aeabi_dmul+0x50c>)
    2b94:	9901      	ldr	r1, [sp, #4]
    2b96:	4014      	ands	r4, r2
    2b98:	f240 4200 	movw	r2, #1024	; 0x400
    2b9c:	188e      	adds	r6, r1, r2
    2b9e:	f240 72fe 	movw	r2, #2046	; 0x7fe
    2ba2:	4296      	cmp	r6, r2
    2ba4:	dd00      	ble.n	2ba8 <__aeabi_dmul+0x3ec>
    2ba6:	e6da      	b.n	295e <__aeabi_dmul+0x1a2>
    2ba8:	0767      	lsls	r7, r4, #29
    2baa:	0264      	lsls	r4, r4, #9
    2bac:	0b22      	lsrs	r2, r4, #12
    2bae:	2501      	movs	r5, #1
    2bb0:	f240 74ff 	movw	r4, #2047	; 0x7ff
    2bb4:	08db      	lsrs	r3, r3, #3
    2bb6:	431f      	orrs	r7, r3
    2bb8:	9b00      	ldr	r3, [sp, #0]
    2bba:	4034      	ands	r4, r6
    2bbc:	401d      	ands	r5, r3
    2bbe:	e66d      	b.n	289c <__aeabi_dmul+0xe0>
    2bc0:	2280      	movs	r2, #128	; 0x80
    2bc2:	4659      	mov	r1, fp
    2bc4:	0312      	lsls	r2, r2, #12
    2bc6:	4211      	tst	r1, r2
    2bc8:	d007      	beq.n	2bda <__aeabi_dmul+0x41e>
    2bca:	4214      	tst	r4, r2
    2bcc:	d105      	bne.n	2bda <__aeabi_dmul+0x41e>
    2bce:	4322      	orrs	r2, r4
    2bd0:	0312      	lsls	r2, r2, #12
    2bd2:	0b12      	lsrs	r2, r2, #12
    2bd4:	464d      	mov	r5, r9
    2bd6:	001f      	movs	r7, r3
    2bd8:	e6e6      	b.n	29a8 <__aeabi_dmul+0x1ec>
    2bda:	465b      	mov	r3, fp
    2bdc:	431a      	orrs	r2, r3
    2bde:	0312      	lsls	r2, r2, #12
    2be0:	0b12      	lsrs	r2, r2, #12
    2be2:	e6e1      	b.n	29a8 <__aeabi_dmul+0x1ec>
    2be4:	0003      	movs	r3, r0
    2be6:	4654      	mov	r4, sl
    2be8:	3b28      	subs	r3, #40	; 0x28
    2bea:	409c      	lsls	r4, r3
    2bec:	2300      	movs	r3, #0
    2bee:	e6b2      	b.n	2956 <__aeabi_dmul+0x19a>
    2bf0:	f000 fca0 	bl	3534 <__clzsi2>
    2bf4:	3020      	adds	r0, #32
    2bf6:	e69f      	b.n	2938 <__aeabi_dmul+0x17c>
    2bf8:	0003      	movs	r3, r0
    2bfa:	3b28      	subs	r3, #40	; 0x28
    2bfc:	409c      	lsls	r4, r3
    2bfe:	2700      	movs	r7, #0
    2c00:	46a3      	mov	fp, r4
    2c02:	e681      	b.n	2908 <__aeabi_dmul+0x14c>
    2c04:	f000 fc96 	bl	3534 <__clzsi2>
    2c08:	3020      	adds	r0, #32
    2c0a:	e66b      	b.n	28e4 <__aeabi_dmul+0x128>
    2c0c:	9601      	str	r6, [sp, #4]
    2c0e:	e7ac      	b.n	2b6a <__aeabi_dmul+0x3ae>
    2c10:	2501      	movs	r5, #1
    2c12:	1baa      	subs	r2, r5, r6
    2c14:	2a38      	cmp	r2, #56	; 0x38
    2c16:	dd05      	ble.n	2c24 <__aeabi_dmul+0x468>
    2c18:	9b00      	ldr	r3, [sp, #0]
    2c1a:	2400      	movs	r4, #0
    2c1c:	401d      	ands	r5, r3
    2c1e:	2200      	movs	r2, #0
    2c20:	2700      	movs	r7, #0
    2c22:	e63b      	b.n	289c <__aeabi_dmul+0xe0>
    2c24:	2a1f      	cmp	r2, #31
    2c26:	dc20      	bgt.n	2c6a <__aeabi_dmul+0x4ae>
    2c28:	2520      	movs	r5, #32
    2c2a:	0020      	movs	r0, r4
    2c2c:	1aad      	subs	r5, r5, r2
    2c2e:	001e      	movs	r6, r3
    2c30:	40ab      	lsls	r3, r5
    2c32:	40a8      	lsls	r0, r5
    2c34:	40d6      	lsrs	r6, r2
    2c36:	1e5d      	subs	r5, r3, #1
    2c38:	41ab      	sbcs	r3, r5
    2c3a:	4330      	orrs	r0, r6
    2c3c:	4318      	orrs	r0, r3
    2c3e:	40d4      	lsrs	r4, r2
    2c40:	0743      	lsls	r3, r0, #29
    2c42:	d009      	beq.n	2c58 <__aeabi_dmul+0x49c>
    2c44:	230f      	movs	r3, #15
    2c46:	4003      	ands	r3, r0
    2c48:	2b04      	cmp	r3, #4
    2c4a:	d005      	beq.n	2c58 <__aeabi_dmul+0x49c>
    2c4c:	0003      	movs	r3, r0
    2c4e:	1d18      	adds	r0, r3, #4
    2c50:	4298      	cmp	r0, r3
    2c52:	419b      	sbcs	r3, r3
    2c54:	425b      	negs	r3, r3
    2c56:	18e4      	adds	r4, r4, r3
    2c58:	0223      	lsls	r3, r4, #8
    2c5a:	d51e      	bpl.n	2c9a <__aeabi_dmul+0x4de>
    2c5c:	2501      	movs	r5, #1
    2c5e:	9b00      	ldr	r3, [sp, #0]
    2c60:	2401      	movs	r4, #1
    2c62:	401d      	ands	r5, r3
    2c64:	2200      	movs	r2, #0
    2c66:	2700      	movs	r7, #0
    2c68:	e618      	b.n	289c <__aeabi_dmul+0xe0>
    2c6a:	201f      	movs	r0, #31
    2c6c:	0027      	movs	r7, r4
    2c6e:	4240      	negs	r0, r0
    2c70:	1b86      	subs	r6, r0, r6
    2c72:	40f7      	lsrs	r7, r6
    2c74:	2a20      	cmp	r2, #32
    2c76:	d01b      	beq.n	2cb0 <__aeabi_dmul+0x4f4>
    2c78:	305f      	adds	r0, #95	; 0x5f
    2c7a:	1a82      	subs	r2, r0, r2
    2c7c:	4094      	lsls	r4, r2
    2c7e:	4323      	orrs	r3, r4
    2c80:	1e5c      	subs	r4, r3, #1
    2c82:	41a3      	sbcs	r3, r4
    2c84:	433b      	orrs	r3, r7
    2c86:	2707      	movs	r7, #7
    2c88:	401f      	ands	r7, r3
    2c8a:	2200      	movs	r2, #0
    2c8c:	b14f      	cbz	r7, 2ca2 <__aeabi_dmul+0x4e6>
    2c8e:	220f      	movs	r2, #15
    2c90:	2400      	movs	r4, #0
    2c92:	401a      	ands	r2, r3
    2c94:	0018      	movs	r0, r3
    2c96:	2a04      	cmp	r2, #4
    2c98:	d1d9      	bne.n	2c4e <__aeabi_dmul+0x492>
    2c9a:	0003      	movs	r3, r0
    2c9c:	0767      	lsls	r7, r4, #29
    2c9e:	0264      	lsls	r4, r4, #9
    2ca0:	0b22      	lsrs	r2, r4, #12
    2ca2:	2501      	movs	r5, #1
    2ca4:	08db      	lsrs	r3, r3, #3
    2ca6:	431f      	orrs	r7, r3
    2ca8:	9b00      	ldr	r3, [sp, #0]
    2caa:	2400      	movs	r4, #0
    2cac:	401d      	ands	r5, r3
    2cae:	e5f5      	b.n	289c <__aeabi_dmul+0xe0>
    2cb0:	2400      	movs	r4, #0
    2cb2:	e7e4      	b.n	2c7e <__aeabi_dmul+0x4c2>
    2cb4:	2280      	movs	r2, #128	; 0x80
    2cb6:	2501      	movs	r5, #1
    2cb8:	0312      	lsls	r2, r2, #12
    2cba:	4322      	orrs	r2, r4
    2cbc:	9900      	ldr	r1, [sp, #0]
    2cbe:	0312      	lsls	r2, r2, #12
    2cc0:	0b12      	lsrs	r2, r2, #12
    2cc2:	400d      	ands	r5, r1
    2cc4:	001f      	movs	r7, r3
    2cc6:	e66f      	b.n	29a8 <__aeabi_dmul+0x1ec>
    2cc8:	feffffff 	.word	0xfeffffff

00002ccc <__aeabi_dsub>:
    2ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cce:	464f      	mov	r7, r9
    2cd0:	4646      	mov	r6, r8
    2cd2:	46d6      	mov	lr, sl
    2cd4:	030c      	lsls	r4, r1, #12
    2cd6:	b5c0      	push	{r6, r7, lr}
    2cd8:	0fcd      	lsrs	r5, r1, #31
    2cda:	004f      	lsls	r7, r1, #1
    2cdc:	0a61      	lsrs	r1, r4, #9
    2cde:	0f44      	lsrs	r4, r0, #29
    2ce0:	430c      	orrs	r4, r1
    2ce2:	00c1      	lsls	r1, r0, #3
    2ce4:	0058      	lsls	r0, r3, #1
    2ce6:	0d40      	lsrs	r0, r0, #21
    2ce8:	4684      	mov	ip, r0
    2cea:	f240 79ff 	movw	r9, #2047	; 0x7ff
    2cee:	468a      	mov	sl, r1
    2cf0:	000e      	movs	r6, r1
    2cf2:	0319      	lsls	r1, r3, #12
    2cf4:	0f50      	lsrs	r0, r2, #29
    2cf6:	0a49      	lsrs	r1, r1, #9
    2cf8:	0d7f      	lsrs	r7, r7, #21
    2cfa:	46a8      	mov	r8, r5
    2cfc:	0fdb      	lsrs	r3, r3, #31
    2cfe:	4301      	orrs	r1, r0
    2d00:	00d2      	lsls	r2, r2, #3
    2d02:	45cc      	cmp	ip, r9
    2d04:	d100      	bne.n	2d08 <__aeabi_dsub+0x3c>
    2d06:	e0df      	b.n	2ec8 <__aeabi_dsub+0x1fc>
    2d08:	f240 0901 	movw	r9, #1
    2d0c:	4648      	mov	r0, r9
    2d0e:	4043      	eors	r3, r0
    2d10:	42ab      	cmp	r3, r5
    2d12:	d100      	bne.n	2d16 <__aeabi_dsub+0x4a>
    2d14:	e0aa      	b.n	2e6c <__aeabi_dsub+0x1a0>
    2d16:	4660      	mov	r0, ip
    2d18:	1a3d      	subs	r5, r7, r0
    2d1a:	2d00      	cmp	r5, #0
    2d1c:	dc00      	bgt.n	2d20 <__aeabi_dsub+0x54>
    2d1e:	e10f      	b.n	2f40 <__aeabi_dsub+0x274>
    2d20:	b988      	cbnz	r0, 2d46 <__aeabi_dsub+0x7a>
    2d22:	000b      	movs	r3, r1
    2d24:	4313      	orrs	r3, r2
    2d26:	2b00      	cmp	r3, #0
    2d28:	d100      	bne.n	2d2c <__aeabi_dsub+0x60>
    2d2a:	e0e0      	b.n	2eee <__aeabi_dsub+0x222>
    2d2c:	1e6b      	subs	r3, r5, #1
    2d2e:	2b00      	cmp	r3, #0
    2d30:	d000      	beq.n	2d34 <__aeabi_dsub+0x68>
    2d32:	e160      	b.n	2ff6 <__aeabi_dsub+0x32a>
    2d34:	4653      	mov	r3, sl
    2d36:	1a9e      	subs	r6, r3, r2
    2d38:	45b2      	cmp	sl, r6
    2d3a:	4180      	sbcs	r0, r0
    2d3c:	1a64      	subs	r4, r4, r1
    2d3e:	4240      	negs	r0, r0
    2d40:	1a24      	subs	r4, r4, r0
    2d42:	2701      	movs	r7, #1
    2d44:	e01f      	b.n	2d86 <__aeabi_dsub+0xba>
    2d46:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2d4a:	429f      	cmp	r7, r3
    2d4c:	d048      	beq.n	2de0 <__aeabi_dsub+0x114>
    2d4e:	2380      	movs	r3, #128	; 0x80
    2d50:	041b      	lsls	r3, r3, #16
    2d52:	4319      	orrs	r1, r3
    2d54:	2d38      	cmp	r5, #56	; 0x38
    2d56:	dd00      	ble.n	2d5a <__aeabi_dsub+0x8e>
    2d58:	e12d      	b.n	2fb6 <__aeabi_dsub+0x2ea>
    2d5a:	2d1f      	cmp	r5, #31
    2d5c:	dd00      	ble.n	2d60 <__aeabi_dsub+0x94>
    2d5e:	e160      	b.n	3022 <__aeabi_dsub+0x356>
    2d60:	2320      	movs	r3, #32
    2d62:	000e      	movs	r6, r1
    2d64:	1b5b      	subs	r3, r3, r5
    2d66:	0010      	movs	r0, r2
    2d68:	409a      	lsls	r2, r3
    2d6a:	409e      	lsls	r6, r3
    2d6c:	40e8      	lsrs	r0, r5
    2d6e:	1e53      	subs	r3, r2, #1
    2d70:	419a      	sbcs	r2, r3
    2d72:	40e9      	lsrs	r1, r5
    2d74:	4306      	orrs	r6, r0
    2d76:	4316      	orrs	r6, r2
    2d78:	4653      	mov	r3, sl
    2d7a:	1b9e      	subs	r6, r3, r6
    2d7c:	1a61      	subs	r1, r4, r1
    2d7e:	45b2      	cmp	sl, r6
    2d80:	41a4      	sbcs	r4, r4
    2d82:	4264      	negs	r4, r4
    2d84:	1b0c      	subs	r4, r1, r4
    2d86:	0223      	lsls	r3, r4, #8
    2d88:	d400      	bmi.n	2d8c <__aeabi_dsub+0xc0>
    2d8a:	e0ce      	b.n	2f2a <__aeabi_dsub+0x25e>
    2d8c:	0264      	lsls	r4, r4, #9
    2d8e:	0a65      	lsrs	r5, r4, #9
    2d90:	2d00      	cmp	r5, #0
    2d92:	d100      	bne.n	2d96 <__aeabi_dsub+0xca>
    2d94:	e0f3      	b.n	2f7e <__aeabi_dsub+0x2b2>
    2d96:	0028      	movs	r0, r5
    2d98:	f000 fbcc 	bl	3534 <__clzsi2>
    2d9c:	0003      	movs	r3, r0
    2d9e:	3b08      	subs	r3, #8
    2da0:	2b1f      	cmp	r3, #31
    2da2:	dd00      	ble.n	2da6 <__aeabi_dsub+0xda>
    2da4:	e0f4      	b.n	2f90 <__aeabi_dsub+0x2c4>
    2da6:	2220      	movs	r2, #32
    2da8:	0034      	movs	r4, r6
    2daa:	1ad2      	subs	r2, r2, r3
    2dac:	409d      	lsls	r5, r3
    2dae:	40d4      	lsrs	r4, r2
    2db0:	409e      	lsls	r6, r3
    2db2:	4325      	orrs	r5, r4
    2db4:	429f      	cmp	r7, r3
    2db6:	dd00      	ble.n	2dba <__aeabi_dsub+0xee>
    2db8:	e0f1      	b.n	2f9e <__aeabi_dsub+0x2d2>
    2dba:	1bdf      	subs	r7, r3, r7
    2dbc:	1c7b      	adds	r3, r7, #1
    2dbe:	2b1f      	cmp	r3, #31
    2dc0:	dd00      	ble.n	2dc4 <__aeabi_dsub+0xf8>
    2dc2:	e11f      	b.n	3004 <__aeabi_dsub+0x338>
    2dc4:	2220      	movs	r2, #32
    2dc6:	0030      	movs	r0, r6
    2dc8:	1ad2      	subs	r2, r2, r3
    2dca:	0029      	movs	r1, r5
    2dcc:	4096      	lsls	r6, r2
    2dce:	002c      	movs	r4, r5
    2dd0:	4091      	lsls	r1, r2
    2dd2:	40d8      	lsrs	r0, r3
    2dd4:	1e72      	subs	r2, r6, #1
    2dd6:	4196      	sbcs	r6, r2
    2dd8:	40dc      	lsrs	r4, r3
    2dda:	2700      	movs	r7, #0
    2ddc:	4301      	orrs	r1, r0
    2dde:	430e      	orrs	r6, r1
    2de0:	0773      	lsls	r3, r6, #29
    2de2:	d009      	beq.n	2df8 <__aeabi_dsub+0x12c>
    2de4:	230f      	movs	r3, #15
    2de6:	4033      	ands	r3, r6
    2de8:	2b04      	cmp	r3, #4
    2dea:	d005      	beq.n	2df8 <__aeabi_dsub+0x12c>
    2dec:	1d33      	adds	r3, r6, #4
    2dee:	42b3      	cmp	r3, r6
    2df0:	41b6      	sbcs	r6, r6
    2df2:	4276      	negs	r6, r6
    2df4:	19a4      	adds	r4, r4, r6
    2df6:	001e      	movs	r6, r3
    2df8:	0223      	lsls	r3, r4, #8
    2dfa:	d528      	bpl.n	2e4e <__aeabi_dsub+0x182>
    2dfc:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2e00:	3701      	adds	r7, #1
    2e02:	429f      	cmp	r7, r3
    2e04:	d100      	bne.n	2e08 <__aeabi_dsub+0x13c>
    2e06:	e0ce      	b.n	2fa6 <__aeabi_dsub+0x2da>
    2e08:	401f      	ands	r7, r3
    2e0a:	2501      	movs	r5, #1
    2e0c:	4643      	mov	r3, r8
    2e0e:	4ac1      	ldr	r2, [pc, #772]	; (3114 <__aeabi_dsub+0x448>)
    2e10:	08f6      	lsrs	r6, r6, #3
    2e12:	4014      	ands	r4, r2
    2e14:	0762      	lsls	r2, r4, #29
    2e16:	0264      	lsls	r4, r4, #9
    2e18:	4316      	orrs	r6, r2
    2e1a:	0b24      	lsrs	r4, r4, #12
    2e1c:	401d      	ands	r5, r3
    2e1e:	2100      	movs	r1, #0
    2e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2e24:	0324      	lsls	r4, r4, #12
    2e26:	0b23      	lsrs	r3, r4, #12
    2e28:	0d0c      	lsrs	r4, r1, #20
    2e2a:	0524      	lsls	r4, r4, #20
    2e2c:	431c      	orrs	r4, r3
    2e2e:	f2c8 020f 	movt	r2, #32783	; 0x800f
    2e32:	053b      	lsls	r3, r7, #20
    2e34:	4014      	ands	r4, r2
    2e36:	4323      	orrs	r3, r4
    2e38:	005b      	lsls	r3, r3, #1
    2e3a:	07ed      	lsls	r5, r5, #31
    2e3c:	085b      	lsrs	r3, r3, #1
    2e3e:	432b      	orrs	r3, r5
    2e40:	0030      	movs	r0, r6
    2e42:	0019      	movs	r1, r3
    2e44:	bc1c      	pop	{r2, r3, r4}
    2e46:	4690      	mov	r8, r2
    2e48:	4699      	mov	r9, r3
    2e4a:	46a2      	mov	sl, r4
    2e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e4e:	2501      	movs	r5, #1
    2e50:	4643      	mov	r3, r8
    2e52:	0762      	lsls	r2, r4, #29
    2e54:	08f6      	lsrs	r6, r6, #3
    2e56:	4316      	orrs	r6, r2
    2e58:	08e4      	lsrs	r4, r4, #3
    2e5a:	401d      	ands	r5, r3
    2e5c:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2e60:	429f      	cmp	r7, r3
    2e62:	d037      	beq.n	2ed4 <__aeabi_dsub+0x208>
    2e64:	0324      	lsls	r4, r4, #12
    2e66:	0b24      	lsrs	r4, r4, #12
    2e68:	401f      	ands	r7, r3
    2e6a:	e7d8      	b.n	2e1e <__aeabi_dsub+0x152>
    2e6c:	4663      	mov	r3, ip
    2e6e:	1afb      	subs	r3, r7, r3
    2e70:	2b00      	cmp	r3, #0
    2e72:	dc00      	bgt.n	2e76 <__aeabi_dsub+0x1aa>
    2e74:	e0a5      	b.n	2fc2 <__aeabi_dsub+0x2f6>
    2e76:	4660      	mov	r0, ip
    2e78:	b3d8      	cbz	r0, 2ef2 <__aeabi_dsub+0x226>
    2e7a:	f240 7cff 	movw	ip, #2047	; 0x7ff
    2e7e:	4567      	cmp	r7, ip
    2e80:	d0ae      	beq.n	2de0 <__aeabi_dsub+0x114>
    2e82:	2680      	movs	r6, #128	; 0x80
    2e84:	0436      	lsls	r6, r6, #16
    2e86:	4331      	orrs	r1, r6
    2e88:	2b38      	cmp	r3, #56	; 0x38
    2e8a:	dc00      	bgt.n	2e8e <__aeabi_dsub+0x1c2>
    2e8c:	e10a      	b.n	30a4 <__aeabi_dsub+0x3d8>
    2e8e:	430a      	orrs	r2, r1
    2e90:	0016      	movs	r6, r2
    2e92:	2100      	movs	r1, #0
    2e94:	1e72      	subs	r2, r6, #1
    2e96:	4196      	sbcs	r6, r2
    2e98:	4456      	add	r6, sl
    2e9a:	4556      	cmp	r6, sl
    2e9c:	4180      	sbcs	r0, r0
    2e9e:	1909      	adds	r1, r1, r4
    2ea0:	4244      	negs	r4, r0
    2ea2:	190c      	adds	r4, r1, r4
    2ea4:	0223      	lsls	r3, r4, #8
    2ea6:	d540      	bpl.n	2f2a <__aeabi_dsub+0x25e>
    2ea8:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2eac:	3701      	adds	r7, #1
    2eae:	429f      	cmp	r7, r3
    2eb0:	d100      	bne.n	2eb4 <__aeabi_dsub+0x1e8>
    2eb2:	e15e      	b.n	3172 <__aeabi_dsub+0x4a6>
    2eb4:	2201      	movs	r2, #1
    2eb6:	4b97      	ldr	r3, [pc, #604]	; (3114 <__aeabi_dsub+0x448>)
    2eb8:	401c      	ands	r4, r3
    2eba:	0873      	lsrs	r3, r6, #1
    2ebc:	4016      	ands	r6, r2
    2ebe:	431e      	orrs	r6, r3
    2ec0:	07e2      	lsls	r2, r4, #31
    2ec2:	4316      	orrs	r6, r2
    2ec4:	0864      	lsrs	r4, r4, #1
    2ec6:	e78b      	b.n	2de0 <__aeabi_dsub+0x114>
    2ec8:	0008      	movs	r0, r1
    2eca:	4310      	orrs	r0, r2
    2ecc:	2800      	cmp	r0, #0
    2ece:	d000      	beq.n	2ed2 <__aeabi_dsub+0x206>
    2ed0:	e71e      	b.n	2d10 <__aeabi_dsub+0x44>
    2ed2:	e719      	b.n	2d08 <__aeabi_dsub+0x3c>
    2ed4:	0023      	movs	r3, r4
    2ed6:	4333      	orrs	r3, r6
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d100      	bne.n	2ede <__aeabi_dsub+0x212>
    2edc:	e1df      	b.n	329e <__aeabi_dsub+0x5d2>
    2ede:	2380      	movs	r3, #128	; 0x80
    2ee0:	031b      	lsls	r3, r3, #12
    2ee2:	431c      	orrs	r4, r3
    2ee4:	0324      	lsls	r4, r4, #12
    2ee6:	0b24      	lsrs	r4, r4, #12
    2ee8:	f240 77ff 	movw	r7, #2047	; 0x7ff
    2eec:	e797      	b.n	2e1e <__aeabi_dsub+0x152>
    2eee:	002f      	movs	r7, r5
    2ef0:	e776      	b.n	2de0 <__aeabi_dsub+0x114>
    2ef2:	0008      	movs	r0, r1
    2ef4:	4310      	orrs	r0, r2
    2ef6:	2800      	cmp	r0, #0
    2ef8:	d100      	bne.n	2efc <__aeabi_dsub+0x230>
    2efa:	e0d1      	b.n	30a0 <__aeabi_dsub+0x3d4>
    2efc:	1e58      	subs	r0, r3, #1
    2efe:	2800      	cmp	r0, #0
    2f00:	d000      	beq.n	2f04 <__aeabi_dsub+0x238>
    2f02:	e0f3      	b.n	30ec <__aeabi_dsub+0x420>
    2f04:	4452      	add	r2, sl
    2f06:	4552      	cmp	r2, sl
    2f08:	4180      	sbcs	r0, r0
    2f0a:	1864      	adds	r4, r4, r1
    2f0c:	4240      	negs	r0, r0
    2f0e:	1824      	adds	r4, r4, r0
    2f10:	0016      	movs	r6, r2
    2f12:	2701      	movs	r7, #1
    2f14:	0223      	lsls	r3, r4, #8
    2f16:	d508      	bpl.n	2f2a <__aeabi_dsub+0x25e>
    2f18:	2702      	movs	r7, #2
    2f1a:	e7cb      	b.n	2eb4 <__aeabi_dsub+0x1e8>
    2f1c:	4664      	mov	r4, ip
    2f1e:	432c      	orrs	r4, r5
    2f20:	2c00      	cmp	r4, #0
    2f22:	d100      	bne.n	2f26 <__aeabi_dsub+0x25a>
    2f24:	e1dc      	b.n	32e0 <__aeabi_dsub+0x614>
    2f26:	002c      	movs	r4, r5
    2f28:	4666      	mov	r6, ip
    2f2a:	0773      	lsls	r3, r6, #29
    2f2c:	d000      	beq.n	2f30 <__aeabi_dsub+0x264>
    2f2e:	e759      	b.n	2de4 <__aeabi_dsub+0x118>
    2f30:	0763      	lsls	r3, r4, #29
    2f32:	08f6      	lsrs	r6, r6, #3
    2f34:	431e      	orrs	r6, r3
    2f36:	2501      	movs	r5, #1
    2f38:	4643      	mov	r3, r8
    2f3a:	08e4      	lsrs	r4, r4, #3
    2f3c:	401d      	ands	r5, r3
    2f3e:	e78d      	b.n	2e5c <__aeabi_dsub+0x190>
    2f40:	2d00      	cmp	r5, #0
    2f42:	d17d      	bne.n	3040 <__aeabi_dsub+0x374>
    2f44:	f240 75ff 	movw	r5, #2047	; 0x7ff
    2f48:	1c78      	adds	r0, r7, #1
    2f4a:	4005      	ands	r5, r0
    2f4c:	2d01      	cmp	r5, #1
    2f4e:	dc00      	bgt.n	2f52 <__aeabi_dsub+0x286>
    2f50:	e0fe      	b.n	3150 <__aeabi_dsub+0x484>
    2f52:	4650      	mov	r0, sl
    2f54:	1a80      	subs	r0, r0, r2
    2f56:	4582      	cmp	sl, r0
    2f58:	41b6      	sbcs	r6, r6
    2f5a:	1a65      	subs	r5, r4, r1
    2f5c:	4276      	negs	r6, r6
    2f5e:	1bad      	subs	r5, r5, r6
    2f60:	4684      	mov	ip, r0
    2f62:	0228      	lsls	r0, r5, #8
    2f64:	d400      	bmi.n	2f68 <__aeabi_dsub+0x29c>
    2f66:	e091      	b.n	308c <__aeabi_dsub+0x3c0>
    2f68:	4650      	mov	r0, sl
    2f6a:	1a16      	subs	r6, r2, r0
    2f6c:	42b2      	cmp	r2, r6
    2f6e:	4192      	sbcs	r2, r2
    2f70:	1b0c      	subs	r4, r1, r4
    2f72:	4255      	negs	r5, r2
    2f74:	1b65      	subs	r5, r4, r5
    2f76:	4698      	mov	r8, r3
    2f78:	2d00      	cmp	r5, #0
    2f7a:	d000      	beq.n	2f7e <__aeabi_dsub+0x2b2>
    2f7c:	e70b      	b.n	2d96 <__aeabi_dsub+0xca>
    2f7e:	0030      	movs	r0, r6
    2f80:	f000 fad8 	bl	3534 <__clzsi2>
    2f84:	3020      	adds	r0, #32
    2f86:	0003      	movs	r3, r0
    2f88:	3b08      	subs	r3, #8
    2f8a:	2b1f      	cmp	r3, #31
    2f8c:	dc00      	bgt.n	2f90 <__aeabi_dsub+0x2c4>
    2f8e:	e70a      	b.n	2da6 <__aeabi_dsub+0xda>
    2f90:	0035      	movs	r5, r6
    2f92:	3828      	subs	r0, #40	; 0x28
    2f94:	4085      	lsls	r5, r0
    2f96:	2600      	movs	r6, #0
    2f98:	429f      	cmp	r7, r3
    2f9a:	dc00      	bgt.n	2f9e <__aeabi_dsub+0x2d2>
    2f9c:	e70d      	b.n	2dba <__aeabi_dsub+0xee>
    2f9e:	4c5d      	ldr	r4, [pc, #372]	; (3114 <__aeabi_dsub+0x448>)
    2fa0:	1aff      	subs	r7, r7, r3
    2fa2:	402c      	ands	r4, r5
    2fa4:	e71c      	b.n	2de0 <__aeabi_dsub+0x114>
    2fa6:	2501      	movs	r5, #1
    2fa8:	4643      	mov	r3, r8
    2faa:	f240 77ff 	movw	r7, #2047	; 0x7ff
    2fae:	401d      	ands	r5, r3
    2fb0:	2400      	movs	r4, #0
    2fb2:	2600      	movs	r6, #0
    2fb4:	e733      	b.n	2e1e <__aeabi_dsub+0x152>
    2fb6:	430a      	orrs	r2, r1
    2fb8:	0016      	movs	r6, r2
    2fba:	2100      	movs	r1, #0
    2fbc:	1e72      	subs	r2, r6, #1
    2fbe:	4196      	sbcs	r6, r2
    2fc0:	e6da      	b.n	2d78 <__aeabi_dsub+0xac>
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d000      	beq.n	2fc8 <__aeabi_dsub+0x2fc>
    2fc6:	e0ea      	b.n	319e <__aeabi_dsub+0x4d2>
    2fc8:	f240 7cff 	movw	ip, #2047	; 0x7ff
    2fcc:	4660      	mov	r0, ip
    2fce:	1c7b      	adds	r3, r7, #1
    2fd0:	4018      	ands	r0, r3
    2fd2:	2801      	cmp	r0, #1
    2fd4:	dc00      	bgt.n	2fd8 <__aeabi_dsub+0x30c>
    2fd6:	e09f      	b.n	3118 <__aeabi_dsub+0x44c>
    2fd8:	4563      	cmp	r3, ip
    2fda:	d100      	bne.n	2fde <__aeabi_dsub+0x312>
    2fdc:	e0c7      	b.n	316e <__aeabi_dsub+0x4a2>
    2fde:	4452      	add	r2, sl
    2fe0:	4552      	cmp	r2, sl
    2fe2:	4180      	sbcs	r0, r0
    2fe4:	1864      	adds	r4, r4, r1
    2fe6:	4240      	negs	r0, r0
    2fe8:	1824      	adds	r4, r4, r0
    2fea:	07e6      	lsls	r6, r4, #31
    2fec:	0852      	lsrs	r2, r2, #1
    2fee:	4316      	orrs	r6, r2
    2ff0:	0864      	lsrs	r4, r4, #1
    2ff2:	001f      	movs	r7, r3
    2ff4:	e6f4      	b.n	2de0 <__aeabi_dsub+0x114>
    2ff6:	f240 7cff 	movw	ip, #2047	; 0x7ff
    2ffa:	4565      	cmp	r5, ip
    2ffc:	d100      	bne.n	3000 <__aeabi_dsub+0x334>
    2ffe:	e082      	b.n	3106 <__aeabi_dsub+0x43a>
    3000:	001d      	movs	r5, r3
    3002:	e6a7      	b.n	2d54 <__aeabi_dsub+0x88>
    3004:	0029      	movs	r1, r5
    3006:	3f1f      	subs	r7, #31
    3008:	40f9      	lsrs	r1, r7
    300a:	2b20      	cmp	r3, #32
    300c:	d07e      	beq.n	310c <__aeabi_dsub+0x440>
    300e:	2240      	movs	r2, #64	; 0x40
    3010:	1ad3      	subs	r3, r2, r3
    3012:	409d      	lsls	r5, r3
    3014:	432e      	orrs	r6, r5
    3016:	1e75      	subs	r5, r6, #1
    3018:	41ae      	sbcs	r6, r5
    301a:	2400      	movs	r4, #0
    301c:	430e      	orrs	r6, r1
    301e:	2700      	movs	r7, #0
    3020:	e783      	b.n	2f2a <__aeabi_dsub+0x25e>
    3022:	002b      	movs	r3, r5
    3024:	000e      	movs	r6, r1
    3026:	3b20      	subs	r3, #32
    3028:	40de      	lsrs	r6, r3
    302a:	2d20      	cmp	r5, #32
    302c:	d070      	beq.n	3110 <__aeabi_dsub+0x444>
    302e:	2340      	movs	r3, #64	; 0x40
    3030:	1b5d      	subs	r5, r3, r5
    3032:	40a9      	lsls	r1, r5
    3034:	430a      	orrs	r2, r1
    3036:	1e51      	subs	r1, r2, #1
    3038:	418a      	sbcs	r2, r1
    303a:	2100      	movs	r1, #0
    303c:	4316      	orrs	r6, r2
    303e:	e69b      	b.n	2d78 <__aeabi_dsub+0xac>
    3040:	2f00      	cmp	r7, #0
    3042:	d040      	beq.n	30c6 <__aeabi_dsub+0x3fa>
    3044:	f240 76ff 	movw	r6, #2047	; 0x7ff
    3048:	45b4      	cmp	ip, r6
    304a:	d049      	beq.n	30e0 <__aeabi_dsub+0x414>
    304c:	2680      	movs	r6, #128	; 0x80
    304e:	0436      	lsls	r6, r6, #16
    3050:	426d      	negs	r5, r5
    3052:	4334      	orrs	r4, r6
    3054:	2d38      	cmp	r5, #56	; 0x38
    3056:	dd00      	ble.n	305a <__aeabi_dsub+0x38e>
    3058:	e0c5      	b.n	31e6 <__aeabi_dsub+0x51a>
    305a:	2d1f      	cmp	r5, #31
    305c:	dd00      	ble.n	3060 <__aeabi_dsub+0x394>
    305e:	e142      	b.n	32e6 <__aeabi_dsub+0x61a>
    3060:	2720      	movs	r7, #32
    3062:	0026      	movs	r6, r4
    3064:	4650      	mov	r0, sl
    3066:	1b7f      	subs	r7, r7, r5
    3068:	40be      	lsls	r6, r7
    306a:	40e8      	lsrs	r0, r5
    306c:	4306      	orrs	r6, r0
    306e:	4650      	mov	r0, sl
    3070:	40b8      	lsls	r0, r7
    3072:	1e47      	subs	r7, r0, #1
    3074:	41b8      	sbcs	r0, r7
    3076:	40ec      	lsrs	r4, r5
    3078:	4330      	orrs	r0, r6
    307a:	1a16      	subs	r6, r2, r0
    307c:	42b2      	cmp	r2, r6
    307e:	4192      	sbcs	r2, r2
    3080:	1b0c      	subs	r4, r1, r4
    3082:	4252      	negs	r2, r2
    3084:	1aa4      	subs	r4, r4, r2
    3086:	4667      	mov	r7, ip
    3088:	4698      	mov	r8, r3
    308a:	e67c      	b.n	2d86 <__aeabi_dsub+0xba>
    308c:	4664      	mov	r4, ip
    308e:	432c      	orrs	r4, r5
    3090:	4666      	mov	r6, ip
    3092:	2c00      	cmp	r4, #0
    3094:	d000      	beq.n	3098 <__aeabi_dsub+0x3cc>
    3096:	e67b      	b.n	2d90 <__aeabi_dsub+0xc4>
    3098:	2500      	movs	r5, #0
    309a:	2700      	movs	r7, #0
    309c:	2600      	movs	r6, #0
    309e:	e6dd      	b.n	2e5c <__aeabi_dsub+0x190>
    30a0:	001f      	movs	r7, r3
    30a2:	e69d      	b.n	2de0 <__aeabi_dsub+0x114>
    30a4:	2b1f      	cmp	r3, #31
    30a6:	dc67      	bgt.n	3178 <__aeabi_dsub+0x4ac>
    30a8:	2620      	movs	r6, #32
    30aa:	1af0      	subs	r0, r6, r3
    30ac:	000e      	movs	r6, r1
    30ae:	4684      	mov	ip, r0
    30b0:	4086      	lsls	r6, r0
    30b2:	0010      	movs	r0, r2
    30b4:	40d8      	lsrs	r0, r3
    30b6:	4306      	orrs	r6, r0
    30b8:	4660      	mov	r0, ip
    30ba:	4082      	lsls	r2, r0
    30bc:	1e50      	subs	r0, r2, #1
    30be:	4182      	sbcs	r2, r0
    30c0:	40d9      	lsrs	r1, r3
    30c2:	4316      	orrs	r6, r2
    30c4:	e6e8      	b.n	2e98 <__aeabi_dsub+0x1cc>
    30c6:	0026      	movs	r6, r4
    30c8:	4650      	mov	r0, sl
    30ca:	4306      	orrs	r6, r0
    30cc:	2e00      	cmp	r6, #0
    30ce:	d100      	bne.n	30d2 <__aeabi_dsub+0x406>
    30d0:	e084      	b.n	31dc <__aeabi_dsub+0x510>
    30d2:	43ed      	mvns	r5, r5
    30d4:	2d00      	cmp	r5, #0
    30d6:	d0d0      	beq.n	307a <__aeabi_dsub+0x3ae>
    30d8:	f240 76ff 	movw	r6, #2047	; 0x7ff
    30dc:	45b4      	cmp	ip, r6
    30de:	d1b9      	bne.n	3054 <__aeabi_dsub+0x388>
    30e0:	000c      	movs	r4, r1
    30e2:	0016      	movs	r6, r2
    30e4:	f240 77ff 	movw	r7, #2047	; 0x7ff
    30e8:	4698      	mov	r8, r3
    30ea:	e679      	b.n	2de0 <__aeabi_dsub+0x114>
    30ec:	f240 79ff 	movw	r9, #2047	; 0x7ff
    30f0:	454b      	cmp	r3, r9
    30f2:	d008      	beq.n	3106 <__aeabi_dsub+0x43a>
    30f4:	0003      	movs	r3, r0
    30f6:	e6c7      	b.n	2e88 <__aeabi_dsub+0x1bc>
    30f8:	f240 76ff 	movw	r6, #2047	; 0x7ff
    30fc:	45b4      	cmp	ip, r6
    30fe:	d000      	beq.n	3102 <__aeabi_dsub+0x436>
    3100:	e080      	b.n	3204 <__aeabi_dsub+0x538>
    3102:	000c      	movs	r4, r1
    3104:	0016      	movs	r6, r2
    3106:	f240 77ff 	movw	r7, #2047	; 0x7ff
    310a:	e669      	b.n	2de0 <__aeabi_dsub+0x114>
    310c:	2500      	movs	r5, #0
    310e:	e781      	b.n	3014 <__aeabi_dsub+0x348>
    3110:	2100      	movs	r1, #0
    3112:	e78f      	b.n	3034 <__aeabi_dsub+0x368>
    3114:	ff7fffff 	.word	0xff7fffff
    3118:	0023      	movs	r3, r4
    311a:	4650      	mov	r0, sl
    311c:	4303      	orrs	r3, r0
    311e:	2f00      	cmp	r7, #0
    3120:	d000      	beq.n	3124 <__aeabi_dsub+0x458>
    3122:	e0c1      	b.n	32a8 <__aeabi_dsub+0x5dc>
    3124:	2b00      	cmp	r3, #0
    3126:	d100      	bne.n	312a <__aeabi_dsub+0x45e>
    3128:	e101      	b.n	332e <__aeabi_dsub+0x662>
    312a:	000b      	movs	r3, r1
    312c:	4313      	orrs	r3, r2
    312e:	2b00      	cmp	r3, #0
    3130:	d100      	bne.n	3134 <__aeabi_dsub+0x468>
    3132:	e655      	b.n	2de0 <__aeabi_dsub+0x114>
    3134:	4452      	add	r2, sl
    3136:	4552      	cmp	r2, sl
    3138:	4180      	sbcs	r0, r0
    313a:	1864      	adds	r4, r4, r1
    313c:	4240      	negs	r0, r0
    313e:	1824      	adds	r4, r4, r0
    3140:	0016      	movs	r6, r2
    3142:	0223      	lsls	r3, r4, #8
    3144:	d400      	bmi.n	3148 <__aeabi_dsub+0x47c>
    3146:	e6f0      	b.n	2f2a <__aeabi_dsub+0x25e>
    3148:	4b85      	ldr	r3, [pc, #532]	; (3360 <__aeabi_dsub+0x694>)
    314a:	3701      	adds	r7, #1
    314c:	401c      	ands	r4, r3
    314e:	e647      	b.n	2de0 <__aeabi_dsub+0x114>
    3150:	0025      	movs	r5, r4
    3152:	4650      	mov	r0, sl
    3154:	4305      	orrs	r5, r0
    3156:	bba7      	cbnz	r7, 31c2 <__aeabi_dsub+0x4f6>
    3158:	2d00      	cmp	r5, #0
    315a:	d168      	bne.n	322e <__aeabi_dsub+0x562>
    315c:	000c      	movs	r4, r1
    315e:	4314      	orrs	r4, r2
    3160:	2c00      	cmp	r4, #0
    3162:	d100      	bne.n	3166 <__aeabi_dsub+0x49a>
    3164:	e0bc      	b.n	32e0 <__aeabi_dsub+0x614>
    3166:	000c      	movs	r4, r1
    3168:	0016      	movs	r6, r2
    316a:	4698      	mov	r8, r3
    316c:	e638      	b.n	2de0 <__aeabi_dsub+0x114>
    316e:	f240 77ff 	movw	r7, #2047	; 0x7ff
    3172:	2400      	movs	r4, #0
    3174:	2600      	movs	r6, #0
    3176:	e671      	b.n	2e5c <__aeabi_dsub+0x190>
    3178:	001e      	movs	r6, r3
    317a:	0008      	movs	r0, r1
    317c:	3e20      	subs	r6, #32
    317e:	40f0      	lsrs	r0, r6
    3180:	0006      	movs	r6, r0
    3182:	2b20      	cmp	r3, #32
    3184:	d100      	bne.n	3188 <__aeabi_dsub+0x4bc>
    3186:	e0a9      	b.n	32dc <__aeabi_dsub+0x610>
    3188:	f240 0c40 	movw	ip, #64	; 0x40
    318c:	4660      	mov	r0, ip
    318e:	1ac3      	subs	r3, r0, r3
    3190:	4099      	lsls	r1, r3
    3192:	430a      	orrs	r2, r1
    3194:	1e51      	subs	r1, r2, #1
    3196:	418a      	sbcs	r2, r1
    3198:	2100      	movs	r1, #0
    319a:	4316      	orrs	r6, r2
    319c:	e67c      	b.n	2e98 <__aeabi_dsub+0x1cc>
    319e:	bb47      	cbnz	r7, 31f2 <__aeabi_dsub+0x526>
    31a0:	0026      	movs	r6, r4
    31a2:	4650      	mov	r0, sl
    31a4:	4306      	orrs	r6, r0
    31a6:	2e00      	cmp	r6, #0
    31a8:	d100      	bne.n	31ac <__aeabi_dsub+0x4e0>
    31aa:	e0ad      	b.n	3308 <__aeabi_dsub+0x63c>
    31ac:	43db      	mvns	r3, r3
    31ae:	2b00      	cmp	r3, #0
    31b0:	d1a2      	bne.n	30f8 <__aeabi_dsub+0x42c>
    31b2:	1886      	adds	r6, r0, r2
    31b4:	4296      	cmp	r6, r2
    31b6:	4192      	sbcs	r2, r2
    31b8:	1864      	adds	r4, r4, r1
    31ba:	4252      	negs	r2, r2
    31bc:	18a4      	adds	r4, r4, r2
    31be:	4667      	mov	r7, ip
    31c0:	e670      	b.n	2ea4 <__aeabi_dsub+0x1d8>
    31c2:	2d00      	cmp	r5, #0
    31c4:	d14c      	bne.n	3260 <__aeabi_dsub+0x594>
    31c6:	0008      	movs	r0, r1
    31c8:	4310      	orrs	r0, r2
    31ca:	2800      	cmp	r0, #0
    31cc:	d100      	bne.n	31d0 <__aeabi_dsub+0x504>
    31ce:	e09f      	b.n	3310 <__aeabi_dsub+0x644>
    31d0:	000c      	movs	r4, r1
    31d2:	0016      	movs	r6, r2
    31d4:	4698      	mov	r8, r3
    31d6:	f240 77ff 	movw	r7, #2047	; 0x7ff
    31da:	e601      	b.n	2de0 <__aeabi_dsub+0x114>
    31dc:	000c      	movs	r4, r1
    31de:	0016      	movs	r6, r2
    31e0:	4667      	mov	r7, ip
    31e2:	4698      	mov	r8, r3
    31e4:	e5fc      	b.n	2de0 <__aeabi_dsub+0x114>
    31e6:	4650      	mov	r0, sl
    31e8:	4320      	orrs	r0, r4
    31ea:	1e44      	subs	r4, r0, #1
    31ec:	41a0      	sbcs	r0, r4
    31ee:	2400      	movs	r4, #0
    31f0:	e743      	b.n	307a <__aeabi_dsub+0x3ae>
    31f2:	f240 76ff 	movw	r6, #2047	; 0x7ff
    31f6:	45b4      	cmp	ip, r6
    31f8:	d100      	bne.n	31fc <__aeabi_dsub+0x530>
    31fa:	e782      	b.n	3102 <__aeabi_dsub+0x436>
    31fc:	2680      	movs	r6, #128	; 0x80
    31fe:	0436      	lsls	r6, r6, #16
    3200:	425b      	negs	r3, r3
    3202:	4334      	orrs	r4, r6
    3204:	2b38      	cmp	r3, #56	; 0x38
    3206:	dd00      	ble.n	320a <__aeabi_dsub+0x53e>
    3208:	e089      	b.n	331e <__aeabi_dsub+0x652>
    320a:	2b1f      	cmp	r3, #31
    320c:	dd00      	ble.n	3210 <__aeabi_dsub+0x544>
    320e:	e091      	b.n	3334 <__aeabi_dsub+0x668>
    3210:	2720      	movs	r7, #32
    3212:	0026      	movs	r6, r4
    3214:	4650      	mov	r0, sl
    3216:	1aff      	subs	r7, r7, r3
    3218:	40be      	lsls	r6, r7
    321a:	40d8      	lsrs	r0, r3
    321c:	4306      	orrs	r6, r0
    321e:	4650      	mov	r0, sl
    3220:	40b8      	lsls	r0, r7
    3222:	1e47      	subs	r7, r0, #1
    3224:	41b8      	sbcs	r0, r7
    3226:	4306      	orrs	r6, r0
    3228:	40dc      	lsrs	r4, r3
    322a:	18b6      	adds	r6, r6, r2
    322c:	e7c2      	b.n	31b4 <__aeabi_dsub+0x4e8>
    322e:	000d      	movs	r5, r1
    3230:	4315      	orrs	r5, r2
    3232:	2d00      	cmp	r5, #0
    3234:	d100      	bne.n	3238 <__aeabi_dsub+0x56c>
    3236:	e5d3      	b.n	2de0 <__aeabi_dsub+0x114>
    3238:	4650      	mov	r0, sl
    323a:	1a80      	subs	r0, r0, r2
    323c:	4582      	cmp	sl, r0
    323e:	41b6      	sbcs	r6, r6
    3240:	1a65      	subs	r5, r4, r1
    3242:	4276      	negs	r6, r6
    3244:	1bad      	subs	r5, r5, r6
    3246:	4684      	mov	ip, r0
    3248:	0228      	lsls	r0, r5, #8
    324a:	d400      	bmi.n	324e <__aeabi_dsub+0x582>
    324c:	e666      	b.n	2f1c <__aeabi_dsub+0x250>
    324e:	4650      	mov	r0, sl
    3250:	1a16      	subs	r6, r2, r0
    3252:	42b2      	cmp	r2, r6
    3254:	4192      	sbcs	r2, r2
    3256:	1b0c      	subs	r4, r1, r4
    3258:	4252      	negs	r2, r2
    325a:	1aa4      	subs	r4, r4, r2
    325c:	4698      	mov	r8, r3
    325e:	e5bf      	b.n	2de0 <__aeabi_dsub+0x114>
    3260:	000d      	movs	r5, r1
    3262:	4315      	orrs	r5, r2
    3264:	f240 77ff 	movw	r7, #2047	; 0x7ff
    3268:	2d00      	cmp	r5, #0
    326a:	d100      	bne.n	326e <__aeabi_dsub+0x5a2>
    326c:	e5b8      	b.n	2de0 <__aeabi_dsub+0x114>
    326e:	4650      	mov	r0, sl
    3270:	0766      	lsls	r6, r4, #29
    3272:	08c0      	lsrs	r0, r0, #3
    3274:	4306      	orrs	r6, r0
    3276:	2080      	movs	r0, #128	; 0x80
    3278:	08e4      	lsrs	r4, r4, #3
    327a:	0300      	lsls	r0, r0, #12
    327c:	4204      	tst	r4, r0
    327e:	d007      	beq.n	3290 <__aeabi_dsub+0x5c4>
    3280:	08cd      	lsrs	r5, r1, #3
    3282:	4205      	tst	r5, r0
    3284:	d104      	bne.n	3290 <__aeabi_dsub+0x5c4>
    3286:	002c      	movs	r4, r5
    3288:	4698      	mov	r8, r3
    328a:	08d6      	lsrs	r6, r2, #3
    328c:	0749      	lsls	r1, r1, #29
    328e:	430e      	orrs	r6, r1
    3290:	0f73      	lsrs	r3, r6, #29
    3292:	00e4      	lsls	r4, r4, #3
    3294:	431c      	orrs	r4, r3
    3296:	00f6      	lsls	r6, r6, #3
    3298:	f240 77ff 	movw	r7, #2047	; 0x7ff
    329c:	e5a0      	b.n	2de0 <__aeabi_dsub+0x114>
    329e:	2600      	movs	r6, #0
    32a0:	f240 77ff 	movw	r7, #2047	; 0x7ff
    32a4:	2400      	movs	r4, #0
    32a6:	e5ba      	b.n	2e1e <__aeabi_dsub+0x152>
    32a8:	2b00      	cmp	r3, #0
    32aa:	d100      	bne.n	32ae <__aeabi_dsub+0x5e2>
    32ac:	e729      	b.n	3102 <__aeabi_dsub+0x436>
    32ae:	000b      	movs	r3, r1
    32b0:	4313      	orrs	r3, r2
    32b2:	f240 77ff 	movw	r7, #2047	; 0x7ff
    32b6:	2b00      	cmp	r3, #0
    32b8:	d100      	bne.n	32bc <__aeabi_dsub+0x5f0>
    32ba:	e591      	b.n	2de0 <__aeabi_dsub+0x114>
    32bc:	08c0      	lsrs	r0, r0, #3
    32be:	0766      	lsls	r6, r4, #29
    32c0:	4306      	orrs	r6, r0
    32c2:	2080      	movs	r0, #128	; 0x80
    32c4:	08e4      	lsrs	r4, r4, #3
    32c6:	0300      	lsls	r0, r0, #12
    32c8:	4204      	tst	r4, r0
    32ca:	d0e1      	beq.n	3290 <__aeabi_dsub+0x5c4>
    32cc:	08cb      	lsrs	r3, r1, #3
    32ce:	4203      	tst	r3, r0
    32d0:	d1de      	bne.n	3290 <__aeabi_dsub+0x5c4>
    32d2:	08d6      	lsrs	r6, r2, #3
    32d4:	0749      	lsls	r1, r1, #29
    32d6:	430e      	orrs	r6, r1
    32d8:	001c      	movs	r4, r3
    32da:	e7d9      	b.n	3290 <__aeabi_dsub+0x5c4>
    32dc:	2100      	movs	r1, #0
    32de:	e758      	b.n	3192 <__aeabi_dsub+0x4c6>
    32e0:	2500      	movs	r5, #0
    32e2:	2600      	movs	r6, #0
    32e4:	e5ba      	b.n	2e5c <__aeabi_dsub+0x190>
    32e6:	002e      	movs	r6, r5
    32e8:	0020      	movs	r0, r4
    32ea:	3e20      	subs	r6, #32
    32ec:	40f0      	lsrs	r0, r6
    32ee:	0006      	movs	r6, r0
    32f0:	2d20      	cmp	r5, #32
    32f2:	d031      	beq.n	3358 <__aeabi_dsub+0x68c>
    32f4:	2740      	movs	r7, #64	; 0x40
    32f6:	1b7d      	subs	r5, r7, r5
    32f8:	40ac      	lsls	r4, r5
    32fa:	4650      	mov	r0, sl
    32fc:	4320      	orrs	r0, r4
    32fe:	1e44      	subs	r4, r0, #1
    3300:	41a0      	sbcs	r0, r4
    3302:	2400      	movs	r4, #0
    3304:	4330      	orrs	r0, r6
    3306:	e6b8      	b.n	307a <__aeabi_dsub+0x3ae>
    3308:	000c      	movs	r4, r1
    330a:	0016      	movs	r6, r2
    330c:	4667      	mov	r7, ip
    330e:	e567      	b.n	2de0 <__aeabi_dsub+0x114>
    3310:	2480      	movs	r4, #128	; 0x80
    3312:	2500      	movs	r5, #0
    3314:	0324      	lsls	r4, r4, #12
    3316:	f240 77ff 	movw	r7, #2047	; 0x7ff
    331a:	2600      	movs	r6, #0
    331c:	e59e      	b.n	2e5c <__aeabi_dsub+0x190>
    331e:	4650      	mov	r0, sl
    3320:	4320      	orrs	r0, r4
    3322:	0006      	movs	r6, r0
    3324:	1e70      	subs	r0, r6, #1
    3326:	4186      	sbcs	r6, r0
    3328:	2400      	movs	r4, #0
    332a:	18b6      	adds	r6, r6, r2
    332c:	e742      	b.n	31b4 <__aeabi_dsub+0x4e8>
    332e:	000c      	movs	r4, r1
    3330:	0016      	movs	r6, r2
    3332:	e555      	b.n	2de0 <__aeabi_dsub+0x114>
    3334:	001e      	movs	r6, r3
    3336:	0020      	movs	r0, r4
    3338:	3e20      	subs	r6, #32
    333a:	40f0      	lsrs	r0, r6
    333c:	0006      	movs	r6, r0
    333e:	2b20      	cmp	r3, #32
    3340:	d00c      	beq.n	335c <__aeabi_dsub+0x690>
    3342:	2740      	movs	r7, #64	; 0x40
    3344:	1afb      	subs	r3, r7, r3
    3346:	409c      	lsls	r4, r3
    3348:	4650      	mov	r0, sl
    334a:	4320      	orrs	r0, r4
    334c:	1e44      	subs	r4, r0, #1
    334e:	41a0      	sbcs	r0, r4
    3350:	4306      	orrs	r6, r0
    3352:	2400      	movs	r4, #0
    3354:	18b6      	adds	r6, r6, r2
    3356:	e72d      	b.n	31b4 <__aeabi_dsub+0x4e8>
    3358:	2400      	movs	r4, #0
    335a:	e7ce      	b.n	32fa <__aeabi_dsub+0x62e>
    335c:	2400      	movs	r4, #0
    335e:	e7f3      	b.n	3348 <__aeabi_dsub+0x67c>
    3360:	ff7fffff 	.word	0xff7fffff

00003364 <__aeabi_d2iz>:
    3364:	b530      	push	{r4, r5, lr}
    3366:	f240 35fe 	movw	r5, #1022	; 0x3fe
    336a:	030a      	lsls	r2, r1, #12
    336c:	004b      	lsls	r3, r1, #1
    336e:	0b12      	lsrs	r2, r2, #12
    3370:	0d5b      	lsrs	r3, r3, #21
    3372:	0fc9      	lsrs	r1, r1, #31
    3374:	2400      	movs	r4, #0
    3376:	42ab      	cmp	r3, r5
    3378:	dd12      	ble.n	33a0 <__aeabi_d2iz+0x3c>
    337a:	f240 441d 	movw	r4, #1053	; 0x41d
    337e:	42a3      	cmp	r3, r4
    3380:	dc10      	bgt.n	33a4 <__aeabi_d2iz+0x40>
    3382:	2480      	movs	r4, #128	; 0x80
    3384:	f240 4533 	movw	r5, #1075	; 0x433
    3388:	0364      	lsls	r4, r4, #13
    338a:	4322      	orrs	r2, r4
    338c:	1aed      	subs	r5, r5, r3
    338e:	2d1f      	cmp	r5, #31
    3390:	dd0b      	ble.n	33aa <__aeabi_d2iz+0x46>
    3392:	f240 4013 	movw	r0, #1043	; 0x413
    3396:	1ac3      	subs	r3, r0, r3
    3398:	40da      	lsrs	r2, r3
    339a:	4254      	negs	r4, r2
    339c:	b901      	cbnz	r1, 33a0 <__aeabi_d2iz+0x3c>
    339e:	0014      	movs	r4, r2
    33a0:	0020      	movs	r0, r4
    33a2:	bd30      	pop	{r4, r5, pc}
    33a4:	4b04      	ldr	r3, [pc, #16]	; (33b8 <__aeabi_d2iz+0x54>)
    33a6:	18cc      	adds	r4, r1, r3
    33a8:	e7fa      	b.n	33a0 <__aeabi_d2iz+0x3c>
    33aa:	4c04      	ldr	r4, [pc, #16]	; (33bc <__aeabi_d2iz+0x58>)
    33ac:	40e8      	lsrs	r0, r5
    33ae:	46a4      	mov	ip, r4
    33b0:	4463      	add	r3, ip
    33b2:	409a      	lsls	r2, r3
    33b4:	4302      	orrs	r2, r0
    33b6:	e7f0      	b.n	339a <__aeabi_d2iz+0x36>
    33b8:	7fffffff 	.word	0x7fffffff
    33bc:	fffffbed 	.word	0xfffffbed

000033c0 <__aeabi_i2d>:
    33c0:	b570      	push	{r4, r5, r6, lr}
    33c2:	2800      	cmp	r0, #0
    33c4:	d038      	beq.n	3438 <__aeabi_i2d+0x78>
    33c6:	17c3      	asrs	r3, r0, #31
    33c8:	18c4      	adds	r4, r0, r3
    33ca:	405c      	eors	r4, r3
    33cc:	0fc5      	lsrs	r5, r0, #31
    33ce:	0020      	movs	r0, r4
    33d0:	f000 f8b0 	bl	3534 <__clzsi2>
    33d4:	f240 431e 	movw	r3, #1054	; 0x41e
    33d8:	f240 4233 	movw	r2, #1075	; 0x433
    33dc:	1a1b      	subs	r3, r3, r0
    33de:	1ad2      	subs	r2, r2, r3
    33e0:	2a1f      	cmp	r2, #31
    33e2:	dd1d      	ble.n	3420 <__aeabi_i2d+0x60>
    33e4:	f240 4213 	movw	r2, #1043	; 0x413
    33e8:	1ad2      	subs	r2, r2, r3
    33ea:	4094      	lsls	r4, r2
    33ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
    33f0:	4013      	ands	r3, r2
    33f2:	2200      	movs	r2, #0
    33f4:	0324      	lsls	r4, r4, #12
    33f6:	0b24      	lsrs	r4, r4, #12
    33f8:	2100      	movs	r1, #0
    33fa:	0010      	movs	r0, r2
    33fc:	0324      	lsls	r4, r4, #12
    33fe:	0d0a      	lsrs	r2, r1, #20
    3400:	0b24      	lsrs	r4, r4, #12
    3402:	0512      	lsls	r2, r2, #20
    3404:	4322      	orrs	r2, r4
    3406:	f64f 74ff 	movw	r4, #65535	; 0xffff
    340a:	f2c8 040f 	movt	r4, #32783	; 0x800f
    340e:	4022      	ands	r2, r4
    3410:	051b      	lsls	r3, r3, #20
    3412:	4313      	orrs	r3, r2
    3414:	005b      	lsls	r3, r3, #1
    3416:	07ed      	lsls	r5, r5, #31
    3418:	085b      	lsrs	r3, r3, #1
    341a:	432b      	orrs	r3, r5
    341c:	0019      	movs	r1, r3
    341e:	bd70      	pop	{r4, r5, r6, pc}
    3420:	0021      	movs	r1, r4
    3422:	4091      	lsls	r1, r2
    3424:	000a      	movs	r2, r1
    3426:	210b      	movs	r1, #11
    3428:	1a08      	subs	r0, r1, r0
    342a:	40c4      	lsrs	r4, r0
    342c:	f240 71ff 	movw	r1, #2047	; 0x7ff
    3430:	0324      	lsls	r4, r4, #12
    3432:	0b24      	lsrs	r4, r4, #12
    3434:	400b      	ands	r3, r1
    3436:	e7df      	b.n	33f8 <__aeabi_i2d+0x38>
    3438:	2500      	movs	r5, #0
    343a:	2300      	movs	r3, #0
    343c:	2400      	movs	r4, #0
    343e:	2200      	movs	r2, #0
    3440:	e7da      	b.n	33f8 <__aeabi_i2d+0x38>
    3442:	46c0      	nop			; (mov r8, r8)

00003444 <__aeabi_ui2d>:
    3444:	b510      	push	{r4, lr}
    3446:	0004      	movs	r4, r0
    3448:	2800      	cmp	r0, #0
    344a:	d030      	beq.n	34ae <__aeabi_ui2d+0x6a>
    344c:	f000 f872 	bl	3534 <__clzsi2>
    3450:	f240 431e 	movw	r3, #1054	; 0x41e
    3454:	f240 4233 	movw	r2, #1075	; 0x433
    3458:	1a1b      	subs	r3, r3, r0
    345a:	1ad2      	subs	r2, r2, r3
    345c:	2a1f      	cmp	r2, #31
    345e:	dd1a      	ble.n	3496 <__aeabi_ui2d+0x52>
    3460:	f240 4213 	movw	r2, #1043	; 0x413
    3464:	1ad2      	subs	r2, r2, r3
    3466:	4094      	lsls	r4, r2
    3468:	f240 72ff 	movw	r2, #2047	; 0x7ff
    346c:	4013      	ands	r3, r2
    346e:	2200      	movs	r2, #0
    3470:	0324      	lsls	r4, r4, #12
    3472:	0b24      	lsrs	r4, r4, #12
    3474:	2100      	movs	r1, #0
    3476:	0010      	movs	r0, r2
    3478:	0324      	lsls	r4, r4, #12
    347a:	0d0a      	lsrs	r2, r1, #20
    347c:	0b24      	lsrs	r4, r4, #12
    347e:	0512      	lsls	r2, r2, #20
    3480:	4322      	orrs	r2, r4
    3482:	f64f 74ff 	movw	r4, #65535	; 0xffff
    3486:	f2c8 040f 	movt	r4, #32783	; 0x800f
    348a:	4022      	ands	r2, r4
    348c:	051b      	lsls	r3, r3, #20
    348e:	4313      	orrs	r3, r2
    3490:	005b      	lsls	r3, r3, #1
    3492:	0859      	lsrs	r1, r3, #1
    3494:	bd10      	pop	{r4, pc}
    3496:	0021      	movs	r1, r4
    3498:	4091      	lsls	r1, r2
    349a:	000a      	movs	r2, r1
    349c:	210b      	movs	r1, #11
    349e:	1a08      	subs	r0, r1, r0
    34a0:	40c4      	lsrs	r4, r0
    34a2:	f240 71ff 	movw	r1, #2047	; 0x7ff
    34a6:	0324      	lsls	r4, r4, #12
    34a8:	0b24      	lsrs	r4, r4, #12
    34aa:	400b      	ands	r3, r1
    34ac:	e7e2      	b.n	3474 <__aeabi_ui2d+0x30>
    34ae:	2300      	movs	r3, #0
    34b0:	2400      	movs	r4, #0
    34b2:	2200      	movs	r2, #0
    34b4:	e7de      	b.n	3474 <__aeabi_ui2d+0x30>
    34b6:	46c0      	nop			; (mov r8, r8)

000034b8 <__aeabi_cdrcmple>:
    34b8:	4684      	mov	ip, r0
    34ba:	1c10      	adds	r0, r2, #0
    34bc:	4662      	mov	r2, ip
    34be:	468c      	mov	ip, r1
    34c0:	1c19      	adds	r1, r3, #0
    34c2:	4663      	mov	r3, ip
    34c4:	e000      	b.n	34c8 <__aeabi_cdcmpeq>
    34c6:	46c0      	nop			; (mov r8, r8)

000034c8 <__aeabi_cdcmpeq>:
    34c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    34ca:	f000 f8ef 	bl	36ac <__ledf2>
    34ce:	2800      	cmp	r0, #0
    34d0:	d401      	bmi.n	34d6 <__aeabi_cdcmpeq+0xe>
    34d2:	2100      	movs	r1, #0
    34d4:	42c8      	cmn	r0, r1
    34d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000034d8 <__aeabi_dcmpeq>:
    34d8:	b510      	push	{r4, lr}
    34da:	f000 f849 	bl	3570 <__eqdf2>
    34de:	4240      	negs	r0, r0
    34e0:	3001      	adds	r0, #1
    34e2:	bd10      	pop	{r4, pc}

000034e4 <__aeabi_dcmplt>:
    34e4:	b510      	push	{r4, lr}
    34e6:	f000 f8e1 	bl	36ac <__ledf2>
    34ea:	2800      	cmp	r0, #0
    34ec:	db01      	blt.n	34f2 <__aeabi_dcmplt+0xe>
    34ee:	2000      	movs	r0, #0
    34f0:	bd10      	pop	{r4, pc}
    34f2:	2001      	movs	r0, #1
    34f4:	bd10      	pop	{r4, pc}
    34f6:	46c0      	nop			; (mov r8, r8)

000034f8 <__aeabi_dcmple>:
    34f8:	b510      	push	{r4, lr}
    34fa:	f000 f8d7 	bl	36ac <__ledf2>
    34fe:	2800      	cmp	r0, #0
    3500:	dd01      	ble.n	3506 <__aeabi_dcmple+0xe>
    3502:	2000      	movs	r0, #0
    3504:	bd10      	pop	{r4, pc}
    3506:	2001      	movs	r0, #1
    3508:	bd10      	pop	{r4, pc}
    350a:	46c0      	nop			; (mov r8, r8)

0000350c <__aeabi_dcmpgt>:
    350c:	b510      	push	{r4, lr}
    350e:	f000 f86b 	bl	35e8 <__gedf2>
    3512:	2800      	cmp	r0, #0
    3514:	dc01      	bgt.n	351a <__aeabi_dcmpgt+0xe>
    3516:	2000      	movs	r0, #0
    3518:	bd10      	pop	{r4, pc}
    351a:	2001      	movs	r0, #1
    351c:	bd10      	pop	{r4, pc}
    351e:	46c0      	nop			; (mov r8, r8)

00003520 <__aeabi_dcmpge>:
    3520:	b510      	push	{r4, lr}
    3522:	f000 f861 	bl	35e8 <__gedf2>
    3526:	2800      	cmp	r0, #0
    3528:	da01      	bge.n	352e <__aeabi_dcmpge+0xe>
    352a:	2000      	movs	r0, #0
    352c:	bd10      	pop	{r4, pc}
    352e:	2001      	movs	r0, #1
    3530:	bd10      	pop	{r4, pc}
    3532:	46c0      	nop			; (mov r8, r8)

00003534 <__clzsi2>:
    3534:	211c      	movs	r1, #28
    3536:	2301      	movs	r3, #1
    3538:	041b      	lsls	r3, r3, #16
    353a:	4298      	cmp	r0, r3
    353c:	d301      	bcc.n	3542 <__clzsi2+0xe>
    353e:	0c00      	lsrs	r0, r0, #16
    3540:	3910      	subs	r1, #16
    3542:	0a1b      	lsrs	r3, r3, #8
    3544:	4298      	cmp	r0, r3
    3546:	d301      	bcc.n	354c <__clzsi2+0x18>
    3548:	0a00      	lsrs	r0, r0, #8
    354a:	3908      	subs	r1, #8
    354c:	091b      	lsrs	r3, r3, #4
    354e:	4298      	cmp	r0, r3
    3550:	d301      	bcc.n	3556 <__clzsi2+0x22>
    3552:	0900      	lsrs	r0, r0, #4
    3554:	3904      	subs	r1, #4
    3556:	a202      	add	r2, pc, #8	; (adr r2, 3560 <__clzsi2+0x2c>)
    3558:	5c10      	ldrb	r0, [r2, r0]
    355a:	1840      	adds	r0, r0, r1
    355c:	4770      	bx	lr
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	02020304 	.word	0x02020304
    3564:	01010101 	.word	0x01010101
	...

00003570 <__eqdf2>:
    3570:	b5f0      	push	{r4, r5, r6, r7, lr}
    3572:	464f      	mov	r7, r9
    3574:	4646      	mov	r6, r8
    3576:	46d6      	mov	lr, sl
    3578:	005c      	lsls	r4, r3, #1
    357a:	b5c0      	push	{r6, r7, lr}
    357c:	031f      	lsls	r7, r3, #12
    357e:	0fdb      	lsrs	r3, r3, #31
    3580:	469a      	mov	sl, r3
    3582:	f240 73ff 	movw	r3, #2047	; 0x7ff
    3586:	030e      	lsls	r6, r1, #12
    3588:	004d      	lsls	r5, r1, #1
    358a:	4684      	mov	ip, r0
    358c:	4680      	mov	r8, r0
    358e:	0b36      	lsrs	r6, r6, #12
    3590:	0d6d      	lsrs	r5, r5, #21
    3592:	0fc9      	lsrs	r1, r1, #31
    3594:	4691      	mov	r9, r2
    3596:	0b3f      	lsrs	r7, r7, #12
    3598:	0d64      	lsrs	r4, r4, #21
    359a:	2001      	movs	r0, #1
    359c:	429d      	cmp	r5, r3
    359e:	d008      	beq.n	35b2 <__eqdf2+0x42>
    35a0:	429c      	cmp	r4, r3
    35a2:	d001      	beq.n	35a8 <__eqdf2+0x38>
    35a4:	42a5      	cmp	r5, r4
    35a6:	d00d      	beq.n	35c4 <__eqdf2+0x54>
    35a8:	bc1c      	pop	{r2, r3, r4}
    35aa:	4690      	mov	r8, r2
    35ac:	4699      	mov	r9, r3
    35ae:	46a2      	mov	sl, r4
    35b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35b2:	4663      	mov	r3, ip
    35b4:	4333      	orrs	r3, r6
    35b6:	2b00      	cmp	r3, #0
    35b8:	d1f6      	bne.n	35a8 <__eqdf2+0x38>
    35ba:	42ac      	cmp	r4, r5
    35bc:	d1f4      	bne.n	35a8 <__eqdf2+0x38>
    35be:	433a      	orrs	r2, r7
    35c0:	2a00      	cmp	r2, #0
    35c2:	d1f1      	bne.n	35a8 <__eqdf2+0x38>
    35c4:	2001      	movs	r0, #1
    35c6:	42be      	cmp	r6, r7
    35c8:	d1ee      	bne.n	35a8 <__eqdf2+0x38>
    35ca:	45c8      	cmp	r8, r9
    35cc:	d1ec      	bne.n	35a8 <__eqdf2+0x38>
    35ce:	4551      	cmp	r1, sl
    35d0:	d007      	beq.n	35e2 <__eqdf2+0x72>
    35d2:	2d00      	cmp	r5, #0
    35d4:	d1e8      	bne.n	35a8 <__eqdf2+0x38>
    35d6:	4663      	mov	r3, ip
    35d8:	431e      	orrs	r6, r3
    35da:	0030      	movs	r0, r6
    35dc:	1e46      	subs	r6, r0, #1
    35de:	41b0      	sbcs	r0, r6
    35e0:	e7e2      	b.n	35a8 <__eqdf2+0x38>
    35e2:	2000      	movs	r0, #0
    35e4:	e7e0      	b.n	35a8 <__eqdf2+0x38>
    35e6:	46c0      	nop			; (mov r8, r8)

000035e8 <__gedf2>:
    35e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ea:	464e      	mov	r6, r9
    35ec:	4645      	mov	r5, r8
    35ee:	46de      	mov	lr, fp
    35f0:	4657      	mov	r7, sl
    35f2:	f240 79ff 	movw	r9, #2047	; 0x7ff
    35f6:	b5e0      	push	{r5, r6, r7, lr}
    35f8:	031f      	lsls	r7, r3, #12
    35fa:	0b3d      	lsrs	r5, r7, #12
    35fc:	030e      	lsls	r6, r1, #12
    35fe:	004c      	lsls	r4, r1, #1
    3600:	46ab      	mov	fp, r5
    3602:	005d      	lsls	r5, r3, #1
    3604:	4684      	mov	ip, r0
    3606:	0b36      	lsrs	r6, r6, #12
    3608:	0d64      	lsrs	r4, r4, #21
    360a:	0fc9      	lsrs	r1, r1, #31
    360c:	4690      	mov	r8, r2
    360e:	0d6d      	lsrs	r5, r5, #21
    3610:	0fdb      	lsrs	r3, r3, #31
    3612:	454c      	cmp	r4, r9
    3614:	d02e      	beq.n	3674 <__gedf2+0x8c>
    3616:	f240 79ff 	movw	r9, #2047	; 0x7ff
    361a:	454d      	cmp	r5, r9
    361c:	d01d      	beq.n	365a <__gedf2+0x72>
    361e:	b96c      	cbnz	r4, 363c <__gedf2+0x54>
    3620:	4330      	orrs	r0, r6
    3622:	0007      	movs	r7, r0
    3624:	4681      	mov	r9, r0
    3626:	4278      	negs	r0, r7
    3628:	4178      	adcs	r0, r7
    362a:	b2c0      	uxtb	r0, r0
    362c:	b9e5      	cbnz	r5, 3668 <__gedf2+0x80>
    362e:	465f      	mov	r7, fp
    3630:	433a      	orrs	r2, r7
    3632:	b9ca      	cbnz	r2, 3668 <__gedf2+0x80>
    3634:	464b      	mov	r3, r9
    3636:	2000      	movs	r0, #0
    3638:	b14b      	cbz	r3, 364e <__gedf2+0x66>
    363a:	e005      	b.n	3648 <__gedf2+0x60>
    363c:	b915      	cbnz	r5, 3644 <__gedf2+0x5c>
    363e:	4658      	mov	r0, fp
    3640:	4302      	orrs	r2, r0
    3642:	b10a      	cbz	r2, 3648 <__gedf2+0x60>
    3644:	4299      	cmp	r1, r3
    3646:	d01a      	beq.n	367e <__gedf2+0x96>
    3648:	4248      	negs	r0, r1
    364a:	2101      	movs	r1, #1
    364c:	4308      	orrs	r0, r1
    364e:	bc3c      	pop	{r2, r3, r4, r5}
    3650:	4690      	mov	r8, r2
    3652:	4699      	mov	r9, r3
    3654:	46a2      	mov	sl, r4
    3656:	46ab      	mov	fp, r5
    3658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    365a:	465f      	mov	r7, fp
    365c:	4317      	orrs	r7, r2
    365e:	2f00      	cmp	r7, #0
    3660:	d0dd      	beq.n	361e <__gedf2+0x36>
    3662:	2002      	movs	r0, #2
    3664:	4240      	negs	r0, r0
    3666:	e7f2      	b.n	364e <__gedf2+0x66>
    3668:	2800      	cmp	r0, #0
    366a:	d0eb      	beq.n	3644 <__gedf2+0x5c>
    366c:	2001      	movs	r0, #1
    366e:	3b01      	subs	r3, #1
    3670:	4318      	orrs	r0, r3
    3672:	e7ec      	b.n	364e <__gedf2+0x66>
    3674:	0037      	movs	r7, r6
    3676:	4307      	orrs	r7, r0
    3678:	2f00      	cmp	r7, #0
    367a:	d0cc      	beq.n	3616 <__gedf2+0x2e>
    367c:	e7f1      	b.n	3662 <__gedf2+0x7a>
    367e:	42ac      	cmp	r4, r5
    3680:	dce2      	bgt.n	3648 <__gedf2+0x60>
    3682:	da03      	bge.n	368c <__gedf2+0xa4>
    3684:	1e48      	subs	r0, r1, #1
    3686:	2101      	movs	r1, #1
    3688:	4308      	orrs	r0, r1
    368a:	e7e0      	b.n	364e <__gedf2+0x66>
    368c:	455e      	cmp	r6, fp
    368e:	d8db      	bhi.n	3648 <__gedf2+0x60>
    3690:	d006      	beq.n	36a0 <__gedf2+0xb8>
    3692:	2000      	movs	r0, #0
    3694:	455e      	cmp	r6, fp
    3696:	d2da      	bcs.n	364e <__gedf2+0x66>
    3698:	2301      	movs	r3, #1
    369a:	1e48      	subs	r0, r1, #1
    369c:	4318      	orrs	r0, r3
    369e:	e7d6      	b.n	364e <__gedf2+0x66>
    36a0:	45c4      	cmp	ip, r8
    36a2:	d8d1      	bhi.n	3648 <__gedf2+0x60>
    36a4:	2000      	movs	r0, #0
    36a6:	45c4      	cmp	ip, r8
    36a8:	d3f6      	bcc.n	3698 <__gedf2+0xb0>
    36aa:	e7d0      	b.n	364e <__gedf2+0x66>

000036ac <__ledf2>:
    36ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ae:	4657      	mov	r7, sl
    36b0:	464e      	mov	r6, r9
    36b2:	4645      	mov	r5, r8
    36b4:	46de      	mov	lr, fp
    36b6:	005c      	lsls	r4, r3, #1
    36b8:	b5e0      	push	{r5, r6, r7, lr}
    36ba:	031f      	lsls	r7, r3, #12
    36bc:	0fdb      	lsrs	r3, r3, #31
    36be:	469a      	mov	sl, r3
    36c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
    36c4:	030e      	lsls	r6, r1, #12
    36c6:	004d      	lsls	r5, r1, #1
    36c8:	0fc9      	lsrs	r1, r1, #31
    36ca:	4680      	mov	r8, r0
    36cc:	0b36      	lsrs	r6, r6, #12
    36ce:	0d6d      	lsrs	r5, r5, #21
    36d0:	468b      	mov	fp, r1
    36d2:	4691      	mov	r9, r2
    36d4:	0b3f      	lsrs	r7, r7, #12
    36d6:	0d64      	lsrs	r4, r4, #21
    36d8:	429d      	cmp	r5, r3
    36da:	d023      	beq.n	3724 <__ledf2+0x78>
    36dc:	f240 73ff 	movw	r3, #2047	; 0x7ff
    36e0:	429c      	cmp	r4, r3
    36e2:	d019      	beq.n	3718 <__ledf2+0x6c>
    36e4:	b985      	cbnz	r5, 3708 <__ledf2+0x5c>
    36e6:	4330      	orrs	r0, r6
    36e8:	4243      	negs	r3, r0
    36ea:	4143      	adcs	r3, r0
    36ec:	b2db      	uxtb	r3, r3
    36ee:	b1fc      	cbz	r4, 3730 <__ledf2+0x84>
    36f0:	b15b      	cbz	r3, 370a <__ledf2+0x5e>
    36f2:	4653      	mov	r3, sl
    36f4:	2001      	movs	r0, #1
    36f6:	3b01      	subs	r3, #1
    36f8:	4303      	orrs	r3, r0
    36fa:	0018      	movs	r0, r3
    36fc:	bc3c      	pop	{r2, r3, r4, r5}
    36fe:	4690      	mov	r8, r2
    3700:	4699      	mov	r9, r3
    3702:	46a2      	mov	sl, r4
    3704:	46ab      	mov	fp, r5
    3706:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3708:	b1cc      	cbz	r4, 373e <__ledf2+0x92>
    370a:	45d3      	cmp	fp, sl
    370c:	d01b      	beq.n	3746 <__ledf2+0x9a>
    370e:	465b      	mov	r3, fp
    3710:	4259      	negs	r1, r3
    3712:	2301      	movs	r3, #1
    3714:	430b      	orrs	r3, r1
    3716:	e7f0      	b.n	36fa <__ledf2+0x4e>
    3718:	0039      	movs	r1, r7
    371a:	4311      	orrs	r1, r2
    371c:	2302      	movs	r3, #2
    371e:	2900      	cmp	r1, #0
    3720:	d1eb      	bne.n	36fa <__ledf2+0x4e>
    3722:	e7df      	b.n	36e4 <__ledf2+0x38>
    3724:	0031      	movs	r1, r6
    3726:	4301      	orrs	r1, r0
    3728:	2302      	movs	r3, #2
    372a:	2900      	cmp	r1, #0
    372c:	d1e5      	bne.n	36fa <__ledf2+0x4e>
    372e:	e7d5      	b.n	36dc <__ledf2+0x30>
    3730:	433a      	orrs	r2, r7
    3732:	2a00      	cmp	r2, #0
    3734:	d1dc      	bne.n	36f0 <__ledf2+0x44>
    3736:	2300      	movs	r3, #0
    3738:	2800      	cmp	r0, #0
    373a:	d0de      	beq.n	36fa <__ledf2+0x4e>
    373c:	e7e7      	b.n	370e <__ledf2+0x62>
    373e:	433a      	orrs	r2, r7
    3740:	2a00      	cmp	r2, #0
    3742:	d1e2      	bne.n	370a <__ledf2+0x5e>
    3744:	e7e3      	b.n	370e <__ledf2+0x62>
    3746:	42a5      	cmp	r5, r4
    3748:	dce1      	bgt.n	370e <__ledf2+0x62>
    374a:	db05      	blt.n	3758 <__ledf2+0xac>
    374c:	42be      	cmp	r6, r7
    374e:	d8de      	bhi.n	370e <__ledf2+0x62>
    3750:	d007      	beq.n	3762 <__ledf2+0xb6>
    3752:	2300      	movs	r3, #0
    3754:	42be      	cmp	r6, r7
    3756:	d2d0      	bcs.n	36fa <__ledf2+0x4e>
    3758:	4659      	mov	r1, fp
    375a:	2301      	movs	r3, #1
    375c:	3901      	subs	r1, #1
    375e:	430b      	orrs	r3, r1
    3760:	e7cb      	b.n	36fa <__ledf2+0x4e>
    3762:	45c8      	cmp	r8, r9
    3764:	d8d3      	bhi.n	370e <__ledf2+0x62>
    3766:	2300      	movs	r3, #0
    3768:	45c8      	cmp	r8, r9
    376a:	d3f5      	bcc.n	3758 <__ledf2+0xac>
    376c:	e7c5      	b.n	36fa <__ledf2+0x4e>
    376e:	46c0      	nop			; (mov r8, r8)

00003770 <__libc_init_array>:
    3770:	b570      	push	{r4, r5, r6, lr}
    3772:	2500      	movs	r5, #0
    3774:	4b0e      	ldr	r3, [pc, #56]	; (37b0 <__libc_init_array+0x40>)
    3776:	4c0f      	ldr	r4, [pc, #60]	; (37b4 <__libc_init_array+0x44>)
    3778:	1ae4      	subs	r4, r4, r3
    377a:	10a4      	asrs	r4, r4, #2
    377c:	42a5      	cmp	r5, r4
    377e:	d109      	bne.n	3794 <__libc_init_array+0x24>
    3780:	2500      	movs	r5, #0
    3782:	f000 f9c5 	bl	3b10 <_init>
    3786:	4c0c      	ldr	r4, [pc, #48]	; (37b8 <__libc_init_array+0x48>)
    3788:	4b0c      	ldr	r3, [pc, #48]	; (37bc <__libc_init_array+0x4c>)
    378a:	1ae4      	subs	r4, r4, r3
    378c:	10a4      	asrs	r4, r4, #2
    378e:	42a5      	cmp	r5, r4
    3790:	d107      	bne.n	37a2 <__libc_init_array+0x32>
    3792:	bd70      	pop	{r4, r5, r6, pc}
    3794:	4a06      	ldr	r2, [pc, #24]	; (37b0 <__libc_init_array+0x40>)
    3796:	00ab      	lsls	r3, r5, #2
    3798:	189b      	adds	r3, r3, r2
    379a:	681b      	ldr	r3, [r3, #0]
    379c:	4798      	blx	r3
    379e:	3501      	adds	r5, #1
    37a0:	e7ec      	b.n	377c <__libc_init_array+0xc>
    37a2:	4a06      	ldr	r2, [pc, #24]	; (37bc <__libc_init_array+0x4c>)
    37a4:	00ab      	lsls	r3, r5, #2
    37a6:	189b      	adds	r3, r3, r2
    37a8:	681b      	ldr	r3, [r3, #0]
    37aa:	4798      	blx	r3
    37ac:	3501      	adds	r5, #1
    37ae:	e7ee      	b.n	378e <__libc_init_array+0x1e>
    37b0:	00003b1c 	.word	0x00003b1c
    37b4:	00003b1c 	.word	0x00003b1c
    37b8:	00003b20 	.word	0x00003b20
    37bc:	00003b1c 	.word	0x00003b1c

000037c0 <memcmp>:
    37c0:	b530      	push	{r4, r5, lr}
    37c2:	2400      	movs	r4, #0
    37c4:	42a2      	cmp	r2, r4
    37c6:	d101      	bne.n	37cc <memcmp+0xc>
    37c8:	2000      	movs	r0, #0
    37ca:	e005      	b.n	37d8 <memcmp+0x18>
    37cc:	5d03      	ldrb	r3, [r0, r4]
    37ce:	1c65      	adds	r5, r4, #1
    37d0:	5d0c      	ldrb	r4, [r1, r4]
    37d2:	42a3      	cmp	r3, r4
    37d4:	d001      	beq.n	37da <memcmp+0x1a>
    37d6:	1b18      	subs	r0, r3, r4
    37d8:	bd30      	pop	{r4, r5, pc}
    37da:	002c      	movs	r4, r5
    37dc:	e7f2      	b.n	37c4 <memcmp+0x4>

000037de <memcpy>:
    37de:	2300      	movs	r3, #0
    37e0:	b510      	push	{r4, lr}
    37e2:	429a      	cmp	r2, r3
    37e4:	d100      	bne.n	37e8 <memcpy+0xa>
    37e6:	bd10      	pop	{r4, pc}
    37e8:	5ccc      	ldrb	r4, [r1, r3]
    37ea:	54c4      	strb	r4, [r0, r3]
    37ec:	3301      	adds	r3, #1
    37ee:	e7f8      	b.n	37e2 <memcpy+0x4>

000037f0 <memset>:
    37f0:	0003      	movs	r3, r0
    37f2:	1882      	adds	r2, r0, r2
    37f4:	4293      	cmp	r3, r2
    37f6:	d100      	bne.n	37fa <memset+0xa>
    37f8:	4770      	bx	lr
    37fa:	7019      	strb	r1, [r3, #0]
    37fc:	3301      	adds	r3, #1
    37fe:	e7f9      	b.n	37f4 <memset+0x4>
    3800:	00000358 	.word	0x00000358
    3804:	0000036c 	.word	0x0000036c
    3808:	00000374 	.word	0x00000374
    380c:	00000358 	.word	0x00000358
    3810:	00000358 	.word	0x00000358
    3814:	00000374 	.word	0x00000374
    3818:	0000037c 	.word	0x0000037c
    381c:	00000382 	.word	0x00000382
    3820:	000003a0 	.word	0x000003a0
    3824:	000003b4 	.word	0x000003b4
    3828:	000003ba 	.word	0x000003ba
    382c:	000003c0 	.word	0x000003c0
    3830:	000003c6 	.word	0x000003c6
    3834:	000003c6 	.word	0x000003c6
    3838:	000003c6 	.word	0x000003c6
    383c:	000003c0 	.word	0x000003c0

00003840 <device_execution_time_204>:
    3840:	00260028 003e001c 002b0015 00450011     (.&...>...+...E.
    3850:	00020030 00180017 00230008 003c0016     0.........#...<.
    3860:	00020001 0032001b 00050002 00160047     ......2.....G...
    3870:	000c0020 002a0012                        .....*.

00003878 <device_execution_time_608_m0>:
    3878:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
    3888:	004b0043 00190015 00730040 00050030     C.K.....@.s.0...
    3898:	00a50056 00230017 00370008 00140016     V.....#...7.....
    38a8:	00320046 0017001b 00050002 00500080     F.2...........P.
    38b8:	00fa0077 00240047 00730041 000a0020     w...G.$.A.s. ...
    38c8:	00690045 002d0012                       E.i...-.

000038d0 <device_execution_time_608_m1>:
    38d0:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
    38e0:	00ac0043 00230015 00d70040 00050030     C.....#.@...0...
    38f0:	00a50056 00230017 00370008 00140016     V.....#...7.....
    3900:	00320046 0017001b 00050002 00a00080     F.2.............
    3910:	02710077 002a0047 00dc0041 000a0020     w.q.G.*.A... ...
    3920:	01270045 002d0012                       E.'...-.

00003928 <device_execution_time_608_m2>:
    3928:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
    3938:	02130043 00230015 028d0040 00050030     C.....#.@...0...
    3948:	00a50056 00230017 00370008 00140016     V.....#...7.....
    3958:	00320046 0017001b 00050002 01e00080     F.2.............
    3968:	09140077 004b0047 02990041 000a0020     w...G.K.A... ...
    3978:	043d0045 002d0012                       E.=...-.

00003980 <device_execution_time_508>:
    3980:	000d0028 00140024 0032001c 003a0043     (...$.....2.C.:.
    3990:	000b0015 00730040 00170011 00020030     ....@.s.....0...
    39a0:	00200017 000e0008 001d0016 00030001     .. .............
    39b0:	00300046 0017001b 00050002 00090047     F.0.........G...
    39c0:	003c0041 000a0020 00480045 001a0012     A.<. ...E.H.....

000039d0 <device_execution_time_108>:
    39d0:	000d0028 00140024 0032001c 000b0015     (...$.....2.....
    39e0:	00730040 00170011 00020030 00200017     @.s.....0..... .
    39f0:	000e0008 001d0016 00030001 00300046     ............F.0.
    3a00:	0017001b 00050002 00090047 003c0041     ........G...A.<.
    3a10:	000a0020 00480045 001a0012 43331104      ...E.H.......3C
    3a20:	40c40704 88000000 00000001 00000000     ...@............
    3a30:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    3a40:	6d5f6332 6e79735f 00632e63 42000400     2c_m_sync.c....B
    3a50:	42000800 42000c00                       ...B...B

00003a58 <_i2cms>:
    3a58:	00000000 00200014 00000100 00000f0e     ...... .........
    3a68:	00d70000 003d0900 682f2e2e 732f6c70     ......=.../hpl/s
    3a78:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    3a88:	0000632e 2125ba74 0000237c 00002364     .c..t.%!|#..d#..
    3a98:	0000235c 00002228 0000235c 0000230a     \#..("..\#...#..
    3aa8:	0000235c 00002228 00002364 00002364     \#..("..d#..d#..
    3ab8:	0000230a 00002228 0000221e 0000221e     .#..("..."..."..
    3ac8:	0000221e 0000258e 000029cc 00002880     ."...%...)...(..
    3ad8:	00002880 0000287c 000029ae 000029ae     .(..|(...)...)..
    3ae8:	000029a0 0000287c 000029ae 000029a0     .)..|(...)...)..
    3af8:	000029ae 0000287c 000029b6 000029b6     .)..|(...)...)..
    3b08:	000029b6 00002bc0                       .)...+..

00003b10 <_init>:
    3b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3b16:	bc08      	pop	{r3}
    3b18:	469e      	mov	lr, r3
    3b1a:	4770      	bx	lr

00003b1c <__init_array_start>:
    3b1c:	00000241 	.word	0x00000241

00003b20 <_fini>:
    3b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b22:	46c0      	nop			; (mov r8, r8)
    3b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3b26:	bc08      	pop	{r3}
    3b28:	469e      	mov	lr, r3
    3b2a:	4770      	bx	lr

00003b2c <__fini_array_start>:
    3b2c:	00000215 	.word	0x00000215

Disassembly of section .gnu.sgstubs:

0000fb00 <nsc_ext_irq_init>:
    fb00:	e97f e97f 	sg
    fb04:	f7f0 bb0f 	b.w	126 <__acle_se_nsc_ext_irq_init>

0000fb08 <nsc_periph_clock_init>:
    fb08:	e97f e97f 	sg
    fb0c:	f7f0 baf2 	b.w	f4 <__acle_se_nsc_periph_clock_init>
	...
